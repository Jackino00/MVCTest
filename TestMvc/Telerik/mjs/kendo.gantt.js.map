{"version":3,"sources":["raw-mjs/kendo.gantt.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","keys","supportsMedia","mobileOS","support","Widget","ui","encode","htmlEncode","ObservableObject","data","ObservableArray","Query","isArray","Array","isFunction","extend","isPlainObject","outerWidth","_outerWidth","outerHeight","_outerHeight","NS","TABINDEX","STRING","DOT","VIEWS_DROPDOWN_TEMPLATE","label","styles","views","viewsDropdown","viewsDropdownDefaults","Object","map","view","title","join","ADD_ACTIONS","text","ganttStyles","wrapper","plannedTasks","rowHeight","content","listWrapper","list","timelineWrapper","timeline","splitBar","splitter","popupWrapper","popupList","resizeHandle","icon","item","line","buttonDelete","buttonCancel","buttonSave","buttonToggle","buttonDefaults","primary","hovered","selected","focused","focusedCell","gridHeader","gridHeaderWrap","gridContent","tasks","popup","form","editForm","formContainer","resourcesFormContainer","message","buttonsContainer","button","editField","editLabel","resourcesField","toolbar","headerWrapper","footerWrapper","viewsWrapper","iconPlus","iconPdf","iconToggle","viewButton","link","pdfButton","appendButton","selector","uid","attr","focusTable","table","direct","parents","scrollPositions","parentsUntil","filter","index","element","getComputedStyles","overflow","add","each","parent","scrollTop","setActive","e","focus","Gantt","init","options","events","dataSource","fn","call","this","_events","_wrapper","_resources","length","_timeline","_processDefaults","_toolbar","_footer","_splitter","_adjustDimensions","_preventRefresh","_selectedViewName","_dataSource","_assignments","_list","_dependencies","_scrollable","_dataBind","_attachEvents","_createEditor","notify","_showWatermarkOverlay","autoBind","navigatable","selectable","editable","resizable","columnResizeHandleWidth","columns","dependencies","resources","assignments","taskTemplate","tooltip","visible","messages","save","cancel","destroy","deleteTaskConfirmation","deleteDependencyConfirmation","deleteTaskWindowTitle","deleteDependencyWindowTitle","selectView","day","week","month","year","start","end","actions","append","addChild","insertBefore","insertAfter","pdf","toggle","editor","editorTitle","resourcesEditorTitle","plannedStart","plannedEnd","percentComplete","assignButton","resourcesHeader","unitsHeader","addNew","percentCompleteHint","remove","actualStart","actualEnd","parentOptionLabel","general","predecessors","successors","other","dependencyType","switchText","offsetTooltipAdvanced","offsetTooltipDelay","seconds","minutes","hours","days","showWorkHours","showWorkDays","workDayStart","Date","workDayEnd","workWeekStart","workWeekEnd","hourSpan","snap","height","listWidth","showPlannedTasks","select","value","find","_selectionUpdate","clearSelection","unbind","_refreshHandler","_progressHandler","_errorHandler","_dependencyRefreshHandler","_dependencyErrorHandler","getKendoToolBar","footer","_editor","_resourceEditorWindow","_resizeDraggable","layout","_getGanttSplitter","off","_mediaQuery","removeListener","_mediaQueryHandler","_resizeHandler","setOptions","newOptions","deepExtend","selectedView","isSettings","type","empty","_setEvents","resize","bind","on","matches","kendoSplitter","orientation","panes","collapsible","scrollable","size","getKendoSplitter","width","addClass","appendTo","css","treelistWrapper","_viewClickHandler","target","trigger","preventDefault","_togglePane","that","treelist","contentSelector","is","removeClass","refresh","_resize","ns","viewsButtons","toolbarStyles","actionsMessages","defaults","menuButtons","m","attributes","class","click","_addClickHandler","open","_openAddClickHandler","saveAsPDF","showText","switchLabel","template","component","componentOptions","checked","change","_togglePlannedTasks","unchecked","viewsDdl","togglable","group","viewsGroup","current","toLowerCase","push","values","t","buttons","_viewsButtons","defaultCommands","_processTools","items","commands","tools","spacerPresent","create","c","splitbar","toolbarEl","_suppressResize","hide","show","viewsDropdownSelector","toolsOptions","prepend","kendoToolBar","defaultTools","parentMessages","matchMedia","addListener","val","toggleSwitch","direction","animation","effects","toolbarHeight","footerHeight","totalHeight","totalWidth","treeListVisible","splitBarWidth","treeListWidth","timelineWidth","children","_scrollTo","action","scrollTarget","closest","get","scrollIntoView","_addTask","orderId","task","_createNewModel","firstSlot","_timeSlots","set","_createTask","dataItem","taskParent","_getListEditable","update","reorder","mode","move","reorderable","clickMoveClick","_getListOptions","filterable","columnMenu","field","_attachResourceEditor","column","i","_resourcePopupEditor","_attachListEvents","oldIndex","newIndex","oldWidth","newWidth","_navigatable","model","container","cell","_preventItemChange","closeCell","key","updatedValues","previousTask","updateDuration","duration","updatePlannedDuration","plannedDuration","hasOwnProperty","getTime","isCurrentInHeader","currentIndex","rowIndex","updateInfo","hasChanges","cancelChanges","_updateAssignments","Math","max","cellIndex","_requestStart","sync","then","_tabPressed","td","tbody","eq","_setCurrent","sender","_updatePristineForModel","expanded","position","parentId","source","sort","dir","_updateTask","selection","listElement","listOptions","GanttList","prefix","edit","navigate","trimOptions","GanttTimeline","viewName","replace","viewsEl","getKendoButtonGroup","getByUid","resizeStart","dependency","predecessorId","predecessor","successorId","successor","_createDependency","currentUid","editTask","removeTask","summary","removeDependency","_error","GanttDataSource","refreshDependencies","GanttDependencyDataSource","dataTextField","dataColorField","dataFormatField","DataSource","_assignmentsRefreshHandler","dataTaskIdField","dataResourceIdField","dataValueField","gantt","PopupEditor","_createResourceEditor","cancelTask","saveTask","updateDependencies","buttonsEl","dialog","popupStyles","dialogEl","format","kendoButton","themeColor","updateModel","close","kendoWindow","modal","draggable","deactivate","center","unitsValidation","step","min","assignmentsModel","schema","resourceTextField","fields","Units","validation","_resourceEditor","ResourceEditor","r","range","_render","taskTree","_renderDependencies","date","_scrollToDate","_modelFromElement","setDataSource","fetch","setDependenciesDataSource","assignment","resource","taskId","resourceId","hasMatch","operator","toArray","_updateAssignment","splice","_removeAssignment","shift","j","newLength","_createAssignment","taskCopy","toJSON","_editTask","difference","hasResourceChanges","k","updated","u","some","concat","getDifference","dirty","_syncDataSource","_updateDependency","created","d","_preventDependencyRefresh","destroyed","resourceValueField","_taskConfirm","_removeTask","insert","_scrollToUid","resourceValue","_dependencyConfirm","_removeDependency","_removeTaskDependencies","_removeTaskAssignments","callback","_confirm","confirmation","showDialog","_progress","cachedUid","scrollToUid","cachedIndex","_selected","_assignResources","_renderTree","_current","assigments","applyTaskResource","setter","wrapTask","resourcedId","valueFormat","formatedValue","toString","color","_wrapResourceData","result","taskAssignments","valuePerResource","progress","headerSelector","timelineHeader","timelineContent","treeListHeader","treeListContent","scrollLeft","delta","wheelDeltaY","currentTarget","one","headerTable","contentTable","tables","isInput","ctrlKey","_focusTimeout","setTimeout","focusedIndex","keyCode","focusSequence","contains","F10","first","TAB","shiftKey","hasClass","last","DELETE","selectedTask","deleteAction","tagName","_viewByIndex","promises","when","apply","done","_adjustHeight","_renderCurrentTime","toggleClass","_setPlanned","PDFMixin","_drawPDF","listTableWidth","listTableHeight","toolbarsHeight","timelineTableWidth","clone","_drawPDFShadow","avoidLinks","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.gantt.js","sourcesContent":["import './kendo.data.js';\nimport './kendo.resizable.js';\nimport './kendo.switch.js';\nimport './kendo.gantt.data.js';\nimport './kendo.gantt.editors.js';\nimport './kendo.gantt.list.js';\nimport './kendo.gantt.timeline.js';\nimport './kendo.splitter.js';\nimport './kendo.pdf.js';\nimport './kendo.toolbar.js';\nimport './kendo.html.button.js';\n\nconst __meta__ = {\n    id: \"gantt\",\n    name: \"Gantt\",\n    category: \"web\",\n    description: \"The Gantt component.\",\n    depends: [ \"data\", \"resizable\", \"switch\", \"gantt.data\", \"gantt.editors\", \"gantt.list\", \"gantt.timeline\", \"pdf\", \"toolbar\", \"html.button\" ]\n};\n(function($, undefined$1) {\n\n    var kendo = window.kendo,\n        keys = kendo.keys,\n        supportsMedia = \"matchMedia\" in window,\n        mobileOS = kendo.support.mobileOS,\n        Widget = kendo.ui.Widget,\n        encode = kendo.htmlEncode,\n        ObservableObject = kendo.data.ObservableObject,\n        ObservableArray = kendo.data.ObservableArray,\n        Query = kendo.data.Query,\n        isArray = Array.isArray,\n        isFunction = kendo.isFunction,\n        extend = $.extend,\n        isPlainObject = $.isPlainObject,\n        outerWidth = kendo._outerWidth,\n        outerHeight = kendo._outerHeight,\n        defaultIndicatorWidth = 3,\n\n        NS = \".kendoGantt\",\n        PERCENTAGE_FORMAT = \"p0\",\n        TABINDEX = \"tabIndex\",\n        STRING = \"string\",\n        DOT = \".\",\n        TASK_DELETE_CONFIRM = \"Are you sure you want to delete this task?\",\n        DEPENDENCY_DELETE_CONFIRM = \"Are you sure you want to delete this dependency?\",\n        VIEWS_DROPDOWN_TEMPLATE = ({ label, styles, views }) => `<select aria-label=\"${label}\" class=\"k-dropdown k-picker k-dropdown-list ${styles.viewsDropdown} ${styles.viewsDropdownDefaults}\">` +\n            `${Object.keys(views).map(view => '<option value=\"' + view + '\">' + kendo.htmlEncode(views[view].title) + '</option>').join(\"\")}` +\n        '</select>',\n        MIN_SCREEN = \"(max-width: 480px)\",\n        ADD_ACTIONS = [{\n            data: \"add\",\n            text: \"addChild\"\n        },\n        {\n            data: \"insert-before\",\n            text: \"insertBefore\"\n        },\n        {\n            data: \"insert-after\",\n            text: \"insertAfter\"\n        }];\n\n    var ganttStyles = {\n        wrapper: \"k-gantt\",\n        plannedTasks: \"k-gantt-planned\",\n        rowHeight: \"k-gantt-rowheight\",\n        content: \"k-gantt-content\",\n        listWrapper: \"k-gantt-treelist\",\n        list: \"k-gantt-treelist\",\n        timelineWrapper: \"k-gantt-timeline-pane\",\n        timeline: \"k-gantt-timeline-pane\",\n        splitBar: \"k-splitbar\",\n        splitter: \"k-splitter\",\n        popupWrapper: \"k-list-container\",\n        popupList: \"k-list k-reset\",\n        resizeHandle: \"k-resize-handle\",\n        icon: \"k-icon\",\n        item: \"k-item\",\n        line: \"k-gantt-line\",\n        buttonDelete: \"k-gantt-delete\",\n        buttonCancel: \"k-gantt-cancel\",\n        buttonSave: \"k-gantt-update\",\n        buttonToggle: \"k-gantt-toggle\",\n        buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n        primary: \"k-button-solid-primary\",\n        hovered: \"k-hover\",\n        selected: \"k-selected\",\n        focused: \"k-focus\",\n        focusedCell: \"k-focus\",\n        gridHeader: \"k-grid-header\",\n        gridHeaderWrap: \"k-grid-header-wrap\",\n        gridContent: \"k-grid-content\",\n        tasks: \"k-gantt-tasks\",\n        popup: {\n            form: \"k-popup-edit-form\",\n            editForm: \"k-gantt-edit-form\",\n            formContainer: \"k-edit-form-container\",\n            resourcesFormContainer: \"k-resources-form-container\",\n            message: \"k-popup-message\",\n            buttonsContainer: \"k-edit-buttons\",\n            button: \"k-button\",\n            editField: \"k-edit-field\",\n            editLabel: \"k-edit-label\",\n            resourcesField: \"k-gantt-resources\"\n        },\n        toolbar: {\n            headerWrapper: \"k-gantt-header k-gantt-toolbar\",\n            footerWrapper: \"k-gantt-footer k-gantt-toolbar\",\n            toolbar: \"k-gantt-toolbar\",\n            views: \"k-gantt-views\",\n            viewsWrapper: \"k-gantt-views-wrapper\",\n            viewsDropdown: \"k-views-dropdown\",\n            viewsDropdownDefaults: \"k-picker-solid k-rounded-md\",\n            button: \"k-button\",\n            buttonToggle: \"k-gantt-toggle\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n            iconPlus: \"plus\",\n            iconPdf: \"file-pdf\",\n            iconToggle: \"layout-1-by-4\",\n            viewButton: \"k-view\",\n            link: \"k-link\",\n            pdfButton: \"k-gantt-pdf\",\n            appendButton: \"k-gantt-create\"\n        }\n    };\n\n    function selector(uid) {\n        return \"[\" + kendo.attr(\"uid\") + (uid ? \"='\" + uid + \"']\" : \"]\");\n    }\n\n    function trimOptions(options) {\n        delete options.name;\n        delete options.prefix;\n\n        delete options.remove;\n        delete options.edit;\n        delete options.add;\n        delete options.navigate;\n\n        return options;\n    }\n\n    function getDifference(updated, current) {\n        return updated.filter(u => !current.some(c => c.id === u.id && c.value === u.value))\n        .concat(current.filter(c => !updated.some(u => u.id === c.id && c.value === u.value)));\n    }\n\n    function focusTable(table, direct) {\n        var wrapper = table.parents('[' + kendo.attr(\"role\") + '=\"gantt\"]');\n        var scrollPositions = [];\n        var parents = scrollableParents(wrapper);\n\n        table.attr(TABINDEX, 0);\n\n        if (direct) {\n            parents.each(function(index, parent) {\n                scrollPositions[index] = $(parent).scrollTop();\n            });\n        }\n\n        try {\n            //The setActive method does not cause the document to scroll to the active object in the current page\n            table[0].setActive();\n        } catch (e) {\n            table[0].focus();\n        }\n\n        if (direct) {\n            parents.each(function(index, parent) {\n                $(parent).scrollTop(scrollPositions[index]);\n            });\n        }\n    }\n\n    function scrollableParents(element) {\n        return $(element).parentsUntil(\"body\")\n                .filter(function(index, element) {\n                    var computedStyle = kendo.getComputedStyles(element, [\"overflow\"]);\n                    return computedStyle.overflow != \"visible\";\n                })\n                .add(window);\n    }\n\n    var Gantt = Widget.extend({\n        init: function(element, options, events) {\n            if (isArray(options)) {\n                options = { dataSource: options };\n            }\n\n            Widget.fn.init.call(this, element, options);\n\n            if (events) {\n                this._events = events;\n            }\n\n            this._wrapper();\n\n            this._resources();\n\n            if (!this.options.views || !this.options.views.length) {\n                this.options.views = [\"day\", \"week\", \"month\"];\n            }\n\n            this._timeline();\n\n            this._processDefaults();\n            this._toolbar();\n            this._footer();\n            this._splitter();\n\n            this._adjustDimensions();\n\n            // Prevent extra refresh from setting the view\n            this._preventRefresh = true;\n\n            this.view(this.timeline._selectedViewName);\n\n            this._preventRefresh = false;\n\n            this._dataSource();\n\n            this._assignments();\n\n            this._list();\n\n            this._dependencies();\n\n            this._scrollable();\n\n            this._dataBind();\n\n            this._attachEvents();\n\n            this._createEditor();\n\n            kendo.notify(this);\n\n            if (this._showWatermarkOverlay) {\n                this._showWatermarkOverlay(this.wrapper[0]);\n            }\n        },\n\n        events: [\n            \"dataBinding\",\n            \"dataBound\",\n            \"add\",\n            \"edit\",\n            \"remove\",\n            \"cancel\",\n            \"save\",\n            \"change\",\n            \"navigate\",\n            \"moveStart\",\n            \"move\",\n            \"moveEnd\",\n            \"resizeStart\",\n            \"resize\",\n            \"resizeEnd\",\n            \"columnHide\",\n            \"columnReorder\",\n            \"columnResize\",\n            \"columnShow\",\n            \"togglePlannedTasks\"\n        ],\n\n        options: {\n            name: \"Gantt\",\n            autoBind: true,\n            navigatable: true,\n            selectable: true,\n            editable: true,\n            resizable: false,\n            columnResizeHandleWidth: defaultIndicatorWidth,\n            columns: [],\n            views: [],\n            dataSource: {},\n            dependencies: {},\n            resources: {},\n            assignments: {},\n            taskTemplate: null,\n            tooltip: {\n                visible: true\n            },\n            messages: {\n                save: \"Save\",\n                cancel: \"Cancel\",\n                destroy: \"Delete\",\n                deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n                deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n                deleteTaskWindowTitle: \"Delete task\",\n                deleteDependencyWindowTitle: \"Delete dependency\",\n                selectView: \"Select view\",\n                views: {\n                    day: \"Day\",\n                    week: \"Week\",\n                    month: \"Month\",\n                    year: \"Year\",\n                    start: \"Start\",\n                    end: \"End\"\n                },\n                actions: {\n                    append: \"Add Task\",\n                    addChild: \"Add Child\",\n                    insertBefore: \"Add Above\",\n                    insertAfter: \"Add Below\",\n                    pdf: \"Export to PDF\",\n                    toggle: \"Toggle pane\"\n                },\n                editor: {\n                    editorTitle: \"Task\",\n                    resourcesEditorTitle: \"Resources\",\n                    title: \"Title\",\n                    start: \"Start\",\n                    end: \"End\",\n                    plannedStart: \"Planned Start\",\n                    plannedEnd: \"Planned End\",\n                    percentComplete: \"Complete\",\n                    resources: \"Resources\",\n                    assignButton: \"Assign\",\n                    resourcesHeader: \"Resources\",\n                    unitsHeader: \"Units\",\n                    parent: \"Parent\",\n                    addNew: \"Add\",\n                    name: \"Name\",\n                    percentCompleteHint: \"value from 0 to 1\",\n                    remove: \"Remove\",\n                    actualStart: \"Actual Start\",\n                    actualEnd: \"Actual End\",\n                    parentOptionLabel: \"-None-\",\n                    general: \"General\",\n                    predecessors: \"Predecessors\",\n                    successors: \"Successors\",\n                    other: \"Other\",\n                    dependencyType: \"Type\"\n                },\n                plannedTasks: {\n                    switchText: \"Planned Tasks\",\n                    offsetTooltipAdvanced: \"Met deadline earlier\",\n                    offsetTooltipDelay: \"Delay\",\n                    seconds: \"seconds\",\n                    minutes: \"minutes\",\n                    hours: \"hours\",\n                    days: \"days\"\n                }\n            },\n            showWorkHours: true,\n            showWorkDays: true,\n            toolbar: null,\n            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n            workWeekStart: 1,\n            workWeekEnd: 5,\n            hourSpan: 1,\n            snap: true,\n            height: 600,\n            listWidth: \"30%\",\n            rowHeight: null,\n            showPlannedTasks: false\n        },\n\n        select: function(value) {\n            var list = this.list;\n\n            if (!value) {\n                return list.select();\n            }\n\n            if (typeof value === STRING) {\n                value = list.content.find(value);\n            }\n\n            list.select(value);\n            this._selectionUpdate();\n\n            return;\n        },\n\n        clearSelection: function() {\n            this.list.clearSelection();\n            this._selectionUpdate();\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            if (this.dataSource) {\n                this.dataSource.unbind(\"change\", this._refreshHandler);\n                this.dataSource.unbind(\"progress\", this._progressHandler);\n                this.dataSource.unbind(\"error\", this._errorHandler);\n            }\n\n            if (this.dependencies) {\n                this.dependencies.unbind(\"change\", this._dependencyRefreshHandler);\n                this.dependencies.unbind(\"error\", this._dependencyErrorHandler);\n            }\n\n            if (this.timeline) {\n                this.timeline.unbind();\n                this.timeline.destroy();\n            }\n\n            if (this.list) {\n                this.list.unbind();\n                this.list.destroy();\n            }\n\n            if (this.toolbar && this.toolbar.getKendoToolBar()) {\n                this.toolbar.getKendoToolBar().destroy();\n            }\n\n            if (this.footer && this.footer.getKendoToolBar()) {\n                this.footer.getKendoToolBar().destroy();\n            }\n\n            if (this._editor) {\n                this._editor.destroy();\n            }\n\n            if (this._resourceEditorWindow) {\n                this._resourceEditorWindow.destroy();\n            }\n\n            if (this._resizeDraggable) {\n                this._resizeDraggable.destroy();\n            }\n\n            if (this.layout && this._getGanttSplitter()) {\n                this._getGanttSplitter().destroy();\n            }\n\n            this.toolbar.off(NS);\n\n            if (supportsMedia) {\n                this._mediaQuery.removeListener(this._mediaQueryHandler);\n                this._mediaQuery = null;\n            }\n\n            $(window).off(\"resize\" + NS, this._resizeHandler);\n            $(this.wrapper).off(NS);\n\n            this.toolbar = null;\n            this.footer = null;\n\n            kendo.destroy(this.element);\n        },\n\n        setOptions: function(options) {\n            var newOptions = kendo.deepExtend({}, this.options, options);\n\n            var events = this._events;\n\n            if (!options.views) {\n                var selectedView = this.view().name;\n\n                newOptions.views = $.map(this.options.views, function(view) {\n                    var isSettings = isPlainObject(view);\n                    var name = isSettings ? ((typeof view.type !== \"string\") ? view.title : view.type) : view;\n\n                    if (selectedView === name) {\n                        if (isSettings) {\n                            view.selected = true;\n                        } else {\n                            view = { type: name, selected: true };\n                        }\n                    } else if (isSettings) {\n                        view.selected = false;\n                    }\n\n                    return view;\n                });\n            }\n\n            if (!options.dataSource) { newOptions.dataSource = this.dataSource; }\n            if (!options.dependencies) { newOptions.dependencies = this.dependencies; }\n            if (!options.resources) { newOptions.resources = this.resources; }\n            if (!options.assignments) { newOptions.assignments = this.assignments; }\n\n            this.destroy();\n            this.element.empty();\n            this.options = null;\n\n            this.init(this.element, newOptions, events);\n\n            Widget.fn._setEvents.call(this, newOptions);\n        },\n\n        _attachEvents: function() {\n            this._resizeHandler = this.resize.bind(this, false);\n            $(window).on(\"resize\" + NS, this._resizeHandler);\n\n            if (supportsMedia) {\n                this._mediaQueryHandler({ matches: this._mediaQuery.matches });\n            }\n        },\n\n        _splitter: function() {\n            this.splitter = this.layout.find(\".k-gantt-splitter\").kendoSplitter({\n                navigatable: this.options.navigatable,\n                orientation: \"horizontal\",\n                panes: [\n                    { collapsible: false, scrollable: false, label: \"Gantt List\", size: this.options.listWidth },\n                    { collapsible: false, scrollable: false, label: \"Gantt Timeline\" }\n                ]\n            }).getKendoSplitter();\n\n            if (this.options.listWidth) {\n                this.splitter.size(\".k-pane:first\", this.options.listWidth);\n            }\n        },\n        _getGanttSplitter: function() {\n            return this.layout.find(\".k-gantt-splitter\").getKendoSplitter();\n        },\n\n        _wrapper: function() {\n            var ganttStyles = Gantt.styles;\n            var options = this.options;\n            var height = options.height;\n            var width = options.width;\n\n            this.wrapper = this.element.addClass(ganttStyles.wrapper).attr(\"role\", \"application\");\n            let splitter = $(\"<div class='k-gantt-splitter'></div>\")\n                .append(\"<div class='\" + ganttStyles.listWrapper + \"'><div></div></div>\")\n                .append(\"<div class='\" + ganttStyles.timelineWrapper + \"'><div></div></div>\");\n            this.layout = $(\"<div class='\" + ganttStyles.content + \"'></div>\").appendTo(this.wrapper)\n                .append(splitter);\n\n            if (options.showPlannedTasks) {\n                this.wrapper.addClass(ganttStyles.plannedTasks);\n            }\n\n            if (height) {\n                this.wrapper.css(\"height\", height);\n            }\n\n            if (width) {\n                this.wrapper.css(\"width\", width);\n            }\n\n            if (options.rowHeight) {\n                this.wrapper.addClass(ganttStyles.rowHeight);\n            }\n\n            this.treelistWrapper = this.wrapper.find(DOT + ganttStyles.list);\n            this.timelineWrapper = this.wrapper.find(DOT + ganttStyles.timeline);\n\n            this.treelistWrapper.css(\"width\", options.listWidth);\n            this.timelineWrapper.css(\"width\", this.wrapper.width() - this.treelistWrapper.outerWidth());\n        },\n\n        _viewClickHandler: function(e) {\n            var list = this.list;\n            var name = e.target.attr(kendo.attr(\"name\"));\n\n            if (list.editor && !list.editor.end()) {\n                return;\n            }\n\n            if (!this.trigger(\"navigate\", { view: name })) {\n                this.view(name);\n            } else {\n                e.preventDefault();\n            }\n        },\n\n        _togglePane: function(e) {\n            var that = this,\n                treelist = that.treelistWrapper,\n                timeline = that.timelineWrapper,\n                contentSelector = DOT + ganttStyles.gridContent;\n\n            e.preventDefault();\n\n            if (treelist.is(\":visible\")) {\n                treelist.addClass(\"k-hidden\");\n                timeline.removeClass(\"k-hidden\");\n\n                that.refresh();\n\n                timeline\n                    .find(contentSelector)\n                    .scrollTop(that.scrollTop);\n            } else {\n                treelist.removeClass(\"k-hidden\");\n                timeline.addClass(\"k-hidden\");\n\n                treelist\n                    .find(contentSelector)\n                    .scrollTop(that.scrollTop);\n            }\n\n            that._resize();\n        },\n\n        _processDefaults: function() {\n            var that = this,\n                views = that.timeline.views,\n                ns = kendo.ns,\n                viewsButtons = [],\n                toolbarStyles = Gantt.styles.toolbar,\n                actionsMessages = this.options.messages.actions,\n                items = ADD_ACTIONS.map((m) => ({\n                    text: actionsMessages[m.text],\n                    attributes: { \"data-type\": m.data }\n                })),\n                defaults = {\n                    append: {\n                        name: \"append\",\n                        type: \"dropDownButton\",\n                        menuButtons: items,\n                        icon: toolbarStyles.iconPlus,\n                        attributes: {\n                            class: toolbarStyles.appendButton\n                        },\n                        click: that._addClickHandler.bind(that),\n                        open: that._openAddClickHandler.bind(that)\n                    },\n                    pdf: {\n                        name: \"pdf\",\n                        type: \"button\",\n                        attributes: {\n                            class: toolbarStyles.pdfButton\n                        },\n                        icon: toolbarStyles.iconPdf,\n                        click: that.saveAsPDF.bind(that)\n                    },\n                    toggle: {\n                        name: \"toggle\",\n                        type: \"button\",\n                        showText: \"overflow\",\n                        attributes: {\n                            class: \"k-gantt-toggle\"\n                        },\n                        icon: toolbarStyles.iconToggle,\n                        click: that._togglePane.bind(that)\n                    },\n                    switchLabel: {\n                        template: \"<label for=planned-switch>\" + that.options.messages.plannedTasks.switchText + \"</label>\"\n                    },\n                    plannedTasks: {\n                        type: \"component\",\n                        component: \"Switch\",\n                        element: \"<input id='planned-switch' class='k-gantt-planned-switch'>\",\n                        componentOptions: {\n                            checked: that.options.showPlannedTasks,\n                            change: that._togglePlannedTasks.bind(that),\n                            messages: {\n                                checked: \"\",\n                                unchecked: \"\"\n                            }\n                        }\n                    },\n                    viewsDdl: {\n                        template: VIEWS_DROPDOWN_TEMPLATE({\n                            views: that.timeline.views,\n                            styles: toolbarStyles,\n                            label: that.options.messages.selectView\n                        })\n                    },\n                    view: {\n                        name: \"view\",\n                        type: \"button\",\n                        togglable: true,\n                        group: \"views\"\n                    },\n                    viewsGroup: {\n                        type: \"buttonGroup\",\n                        attributes: {\n                            class: toolbarStyles.views\n                        }\n                    }\n                };\n\n            Object.keys(views).map(name => {\n                var current = $.extend(true, {}, defaults.view);\n\n                current.text = views[name].title;\n                current.attributes = {\n                    class: \"k-view-\" + name.toLowerCase()\n                };\n                current.attributes[\"data\" + ns + \"-name\"] = name;\n\n                defaults[name] = current;\n\n                viewsButtons.push(name);\n            });\n\n            Object.values(defaults).map(t => {\n                if (t.name === \"view\") {\n                    t.click = that._viewClickHandler.bind(that);\n                }\n            });\n\n            defaults.viewsGroup.buttons = viewsButtons;\n\n            that._viewsButtons = viewsButtons;\n            that.defaultCommands = defaults;\n        },\n\n        _processTools: function(items) {\n            var editable = this.options.editable,\n                commands = [],\n                tools = [\"toggle\"],\n                spacerPresent = false,\n                defaults = this.defaultCommands;\n\n            if (!Array.isArray(items)) {\n                if (editable && editable.create !== false) {\n                    tools.push(\"append\");\n                }\n            } else {\n                commands = items;\n            }\n\n            commands.map(c => {\n                if (c === \"plannedTasks\" || c.name === \"plannedTasks\") {\n                    spacerPresent = true;\n\n                    tools.push({\n                        type: \"spacer\"\n                    });\n\n                    tools.push(\"switchLabel\");\n                }\n\n                if (!defaults[c] && !defaults[c.name] && !c.template) {\n                    if (typeof c === STRING) {\n                        c = {\n                            name: c,\n                            type: \"button\",\n                            text: c,\n                            attributes: {\n                                class: \"k-gantt-\" + c\n                            }\n                        };\n                    } else {\n                        c = $.extend({}, {\n                            type: \"button\",\n                            text: c.name,\n                            attributes: {\n                                class: \"k-gantt-\" + c.name\n                            }\n                        }, c);\n                    }\n                }\n\n                tools.push(c);\n            });\n\n            if (!spacerPresent) {\n                tools.push({\n                    type: \"spacer\"\n                });\n            }\n\n            if (this._viewsButtons && this._viewsButtons.length > 0) {\n                if (this._viewsButtons.length > 1) {\n                    tools.push(\"viewsDdl\");\n                }\n\n                tools.push(\"viewsGroup\");\n            }\n\n            return tools;\n        },\n\n        _mediaQueryHandler: function(e) {\n            var that = this;\n            var splitbar = that.layout.find(\".k-splitbar\");\n            var splitter = that._getGanttSplitter();\n            var treelist = that.treelistWrapper;\n            var timeline = that.timelineWrapper;\n            var contentSelector = DOT + ganttStyles.gridContent;\n\n            var toolbarEl = that.toolbar;\n            var toolbar = toolbarEl.getKendoToolBar();\n\n            if (e.matches) {\n                treelist.addClass(\"k-hidden\");\n                splitbar.addClass(\"k-hidden\");\n                splitter._suppressResize = true;\n                toolbar.hide(toolbarEl.find(\".k-gantt-views\"));\n                toolbar.show(toolbarEl.find(\".k-views-dropdown\"));\n\n                treelist.width(\"100%\");\n            } else {\n                splitter._suppressResize = false;\n                treelist.removeClass(\"k-hidden\");\n                splitbar.removeClass(\"k-hidden\");\n                timeline.removeClass(\"k-hidden\");\n\n                toolbar.show(toolbarEl.find(\".k-gantt-views\"));\n                toolbar.hide(toolbarEl.find(\".k-views-dropdown\"));\n\n                treelist.width(treelist.outerWidth());\n\n                timeline\n                    .find(contentSelector)\n                    .scrollTop(that.scrollTop);\n            }\n\n            that._resize();\n        },\n\n        _toolbar: function() {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var viewsDropdownSelector = DOT + ganttStyles.toolbar.viewsDropdown;\n            var toolsOptions = this.options.toolbar;\n            var tools;\n            var toolbar;\n\n            if (typeof toolsOptions === STRING) {\n                toolsOptions = kendo.template(toolsOptions).bind(this);\n            }\n\n            if (isFunction(toolsOptions)) {\n                tools = this._processTools([{\n                    template: toolsOptions({})\n                }]);\n            } else {\n                tools = this._processTools(toolsOptions);\n            }\n\n            toolbar = $(\"<div class='\" + ganttStyles.toolbar.headerWrapper + \"'>\");\n\n            this.wrapper.prepend(toolbar);\n            this.toolbar = toolbar;\n\n            toolbar.kendoToolBar({\n                resizable: false,\n                tools: tools,\n                size: \"medium\",\n                defaultTools: this.defaultCommands,\n                parentMessages: this.options.messages.actions\n            });\n\n            if (supportsMedia) {\n                this._mediaQuery = window.matchMedia(MIN_SCREEN);\n                this._mediaQuery.addListener(this._mediaQueryHandler.bind(this));\n            }\n\n            toolbar.on(\"change\" + NS, viewsDropdownSelector, function() {\n                var list = that.list;\n                var name = $(this).val();\n\n                if (list.editable && list.editable.trigger(\"validate\")) {\n                    return;\n                }\n\n                if (!that.trigger(\"navigate\", { view: name })) {\n                    that.view(name);\n                }\n            });\n\n            this.toggleSwitch = toolbar.find('input.k-gantt-planned-switch').data(\"kendoSwitch\");\n        },\n\n        _footer: function() {\n            var editable = this.options.editable;\n\n            if (!editable || editable.create === false) {\n                return;\n            }\n\n            var ganttStyles = Gantt.styles.toolbar;\n            var messages = this.options.messages.actions;\n            var footer = $(\"<div class='\" + ganttStyles.footerWrapper + \"'>\");\n\n            this.wrapper.append(footer);\n            this.footer = footer;\n\n            footer.kendoToolBar({\n                resizable: false,\n                size: \"medium\",\n                tools: [\"append\"],\n                defaultTools: {\n                    append: extend(true, {}, this.defaultCommands.append, {\n                        direction: \"up\",\n                        animation: {\n                            open: {\n                                effects: \"slideIn:up\"\n                            }\n                        }\n                    })\n                },\n                parentMessages: messages\n            });\n        },\n\n        _adjustDimensions: function() {\n            var element = this.element;\n            var toolbarHeight = outerHeight(this.toolbar);\n            var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n            var totalHeight = element.height();\n            var totalWidth = element.width();\n            var treeListVisible = this.treelistWrapper.is(\":visible\");\n            var splitBar = this.layout.find(\".k-splitbar\");\n            var splitBarWidth = splitBar.is(\":visible\") ? outerWidth(splitBar) : 0;\n            var treeListWidth = treeListVisible ? outerWidth(this.treelistWrapper) : 0;\n            var timelineWidth = totalWidth - ( treeListWidth + splitBarWidth );\n\n            this.layout.children().height(totalHeight - (toolbarHeight + footerHeight));\n            this.timelineWrapper.width(timelineWidth);\n            if (!treeListVisible) {\n                this.timelineWrapper.css(\"left\", 0);\n            }\n\n            if (totalWidth < (treeListWidth + splitBarWidth)) {\n                this.treelistWrapper.width(totalWidth - splitBarWidth);\n            }\n        },\n\n        _scrollTo: function(value) {\n            var view = this.timeline.view();\n            var list = this.list;\n            var attr = kendo.attr(\"uid\");\n            var id = typeof value === \"string\" ? value :\n                value.closest(\"tr\" + selector()).attr(attr);\n            var action;\n            var scrollTarget;\n            var scrollIntoView = function() {\n                if (scrollTarget.length !== 0) {\n                    action();\n                }\n            };\n\n            if (view.content.is(\":visible\")) {\n                scrollTarget = view.content.find(selector(id));\n                action = function() {\n                    view._scrollTo(scrollTarget);\n                };\n            } else {\n                scrollTarget = list.element.find(selector(id));\n                action = function() {\n                    scrollTarget.get(0).scrollIntoView();\n                };\n            }\n\n            scrollIntoView();\n        },\n\n        _addTask: function(selected, parent, type) {\n            var dataSource = this.dataSource,\n                task = dataSource._createNewModel({}),\n                timeline = this.timeline,\n                firstSlot = timeline.view()._timeSlots()[0],\n                editable = this.list.editor,\n                orderId;\n\n            if (editable && editable.trigger(\"validate\")) {\n                return;\n            }\n\n            task.set(\"title\", \"New task\");\n\n            if (parent) {\n                task.set(\"parentId\", parent.get(\"id\"));\n                task.set(\"start\", parent.get(\"start\"));\n                task.set(\"end\", parent.get(\"end\"));\n                task.set(\"plannedStart\", parent.get(\"plannedStart\"));\n                task.set(\"plannedEnd\", parent.get(\"plannedEnd\"));\n            } else {\n                task.set(\"start\", firstSlot.start);\n                task.set(\"end\", firstSlot.end);\n            }\n\n            if (type && type !== \"add\") {\n                orderId = selected.get(\"orderId\");\n                orderId = type === \"insert-before\" ? orderId : orderId + 1;\n            }\n\n            this._createTask(task, orderId);\n        },\n\n        _addClickHandler: function(e) {\n            var type = e.target.data(\"type\");\n            var dataSource = this.dataSource;\n            var selected = this.dataItem(this.select());\n            var parent = dataSource.taskParent(selected);\n            var target = type === \"add\" ? selected : parent;\n\n            this._addTask(selected, target, type);\n        },\n\n        _openAddClickHandler: function(e) {\n            var selected = this.select();\n\n            if (!selected || selected.length === 0) {\n                e.preventDefault();\n\n                this._addTask();\n            }\n        },\n\n        _getListEditable: function() {\n            var editable = false,\n                options = this.options;\n\n            if (options.editable !== false) {\n                editable = \"incell\";\n\n                if (options.editable && options.editable.update === false) {\n                    editable = false;\n                } else {\n                    if (!options.editable || options.editable.reorder !== false) {\n                        editable = {\n                            mode: \"incell\",\n                            move: {\n                                reorderable: true,\n                                clickMoveClick: options.editable.clickMoveClick === false ? false : true\n                            }\n                        };\n                    }\n                }\n            }\n\n            return editable;\n        },\n\n        _getListOptions: function() {\n            var options = this.options,\n                editable = this._getListEditable(),\n                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                ganttListOptions = {\n                    columns: options.columns || [],\n                    dataSource: this.dataSource,\n                    navigatable: options.navigatable,\n                    selectable: options.selectable,\n                    reorderable: options.reorderable,\n                    editable: editable,\n                    resizable: options.resizable,\n                    filterable: options.filterable,\n                    columnMenu: options.columnMenu,\n                    columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n                    listWidth: outerWidth(listWrapper),\n                    resourcesField: this.resources.field,\n                    rowHeight: this.options.rowHeight\n                };\n\n            return ganttListOptions;\n        },\n\n        _attachResourceEditor: function(columns) {\n            var column;\n\n            for (var i = 0; i < columns.length; i++) {\n                column = columns[i];\n\n                if (column.field === this.resources.field && typeof column.editor !== \"function\") {\n                    column.editor = this._resourcePopupEditor.bind(this);\n                }\n            }\n        },\n\n        _attachListEvents: function() {\n            var that = this;\n\n            that.list\n                .bind(\"columnShow\", function(e) {\n                    that.trigger(\"columnShow\", { column: e.column });\n                })\n                .bind(\"columnHide\", function(e) {\n                    that.trigger(\"columnHide\", { column: e.column });\n                })\n                .bind(\"columnReorder\", function(e) {\n                    that.trigger(\"columnReorder\", { column: e.column, oldIndex: e.oldIndex, newIndex: e.newIndex });\n                })\n                .bind(\"columnResize\", function(e) {\n                    that.trigger(\"columnResize\", { column: e.column, oldWidth: e.oldWidth, newWidth: e.newWidth });\n                })\n                .bind(\"render\", function() {\n                    that._navigatable();\n                 }, true)\n                .bind(\"beforeEdit\", function(e) {\n\n                    if (that.trigger(\"edit\", { task: e.model, container: e.container })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"cancel\", function(e) {\n                    if (that.trigger(\"cancel\", { task: e.model, container: e.cell })) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    that._preventItemChange = true;\n                    that.list.closeCell(true);\n                })\n                .bind(\"save\", function(e) {\n                    var updatedValues = e.values,\n                        key;\n\n                    that.previousTask = {};\n                    that._preventRefresh = true;\n\n                    if (that.updateDuration === null || that.updateDuration === undefined$1) {\n                        that.updateDuration = e.model.duration();\n                    }\n\n                    if (that.updatePlannedDuration === null || that.updatePlannedDuration === undefined$1) {\n                        that.updatePlannedDuration = e.model.plannedDuration();\n                    }\n\n                    if (updatedValues.hasOwnProperty(\"start\")) {\n                        updatedValues.end = new Date(updatedValues.start.getTime() + that.updateDuration);\n                    }\n\n                    if (updatedValues.hasOwnProperty(\"plannedStart\") && updatedValues.plannedStart) {\n                        updatedValues.plannedEnd = new Date(updatedValues.plannedStart.getTime() + that.updatePlannedDuration);\n                    }\n\n                    for (key in updatedValues) {\n                        if (updatedValues.hasOwnProperty(key)) {\n                            that.previousTask[key] = e.model.get(key);\n                        }\n                    }\n\n                    that.updatedValues = updatedValues;\n                })\n                .bind(\"itemChange\", function(e) {\n                    var updateInfo = that.updatedValues,\n                        task = e.data,\n                        resourcesField = that.resources.field,\n                        previousTask = that.previousTask,\n                        current,\n                        isCurrentInHeader,\n                        currentIndex,\n                        rowIndex,\n                        navigatable = that.options.navigatable,\n                        key;\n\n                    if (that._preventItemChange) {\n                        that._preventItemChange = false;\n                        return;\n                    }\n\n                    for (key in previousTask) {\n                        if (previousTask.hasOwnProperty(key)) {\n                            task.set(key, previousTask[key]);\n                        }\n                    }\n\n                    that.previousTask = {};\n\n                    if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                        if (updateInfo) {\n                            that._preventRefresh = true;\n                            that.dataSource.update(task, updateInfo);\n\n                            if (updateInfo[resourcesField]) {\n                                that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                            }\n                        }\n\n                        if (navigatable) {\n                            current = $(that.list.current());\n                            isCurrentInHeader = current.is(\"th\");\n                            rowIndex = current.closest(\"tr\").index();\n                            currentIndex = isCurrentInHeader ? current.parent().children(\":not(.k-group-cell)\").index(current[0]) : Math.max(that.list.cellIndex(current), 0);\n                        }\n\n                        that._preventRefresh = false;\n                        that._requestStart();\n                        that.dataSource.sync().then(function() {\n                            if (that.options.navigatable && !that._tabPressed) {\n                                if (!isCurrentInHeader) {\n                                    var row = that.list.tbody.children().eq(rowIndex);\n\n                                    var td = row.find(\">td:visible\")\n                                        .eq(currentIndex);\n\n                                    that.list._setCurrent(td, false, true);\n                                }\n                            }\n                            that._tabPressed = false;\n                        });\n                    } else if (that.dataSource.hasChanges()) {\n                        that.dataSource.cancelChanges(task);\n                        that._preventRefresh = false;\n                        that.refresh();\n                    }\n\n                    that.updatedValues = null;\n                    that.updateDuration = null;\n                })\n                .bind(\"change\", function() {\n                    that.trigger(\"change\");\n\n                    that._selectionUpdate();\n\n                })\n                .bind(\"navigate\", function(e) {\n                    var treeList = e.sender;\n                    var current = treeList.current();\n                    var uid;\n\n                    that._scrollTo(current);\n                    that.timeline.element.find(\"div.k-task\").attr(\"tabindex\", \"-1\");\n                    uid = current.closest(\"tr\").attr(\"data-uid\");\n                    that.timeline.element.find(\"div.k-task[data-uid='\" + uid + \"']\").attr(\"tabindex\", \"0\");\n                })\n                .bind(\"expand\", function(e) {\n                    e.preventDefault();\n                    e.model.set(\"expanded\", true);\n                    // Update the pristine data as well. Otherwise, upon cancellation, the rows will collapse.\n                    that.dataSource._updatePristineForModel(e.model, { expanded: true });\n                })\n                .bind(\"collapse\", function(e) {\n                    e.preventDefault();\n                    e.model.set(\"expanded\", false);\n                    // Update the pristine data as well. Otherwise, upon cancellation, the rows will expand.\n                    that.dataSource._updatePristineForModel(e.model, { expanded: false });\n                })\n                .bind(\"dragend\", function(e) {\n                    var dataSource = that.dataSource,\n                        task, updateInfo;\n\n                    if (e.position === \"over\") {\n                        dataSource.cancelChanges();\n\n                        updateInfo = {\n                            parentId: e.source.parentId\n                        };\n\n                        task = dataSource.get(e.source.id);\n\n                        if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                            dataSource.update(task, updateInfo);\n                        }\n\n                        dataSource.sync();\n                    }\n                })\n                .bind(\"dataBound\", function() {\n                    if (that.dataSource.sort().length === 0) {\n                        that.dataSource.sort([{ field: \"orderId\", dir: \"asc\" }]);\n                    }\n                })\n                .bind(\"reorder\", function(e) {\n                    that._updateTask(e.task, e.updateInfo);\n                });\n        },\n\n        _selectionUpdate: function() {\n            var that = this,\n                selection = that.list.select();\n\n            if (selection.length) {\n                that.timeline.select(\"[data-uid='\" + selection.attr(\"data-uid\") + \"']\");\n            } else {\n                that.timeline.clearSelection();\n            }\n        },\n\n        _list: function() {\n            var ganttStyles = Gantt.styles,\n                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                listElement = listWrapper.find(\"> div\"),\n                listOptions = this._getListOptions();\n\n            this._attachResourceEditor(listOptions.columns);\n\n            this.list = new kendo.ui.GanttList(listElement, listOptions);\n\n            this._attachListEvents();\n        },\n\n        _timeline: function() {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var options = trimOptions(extend(true, { resourcesField: this.resources.field }, this.options));\n            var element = this.wrapper.find(DOT + ganttStyles.timeline + \" > div\");\n\n            this.timeline = new kendo.ui.GanttTimeline(element, options);\n\n            this.timeline\n                .bind(\"navigate\", function(e) {\n                    var viewName = e.view.replace(/\\./g, \"\\\\.\").toLowerCase();\n                    var viewsEl = that.toolbar.find(DOT + ganttStyles.toolbar.views);\n                    var viewsGroup = viewsEl.getKendoButtonGroup();\n\n                    if (viewsGroup) {\n                        viewsGroup.select(viewsEl.find(DOT + ganttStyles.toolbar.viewButton + \"-\" + viewName));\n                    }\n\n                    that.toolbar\n                        .find(DOT + ganttStyles.toolbar.viewsDropdown)\n                        .val(e.view);\n\n                    that.refresh();\n                })\n                .bind(\"moveStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (that.trigger(\"moveStart\", { task: e.task })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"move\", function(e) {\n                    var task = e.task;\n                    var start = e.start;\n                    var end = new Date(start.getTime() + task.duration());\n\n                    if (that.trigger(\"move\", { task: task, start: start, end: end })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"moveEnd\", function(e) {\n                    var task = e.task;\n                    var start = e.start;\n                    var end = new Date(start.getTime() + task.duration());\n\n                    if (!that.trigger(\"moveEnd\", { task: task, start: start, end: end })) {\n                        that._updateTask(that.dataSource.getByUid(task.uid), {\n                            start: start,\n                            end: end\n                        });\n                    }\n                })\n                .bind(\"resizeStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (that.trigger(\"resizeStart\", { task: e.task })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"resize\", function(e) {\n                    if (that.trigger(\"resize\", { task: e.task, start: e.start, end: e.end })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"resizeEnd\", function(e) {\n                    var task = e.task;\n                    var updateInfo = {};\n\n                    if (e.resizeStart) {\n                        updateInfo.start = e.start;\n                    } else {\n                        updateInfo.end = e.end;\n                    }\n\n                    if (!that.trigger(\"resizeEnd\", { task: task, start: e.start, end: e.end })) {\n                        that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n                    }\n                })\n                .bind(\"percentResizeStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"percentResizeEnd\", function(e) {\n                    that._updateTask(that.dataSource.getByUid(e.task.uid), { percentComplete: e.percentComplete });\n                })\n                .bind(\"dependencyDragStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"dependencyDragEnd\", function(e) {\n                    var dependency = that.dependencies._createNewModel({\n                        type: e.type,\n                        predecessorId: e.predecessor.id,\n                        successorId: e.successor.id\n                    });\n\n                    that._createDependency(dependency);\n                })\n                .bind(\"select\", function(e) {\n                    var editable = that.list.editor,\n                        current = that.select(),\n                        currentUid;\n\n                    if (editable) {\n                        editable.end();\n                    }\n\n                    if (current && current.length) {\n                        currentUid = current.data(\"uid\");\n                    }\n\n                    if (currentUid !== e.uid) {\n                        that.select(\"[data-uid='\" + e.uid + \"']\");\n                        that.trigger(\"change\");\n                    }\n                })\n                .bind(\"editTask\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        return;\n                    }\n\n                    that.editTask(e.uid);\n                })\n                .bind(\"clear\", function() {\n                    that.clearSelection();\n                    that.trigger(\"change\");\n                })\n                .bind(\"removeTask\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        return;\n                    }\n\n                    that.removeTask(that.dataSource.getByUid(e.uid));\n                })\n                .bind(\"expand\", function(e) {\n                    var model = that.dataSource.getByUid(e.uid);\n                    if (model.summary && !model.get(\"expanded\")) {\n                        model.set(\"expanded\", true);\n                    } else {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"collapse\", function(e) {\n                    var model = that.dataSource.getByUid(e.uid);\n\n                    if (model.summary && model.get(\"expanded\")) {\n                        model.set(\"expanded\", false);\n                    } else {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"removeDependency\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        return;\n                    }\n\n                    that.removeDependency(that.dependencies.getByUid(e.uid));\n                });\n        },\n\n        _dataSource: function() {\n            var options = this.options;\n            var dataSource = options.dataSource;\n\n            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n            if (this.dataSource && this._refreshHandler) {\n                this.dataSource\n                    .unbind(\"change\", this._refreshHandler)\n                    .unbind(\"progress\", this._progressHandler)\n                    .unbind(\"error\", this._errorHandler);\n            } else {\n                this._refreshHandler = this.refresh.bind(this);\n                this._progressHandler = this._requestStart.bind(this);\n                this._errorHandler = this._error.bind(this);\n            }\n\n            this.dataSource = kendo.data.GanttDataSource.create(dataSource)\n                .bind(\"change\", this._refreshHandler)\n                .bind(\"progress\", this._progressHandler)\n                .bind(\"error\", this._errorHandler);\n        },\n\n        _dependencies: function() {\n            var dependencies = this.options.dependencies || {};\n            var dataSource = isArray(dependencies) ? { data: dependencies } : dependencies;\n\n            if (this.dependencies && this._dependencyRefreshHandler) {\n                this.dependencies\n                    .unbind(\"change\", this._dependencyRefreshHandler)\n                    .unbind(\"error\", this._dependencyErrorHandler);\n            } else {\n                this._dependencyRefreshHandler = this.refreshDependencies.bind(this);\n                this._dependencyErrorHandler = this._error.bind(this);\n            }\n\n            this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource)\n                .bind(\"change\", this._dependencyRefreshHandler)\n                .bind(\"error\", this._dependencyErrorHandler);\n        },\n\n        _resources: function() {\n            var resources = this.options.resources;\n            var dataSource = resources.dataSource || {};\n\n            this.resources = {\n                field: \"resources\",\n                dataTextField: \"name\",\n                dataColorField: \"color\",\n                dataFormatField: \"format\"\n            };\n\n            extend(this.resources, resources);\n\n            this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n        },\n\n        _assignments: function() {\n            var assignments = this.options.assignments;\n            var dataSource = assignments.dataSource || { };\n\n            if (this.assignments) {\n                this.assignments.dataSource\n                    .unbind(\"change\", this._assignmentsRefreshHandler);\n            } else {\n                this._assignmentsRefreshHandler = this.refresh.bind(this);\n            }\n\n            this.assignments = {\n                dataTaskIdField: \"taskId\",\n                dataResourceIdField: \"resourceId\",\n                dataValueField: \"value\"\n            };\n\n            extend(this.assignments, assignments);\n\n            this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n\n            this.assignments.dataSource\n                .bind(\"change\", this._assignmentsRefreshHandler);\n        },\n\n        _createEditor: function() {\n            var that = this;\n\n            var editor = this._editor = new kendo.gantt.PopupEditor(this.wrapper, extend({}, this.options, {\n                target: this,\n                resources: {\n                    field: this.resources.field,\n                    editor: this._createResourceEditor.bind(this)\n                }\n            }));\n\n            editor\n                .bind(\"cancel\", function(e) {\n                    var task = that.dataSource.getByUid(e.model.uid);\n\n                    if (that.trigger(\"cancel\", { container: e.container, task: task })) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (that.dependencies) {\n                        that.dependencies.filter({});\n                    }\n\n                    that.cancelTask();\n                    if (that.options.navigatable) {\n                        that.timeline.element.find('div[data-uid=\"' + e.model.uid + '\"]').trigger(\"focus\");\n                    }\n                })\n                .bind(\"edit\", function(e) {\n                    var task = that.dataSource.getByUid(e.model.uid);\n\n                    if (that.trigger(\"edit\", { container: e.container, task: task })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"save\", function(e) {\n                    var task = that.dataSource.getByUid(e.model.uid);\n\n                    that.saveTask(task, e.updateInfo, e.updateDependencies);\n                })\n                .bind(\"remove\", function(e) {\n                    that.removeTask(e.model.uid);\n                })\n                .bind(\"close\", function(options) {\n                    if (that.options.navigatable) {\n                        that.element.find('div[data-uid=\"' + options.window.attr(\"data-uid\") + '\"]').trigger(\"focus\");\n                    }\n                });\n        },\n\n        _resourcePopupEditor: function(container, options) {\n            var that = this,\n                editor = that._createResourceEditor($(\"<div>\"), options),\n                popupStyles = ganttStyles.popup,\n                wrapper = that.element,\n                dialogEl = $(kendo.format('<div class=\"' + popupStyles.formContainer + '\">')).appendTo(wrapper),\n                messages = that.options.messages,\n                buttonsEl, dialog;\n\n            dialogEl.append(editor.wrapper);\n            buttonsEl = $('<div class=\"' + popupStyles.buttonsContainer + '\">');\n            dialogEl.append(buttonsEl);\n\n            buttonsEl.append($(\"<button class='\" + ganttStyles.buttonSave + \"'>\" + encode(messages.save) + \"</button>\").kendoButton({\n                name: \"save\",\n                themeColor: \"primary\",\n                icon: \"save\",\n                click: () => {\n                    if (!editor.updateModel()) {\n                        return;\n                    }\n                    editor.trigger(\"save\", { model: editor.model });\n                    that._updateAssignments(editor.model.get(\"id\"), editor.model.get(that.resources.field));\n\n                    dialog.trigger(\"close\");\n                    dialog.close();\n                }\n            }));\n\n            buttonsEl.append($(\"<button class='\" + ganttStyles.buttonCancel + \"'>\" + encode(messages.cancel) + \"</button>\").kendoButton({\n                name: \"cancel\",\n                icon: \"cancel\",\n                click: () => {\n                    dialog.trigger(\"close\");\n                    dialog.close();\n                }\n            }));\n\n            this._resourceEditorWindow = dialog = dialogEl.kendoWindow({\n                modal: true,\n                resizable: false,\n                draggable: true,\n                visible: false,\n                title: messages.editor.resourcesEditorTitle,\n                deactivate: () => {\n                    editor.destroy();\n                    dialog.destroy();\n                    dialog.element.closest(\".k-window\").remove();\n                }\n            }).data(\"kendoWindow\");\n\n            dialog.center().open();\n\n            return editor;\n        },\n\n        _createResourceEditor: function(container, options) {\n            var that = this;\n            var model = options instanceof ObservableObject ? options : options.model;\n            var messages = this.options.messages;\n            var resourcesField = this.resources.field;\n            var unitsValidation = { step: 0.01, min: 0.01, max: 1 };\n            var assignmentsModel = this.assignments.dataSource.options.schema.model;\n            var resourceTextField = that.resources.dataTextField;\n            var resources = this.resources.dataSource.view();\n\n\n            if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n                extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n            }\n\n            var editor = this._resourceEditor = new kendo.gantt.ResourceEditor(container, {\n                resourcesField: resourcesField,\n                unitsValidation: unitsValidation,\n                resources: resources.map(r => ({ value: r.id, text: r[resourceTextField] })),\n                model: model,\n                messages: extend({}, messages.editor)\n            });\n\n            return editor;\n        },\n\n        view: function(type) {\n            return this.timeline.view(type);\n        },\n\n        range: function(range) {\n            var dataSource = this.dataSource;\n            var view = this.view();\n            var timeline = this.timeline;\n\n            if (range) {\n                view.options.range = {\n                    start: range.start,\n                    end: range.end\n                };\n\n                timeline._render(dataSource.taskTree());\n                timeline._renderDependencies(this.dependencies.view());\n            }\n\n            return {\n                start: view.start,\n                end: view.end\n            };\n        },\n\n        date: function(date) {\n            var view = this.view();\n\n            if (date) {\n                view.options.date = date;\n                view._scrollToDate(date);\n            }\n\n            return view.options.date;\n        },\n\n        dataItem: function(value) {\n            if (!value) {\n                return null;\n            }\n\n            var list = this.list;\n            var element = list.element.find(value);\n\n            return list._modelFromElement(element);\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            this.list.setDataSource(this.dataSource);\n\n            if (this.options.autoBind) {\n                dataSource.fetch();\n            }\n        },\n\n        setDependenciesDataSource: function(dependencies) {\n            this.options.dependencies = dependencies;\n\n            this._dependencies();\n\n            if (this.options.autoBind) {\n                dependencies.fetch();\n            }\n        },\n\n        items: function() {\n            return this.wrapper.children(\".k-task\");\n        },\n\n        _updateAssignments: function(id, resources) {\n            var dataSource = this.assignments.dataSource;\n            var taskId = this.assignments.dataTaskIdField;\n            var resourceId = this.assignments.dataResourceIdField;\n            var hasMatch = false;\n            var assignments = new Query(dataSource.view())\n                .filter({\n                    field: taskId,\n                    operator: \"eq\",\n                    value: id\n                }).toArray();\n            var assignment;\n            var resource;\n            var value;\n\n            while (assignments.length) {\n                assignment = assignments[0];\n\n                for (var i = 0, length = resources.length; i < length; i++) {\n                    resource = resources[i];\n\n                    if (assignment.get(resourceId) === resource.get(\"id\")) {\n                        value = resources[i].get(\"value\");\n                        this._updateAssignment(assignment, value);\n                        resources.splice(i, 1);\n                        hasMatch = true;\n                        break;\n                    }\n                }\n\n                if (!hasMatch) {\n                    this._removeAssignment(assignment);\n                }\n\n                hasMatch = false;\n\n                assignments.shift();\n            }\n\n            for (var j = 0, newLength = resources.length; j < newLength; j++) {\n                resource = resources[j];\n\n                if (resource.id !== undefined$1 && resource.value) {\n                    this._createAssignment(resource, id);\n                }\n            }\n\n            dataSource.sync();\n        },\n\n        cancelTask: function() {\n            var editor = this._editor;\n            var container = editor.container;\n\n            if (container) {\n                editor.close();\n            }\n\n            if (this.dependencies) {\n                this.dependencies.cancelChanges();\n            }\n        },\n\n        editTask: function(uid) {\n            var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n            if (!task) {\n                return;\n            }\n\n            var taskCopy = this.dataSource._createNewModel(task.toJSON());\n            taskCopy.uid = task.uid;\n\n            this.cancelTask();\n\n            this._editTask(taskCopy);\n        },\n\n        _editTask: function(task) {\n            this._editor.editTask(task, this.options.editable.plannedTasks);\n        },\n\n        saveTask: function(task, updateInfo, updateDependencies) {\n            var that = this,\n                editor = this._editor,\n                container = editor.container,\n                editable = editor.editable,\n                hasChanges = false,\n                hasResourceChanges = false,\n                updateInfo = updateInfo || {},\n                resourcesField = that.options.resources.field,\n                difference;\n\n            Object.keys(updateInfo).map(k => {\n                var updated = updateInfo[k],\n                    current = task.get(k);\n\n                if (updated instanceof Date) {\n                    updated = updated.getTime();\n                    current = current ? current.getTime() : undefined$1;\n                }\n\n                if (updated !== current) {\n                    if (k === resourcesField) {\n                        difference = getDifference(updated, current);\n\n                        if (difference && difference.length > 0) {\n                            hasResourceChanges = true;\n                        }\n                    } else {\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            if (container &&\n                editable &&\n                editable.end() &&\n                (hasChanges || hasResourceChanges || updateDependencies)) {\n                    if (!that.trigger(\"save\", { task: task, values: updateInfo, updateDependencies: updateDependencies })) {\n                        if (hasChanges) {\n                            that._preventRefresh = true;\n\n                            that.dataSource.update(task, updateInfo);\n                        }\n\n                        if (hasResourceChanges) {\n                            this._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                        }\n\n                        that._syncDataSource();\n\n                        if (this.dependencies) {\n                            this._updateDependency(updateDependencies);\n                        }\n\n                        this._editor.close();\n                    } else {\n                        if (task && task.dirty) {\n                            that.dataSource.cancelChanges(task);\n                            that._preventRefresh = false;\n                            that.refresh();\n                        }\n\n                        if (that.dependencies) {\n                            that.dependencies.cancelChanges();\n                        }\n                    }\n            } else if (editable && editable.end()) {\n                this._editor.close();\n            }\n        },\n\n        _updateDependency: function(updateDependencies) {\n            this.dependencies.filter({});\n\n            if (updateDependencies) {\n                updateDependencies.created.map(d => {\n                    this._preventDependencyRefresh = true;\n                    this.dependencies.add(d);\n                    this._preventDependencyRefresh = false;\n                });\n\n                updateDependencies.destroyed.map(d => {\n                    this.dependencies.remove(d);\n                });\n            }\n\n            this.dependencies.sync();\n        },\n\n        _updateTask: function(task, updateInfo) {\n            var that = this;\n            var resourcesField = that.resources.field;\n\n            if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                if (updateInfo) {\n                    that._preventRefresh = true;\n\n                    that.dataSource.update(task, updateInfo);\n\n                    if (updateInfo[resourcesField]) {\n                        that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                    }\n                }\n\n                that._syncDataSource();\n            } else {\n                if (task && task.dirty) {\n                    that.dataSource.cancelChanges(task);\n                    that._preventRefresh = false;\n                    that.refresh();\n                }\n\n                if (that.dependencies) {\n                    that.dependencies.cancelChanges();\n                }\n            }\n        },\n\n        _updateAssignment: function(assignment, value) {\n            var resourceValueField = this.assignments.dataValueField;\n\n            assignment.set(resourceValueField, value);\n        },\n\n        removeTask: function(uid) {\n            var that = this;\n            var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n            if (!task) {\n                return;\n            }\n\n            this._taskConfirm(function(cancel) {\n                if (!cancel) {\n                    that._removeTask(task);\n                }\n            }, task);\n        },\n\n        _createTask: function(task, index) {\n            if (!this.trigger(\"add\", {\n                task: task,\n                dependency: null\n            })) {\n                var dataSource = this.dataSource;\n\n                this._preventRefresh = true;\n\n                if (index === undefined$1) {\n                    dataSource.add(task);\n                } else {\n                    dataSource.insert(index, task);\n                }\n\n                this._scrollToUid = task.uid;\n                this._syncDataSource();\n            }\n        },\n\n        _createDependency: function(dependency) {\n            if (!this.trigger(\"add\", {\n                task: null,\n                dependency: dependency\n            })) {\n                this._preventDependencyRefresh = true;\n\n                this.dependencies.add(dependency);\n\n                this._preventDependencyRefresh = false;\n\n                this.dependencies.sync();\n            }\n        },\n\n        _createAssignment: function(resource, id) {\n            var assignments = this.assignments;\n            var dataSource = assignments.dataSource;\n            var taskId = assignments.dataTaskIdField;\n            var resourceId = assignments.dataResourceIdField;\n            var resourceValue = assignments.dataValueField;\n            var assignment = dataSource._createNewModel();\n\n            assignment[taskId] = id;\n            assignment[resourceId] = resource.get(\"id\");\n            assignment[resourceValue] = resource.get(\"value\");\n\n            dataSource.add(assignment);\n        },\n\n        removeDependency: function(uid) {\n            var that = this;\n            var dependency = typeof uid === \"string\" ? this.dependencies.getByUid(uid) : uid;\n\n            if (!dependency) {\n                return;\n            }\n\n            this._dependencyConfirm(function(cancel) {\n                if (!cancel) {\n                    that._removeDependency(dependency);\n                }\n            }, dependency);\n        },\n\n        _removeTaskDependencies: function(task, dependencies) {\n            this._preventDependencyRefresh = true;\n\n            for (var i = 0, length = dependencies.length; i < length; i++) {\n                this.dependencies.remove(dependencies[i]);\n            }\n\n            this._preventDependencyRefresh = false;\n\n            this.dependencies.sync();\n        },\n\n        _removeTaskAssignments: function(task) {\n            var dataSource = this.assignments.dataSource;\n            var assignments = dataSource.view();\n            var filter = {\n                field: this.assignments.dataTaskIdField,\n                operator: \"eq\",\n                value: task.get(\"id\")\n            };\n\n            assignments = new Query(assignments).filter(filter).toArray();\n\n            this._preventRefresh = true;\n\n            for (var i = 0, length = assignments.length; i < length; i++) {\n                dataSource.remove(assignments[i]);\n            }\n\n            this._preventRefresh = false;\n\n            dataSource.sync();\n        },\n\n        _removeTask: function(task) {\n            var dependencies = this.dependencies.dependencies(task.id);\n\n            if (!this.trigger(\"remove\", {\n                task: task,\n                dependencies: dependencies\n            })) {\n                this._removeTaskDependencies(task, dependencies);\n                this._removeTaskAssignments(task);\n\n                this._preventRefresh = true;\n\n                if (this.dataSource.remove(task)) {\n                    this._syncDataSource();\n                }\n\n                if (this.dependencies) {\n                    this.dependencies.filter({});\n                }\n\n                this._preventRefresh = false;\n            }\n        },\n\n        _removeDependency: function(dependency) {\n            if (!this.trigger(\"remove\", {\n                task: null,\n                dependencies: [dependency]\n            })) {\n                if (this.dependencies.remove(dependency)) {\n                    this.dependencies.sync();\n                }\n            }\n        },\n\n        _removeAssignment: function(assignment) {\n            this.assignments.dataSource.remove(assignment);\n        },\n\n        _taskConfirm: function(callback, task) {\n            let messages = this.options.messages;\n\n            this._confirm(callback, {\n                model: task,\n                text: encode(messages.deleteTaskConfirmation),\n                title: encode(messages.deleteTaskWindowTitle)\n            });\n        },\n\n        _dependencyConfirm: function(callback, dependency) {\n            let messages = this.options.messages;\n\n            this._confirm(callback, {\n                model: dependency,\n                text: encode(messages.deleteDependencyConfirmation),\n                title: encode(messages.deleteDependencyWindowTitle)\n            });\n        },\n\n        _confirm: function(callback, options) {\n            var editable = this.options.editable;\n\n            if (editable === true || editable.confirmation !== false) {\n                this.showDialog(extend(true, {}, options, { callback: callback }));\n            } else {\n                callback();\n            }\n        },\n\n        showDialog: function(options) {\n            this._editor.showDialog(options);\n        },\n\n        refresh: function() {\n            if (this._preventRefresh || !this.list || this.list.editor) {\n                return;\n            }\n\n            this._progress(false);\n\n            var dataSource = this.dataSource;\n            var taskTree = dataSource.taskTree();\n            var scrollToUid = this._scrollToUid;\n            var current;\n            var cachedUid;\n            var cachedIndex = -1;\n            var selected = this.select()[0] ? this.select().data(\"uid\") : this._selected;\n\n            if (this.current) {\n                cachedUid = this.current.closest(\"tr\").attr(kendo.attr(\"uid\"));\n                cachedIndex = this.current.index();\n            }\n\n            if (this.trigger(\"dataBinding\")) {\n                return;\n            }\n\n            if (this.resources.dataSource.data().length !== 0) {\n                this._assignResources(taskTree);\n            }\n\n            if (this._editor) {\n                this._editor.close();\n            }\n\n            this.clearSelection();\n            this.list._renderTree(taskTree);\n            this.timeline._render(taskTree);\n            this.timeline._renderDependencies(this.dependencies.view());\n\n            if (scrollToUid) {\n                this._scrollTo(scrollToUid);\n                this.select(selector(scrollToUid));\n            }\n\n            if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n                current = this.list.element\n                    .find(\"tr\" + selector((scrollToUid || cachedUid)) + \" > td\").eq(cachedIndex);\n\n                this._current(current);\n            }\n\n            this._scrollToUid = null;\n\n            if (selected) {\n                this._selected = selected;\n                this.select(\"[data-uid=\" + selected + \"]\");\n            }\n\n            this.trigger(\"dataBound\");\n        },\n\n        refreshDependencies: function() {\n            if (this._preventDependencyRefresh) {\n                return;\n            }\n\n            if (this.trigger(\"dataBinding\")) {\n                return;\n            }\n\n            this.timeline._renderDependencies(this.dependencies.view());\n\n            this.trigger(\"dataBound\");\n        },\n\n        _assignResources: function(taskTree) {\n            var resources = this.resources;\n            var assignments = this.assignments;\n            var groupAssigments = function() {\n                var data = assignments.dataSource.view();\n                var group = {\n                    field: assignments.dataTaskIdField\n                };\n\n                data = new Query(data).group(group).toArray();\n\n                return data;\n            };\n            var assigments = groupAssigments();\n            var applyTaskResource = function(task, action) {\n                var taskId = task.get(\"id\");\n\n                kendo.setter(resources.field)(task, new ObservableArray([]));\n\n                for (var i = 0, length = assigments.length; i < length; i++) {\n                    if (assigments[i].value === taskId) {\n                        action(task, assigments[i].items);\n                    }\n                }\n            };\n            var wrapTask = function(task, items) {\n                for (var j = 0, length = items.length; j < length; j++) {\n                    var item = items[j];\n                    var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n                    var resourceValue = item.get(assignments.dataValueField);\n                    var resourcedId = item.get(assignments.dataResourceIdField);\n                    var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n                    var formatedValue = kendo.toString(resourceValue, valueFormat);\n\n                    task[resources.field].push(new ObservableObject({\n                        id: resourcedId,\n                        name: resource.get(resources.dataTextField),\n                        color: resource.get(resources.dataColorField),\n                        value: resourceValue,\n                        formatedValue: formatedValue,\n                        format: valueFormat\n                    }));\n                }\n            };\n\n            for (var i = 0, length = taskTree.length; i < length; i++) {\n                applyTaskResource(taskTree[i], wrapTask);\n            }\n        },\n\n        _wrapResourceData: function(id) {\n            var that = this;\n            var result = [];\n            var resource;\n            var resources = this.resources.dataSource.view();\n            var assignments = this.assignments.dataSource.view();\n            var taskAssignments = new Query(assignments).filter({\n                field: that.assignments.dataTaskIdField,\n                operator: \"eq\",\n                value: id\n            }).toArray();\n            var valuePerResource = function(id) {\n                var resourceValue = null;\n\n                new Query(taskAssignments).filter({\n                    field: that.assignments.dataResourceIdField,\n                    operator: \"eq\",\n                    value: id\n                }).select(function(assignment) {\n                    resourceValue += assignment.get(that.assignments.dataValueField);\n                });\n\n                return resourceValue;\n            };\n\n            for (var i = 0, length = resources.length; i < length; i++) {\n                resource = resources[i];\n                result.push({\n                    id: resource.get(\"id\"),\n                    name: resource.get(that.resources.dataTextField),\n                    format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n                    value: valuePerResource(resource.id)\n                });\n            }\n\n            return result;\n        },\n\n        _syncDataSource: function() {\n            this._preventRefresh = false;\n            this._requestStart();\n            this.dataSource.sync();\n        },\n\n        _requestStart: function() {\n            this._progress(true);\n        },\n\n        _error: function() {\n            this._progress(false);\n        },\n\n        _progress: function(toggle) {\n            kendo.ui.progress(this.element, toggle);\n        },\n\n        _scrollable: function() {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n            var timelineHeader = this.timeline.element.find(headerSelector);\n            var timelineContent = this.timeline.element.find(contentSelector);\n            var treeListHeader = this.list.element.find(headerSelector);\n            var treeListContent = this.list.element.find(contentSelector);\n\n            if (mobileOS) {\n                treeListContent.css(\"overflow-y\", \"auto\");\n            }\n\n            timelineContent.on(\"scroll\", function() {\n                that.scrollTop = this.scrollTop;\n                kendo.scrollLeft(timelineHeader, this.scrollLeft);\n                treeListContent.scrollTop(this.scrollTop);\n            });\n\n            treeListContent\n                .on(\"scroll\", function() {\n                    kendo.scrollLeft(treeListHeader, this.scrollLeft);\n                })\n                .on(\"DOMMouseScroll\" + NS + \" mousewheel\" + NS, function(e) {\n                    var scrollTop = timelineContent.scrollTop();\n                    var delta = kendo.wheelDeltaY(e);\n\n                    if (delta) {\n                        e.preventDefault();\n                        //In Firefox DOMMouseScroll event cannot be canceled\n                        $(e.currentTarget).one(\"wheel\" + NS, false);\n\n                        timelineContent.scrollTop(scrollTop + (-delta));\n                    }\n                });\n        },\n\n        _navigatable: function() {\n            var that = this;\n            var navigatable = this.options.navigatable;\n            var editable = this.options.editable;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var listWrapper = DOT + ganttStyles.listWrapper;\n            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n            var headerTable = this.list.element.find(headerSelector).find(\"table\");\n            var contentTable = this.list.element.find(contentSelector).find(\"table\");\n            var tables = headerTable.add(contentTable);\n            var attr = selector();\n            var deleteAction = function() {\n                var editable = that.options.editable;\n\n                if (!editable || editable.destroy === false || that.list.editor) {\n                    return;\n                }\n\n                var selectedTask = that.select();\n                var uid = kendo.attr(\"uid\");\n\n                if (selectedTask.length) {\n                    that.removeTask(selectedTask.attr(uid));\n                }\n            };\n\n            $(this.wrapper)\n                .on(\"mousedown\" + NS, listWrapper + \" tr\" + attr, function(e) {\n                    var isInput = $(e.target).is(\":button,a,:input,a>.k-icon,.k-svg-icon,k-svg-icon,svg,path,textarea,span.k-icon:not(.k-i-none),span.k-svg-icon:not(.k-svg-i-none),span.k-link,.k-input,.k-multiselect-wrap,.k-input-value-text,.k-input-inner\");\n\n                    if (e.ctrlKey) {\n                        return;\n                    }\n\n\n                    if ((navigatable || editable) && !isInput) {\n                        that._focusTimeout = setTimeout(function() {\n                            focusTable(that.list.content.find(\"table\"), true);\n                        }, 2);\n                    }\n                })\n                .on(\"keydown\" + NS, function(e) {\n                    var key = e.keyCode;\n                    var that = this;\n                    var uid;\n                    var cell;\n                    var target = $(e.target);\n                    var focusedIndex;\n                    var focusSequence = [\n                        that.toolbar,\n                        that.layout.find(\".k-splitbar\"),\n                        that.layout.find(\".k-gantt-treelist\"),\n                        that.layout.find(\".k-gantt-timeline-pane\")\n                    ];\n\n                    that._tabPressed = false;\n\n                    if (that.footer) {\n                        focusSequence.push(that.footer);\n                    }\n\n                    for (var i = 0; i < focusSequence.length; i++) {\n                        if ($.contains(focusSequence[i][0], e.target) || focusSequence[i][0] === e.target) {\n                            focusedIndex = i;\n                            break;\n                        }\n                    }\n\n                    if (key === keys.F10) {\n                        that.toolbar.find(\"[tabindex=0]:visible\").first().addClass(ganttStyles.focused).trigger(\"focus\");\n                        e.preventDefault();\n                    } else if (key == keys.TAB) {\n                        if (focusedIndex == 2) {\n                            that._tabPressed = true;\n                        }\n                        if (e.shiftKey) {\n                            for (i = focusedIndex - 1; i >= 0; i--) {\n                                if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                    uid = target.attr(\"data-uid\");\n                                    if (i === 2 && uid) {\n                                        cell = that.list.content.find(\"tr[data-uid='\" + uid + \"']\").find(\"td\").last();\n                                        that.list.current(cell);\n                                        focusTable(that.list.content.find(\"table\"), true);\n                                    } else {\n                                        if (focusSequence[i].is(\":kendoFocusable\")) {\n                                            focusSequence[i].trigger(\"focus\");\n                                        } else {\n                                            focusSequence[i].find(\"[tabindex=0]:visible\").trigger(\"focus\");\n                                        }\n                                    }\n                                    e.preventDefault();\n                                    break;\n                                }\n                            }\n                        } else {\n                            for (i = focusedIndex + 1; i < focusSequence.length; i++) {\n                                if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                    if (focusSequence[i].is(\":kendoFocusable\")) {\n                                        focusSequence[i].trigger(\"focus\");\n                                    } else {\n                                        focusSequence[i].find(\"[tabindex=0]:visible\").trigger(\"focus\");\n                                    }\n                                    e.preventDefault();\n                                  break;\n                                }\n                            }\n                        }\n                    }\n\n                }.bind(this));\n\n            if (navigatable) {\n                contentTable\n                    .on(\"keydown\" + NS, function(e) {\n                        var key = e.keyCode;\n                        if (e.keyCode == keys.DELETE) {\n                            deleteAction();\n                        } else if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== \"input\") {\n                           that.view(that.timeline._viewByIndex(key - 49));\n                        }\n                    });\n\n                return;\n            }\n\n            tables\n                .on(\"focus\" + NS, function() {\n                    $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n                })\n                .on(\"blur\" + NS, function() {\n\n                    if (this == headerTable) {\n                        $(this).attr(TABINDEX, -1);\n                    }\n                });\n        },\n\n\n        _dataBind: function() {\n            var that = this;\n\n            if (that.options.autoBind) {\n                this._preventRefresh = true;\n                this._preventDependencyRefresh = true;\n\n                var promises = $.map([\n                    this.dataSource,\n                    this.dependencies,\n                    this.resources.dataSource,\n                    this.assignments.dataSource\n                ],\n                function(dataSource) {\n                    return dataSource.fetch();\n                });\n\n                $.when.apply(null, promises)\n                    .done(function() {\n                        that._preventRefresh = false;\n                        that._preventDependencyRefresh = false;\n                        that.refresh();\n                    });\n            }\n        },\n\n        _resize: function() {\n            this._adjustDimensions();\n            this.timeline.view()._adjustHeight();\n            this.timeline.view()._renderCurrentTime();\n            this.list._adjustHeight();\n        },\n\n        _togglePlannedTasks: function(e) {\n            var timeline = this.timeline;\n\n            if (!this.trigger(\"togglePlannedTasks\", { showPlannedTasks: !timeline.options.showPlannedTasks })) {\n                this.wrapper.toggleClass(ganttStyles.plannedTasks);\n                timeline._setPlanned(!timeline.options.showPlannedTasks);\n                timeline._render(this.dataSource.taskTree());\n                timeline._renderDependencies(this.dependencies.view());\n            } else {\n                e.preventDefault();\n            }\n        }\n    });\n\n    if (kendo.PDFMixin) {\n        kendo.PDFMixin.extend(Gantt.fn);\n\n        Gantt.fn._drawPDF = function() {\n            var ganttStyles = Gantt.styles;\n            // Get the width of the treelist portion.\n            var listTableWidth = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").width();\n            // Get the height of the treelist portion.\n            var listTableHeight = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").height();\n            // Get the combined height of all toolbars.\n            var toolbarsHeight = this.wrapper.find(DOT + ganttStyles.toolbar.toolbar).outerHeight() * this.wrapper.find(DOT + ganttStyles.toolbar.toolbar).length;\n            // Get the width of the timeline portion.\n            var timelineTableWidth = this.wrapper.find(DOT + ganttStyles.timeline + \" \" + DOT + ganttStyles.gridContent + \" table\").width();\n            var content = this.wrapper.clone();\n\n            content.find(DOT + ganttStyles.list).css(\"height\", listTableHeight + toolbarsHeight);\n            content.find(DOT + ganttStyles.splitter).css(\"width\", timelineTableWidth + listTableWidth);\n            content.find(DOT + ganttStyles.splitter).css(\"height\", listTableHeight + toolbarsHeight);\n\n            return this._drawPDFShadow({\n                content: content\n            }, {\n                avoidLinks: this.options.pdf.avoidLinks\n            });\n        };\n    }\n\n    kendo.ui.plugin(Gantt);\n\n    extend(true, Gantt, { styles: ganttStyles });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}