{"version":3,"sources":["raw-mjs/kendo.pivotgrid-common.cmn.chunk.js"],"names":["compileFilter","__meta__","id","name","category","description","depends","hidden","chunk","filterFunctionFormats","contains","doesnotcontain","endswith","eq","neq","startswith","operators","in","serializeFilters","filters","cube","command","current","idx","length","serializeExpression","expression","value","String","field","operator","formatString","str","values","_i","arguments","forEach","index","replace","RegExp","serializeMembers","members","measures","sort","memberName","parsed","parseDescriptors","expanded","rootNames","getRootNames","root","crossJoinCommands","names","push","crossJoinCommand","mapNames","expandMemberDescriptor","join","concat","measureNames","measure","result","undefined","member","hierarchyName","baseHierarchyPath","some","n","indexOf","found","child","name_1","j","l","expand","rootLength","slice","name_2","rootName","tmp","crossJoin","sortDescriptor","sortDescriptorForMember","dir","length_1","parts","split","pop","shift","createRequestBody","options","_a","columnAxes","_b","rowAxes","_c","measureAxes","_d","_e","filter","measuresRowAxis","measuresAxis","connection","catalog","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","call","apply","__rest","e","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","__createBinding","o","m","k","k2","__exportStar","exports","__values","__read","ar","error","__spread","__spreadArrays","il","a","jl","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","default","__importDefault","__classPrivateFieldGet","receiver","privateMap","has","get","__classPrivateFieldSet","set","parseResponse","response","xmlDoc","DOMParser","parseFromString","axes","from","querySelectorAll","cells","map","cell","fmtValue","getPropertyValue","ordinal","parseInt","getAttribute","columns","tuples","rows","data","axis","translateAxis","indexedData","fill","counter","rowTuple","colTuple","columnTuple","node","querySelector","textContent","tuple","lNum","hasChildren","caption","children","hierarchy","levelName","levelNum","parentName","discoverCommands","schemaCatalogs","schemaCubes","schemaDimensions","schemaHierarchies","schemaKPIs","schemaLevels","schemaMeasures","schemaMembers","createDiscoverBody","properties","serializeOptions","restrictions","Catalog","parentTagName","capitalize","toUpperCase","parseCubes","row","type","parseCatalogs","parseMeasures","uniqueName","aggregator","groupName","displayFolder","defaultFormat","parseKPIs","goal","status","trend","statusGraphic","trendGraphic","parseDimensions","defaultHierarchy","parseHierarchies","dimensionUniqueName","origin","defaultMember","parseLevels","orderingProperty","hierarchyUniqueName","parseMembers","levelUniqueName","childrenCardinality","_this","discoverParser","fetchData","fetchOptions","init","headers","method","fetch","url","text","fetchDiscover","stringResponse","isMeasure","getMaxNesting","Set","add","size","getMaxExpansion","generateNormalizedPath","parent","normalizedPath","Boolean","generatePath","path","toMatrix","rowIndex","colIndex","maxDepth","maxBreadth","matrix","leafs","branchDepth","branchBreadth","depth","breadth","matrixResult","leafsResult","findIndex","level","inject","total","splice","collOffset","newMatrix","newLeafs","childBreadth","withTotal","alt","childIndex","childHierarchy","toTree","every","tupleIndex","copy","_loop_1","memberIndex","parent_1","parentKey","keys","find","intruderIndex","toData","hash","membersNames","columnsIndexes","Map","rowsIndexes","colMembers","rowMembers","item","rotateMatrix","rowSpan","colSpan","toColumns","toRows","cloneDate","date","Date","getTime","clone","obj","cloneObject","cloneValue","nextValue","isArray","cloneArray","newNextValue","JSON","parse","stringify","array","kpiMeasure","kpi","buildKPIMeasures","addKPI","compareAxisWithField","compareAxes","filterField","out","_loop_2","startsWith","duplicatedAxisIndex","ax","insertAxis","toInsert","state","dropTarget","dropDirection","offset","reverseColumnsByMeasures","firstColumn","lastMember","columnsArr","measuresCount","col","result_1","arr","reverse","createDataState","createAxisDescriptors","expandTree","descriptors","HEADERS_ACTION","setSort","setFilter","PIVOT_CONFIGURATOR_ACTION","findPath","matchFn","matched","match","h","headersReducer","action","toggle","existing","payload","collapse","existing_1","nextState","filtered_1","tree","configuratorReducer","newRows","newColumns","newMeasures","newSort","newFilter","newDragitem","newDropZone","newDropDirection","newDropTarget","toggleSelection","payload_1","removeMeasureAxis","addMeasureAxis","removeMeasureAxes","addMeasureAxes","removeColumnAxis","removeRowAxis","addColumnAxis","addRowAxis","addColumnAxes","removeColumnAxes","addRowAxes","removeRowAxes","remove","setDragItem","setDropZone","setDropTarget","setDropDirection","drop","dragItem","dropZone","currentColumn","currentRow","currentMeasure","addFilter","changeFilter","removeFilter","sumAggregate","sum","merge","src","dest","accumulate","acc","format","toFixed","countAggregate","countA","_value","minAggregate","min","Number","POSITIVE_INFINITY","Math","isFinite","NaN","maxAggregate","max","NEGATIVE_INFINITY","averageAggregate","sumA","count","forEachDesc","callbackfn","filterFields","callback","initializeFiltering","compositeFilter","logic","predicate","fieldValues","hasFilter","filteringAxes","filteringFields_1","subNode","initialNode","childNode","separator","createKey","splitKeyValue","keyValue","separatorIndex","substring","calculateColumnData","dataField","childData_1","parentData_1","aggregate","mergeTrees","srcChild","destChild","calculateColumns","columnsData","srcColumns","destColumns","createDataTree","fields","cache","leafNodes","dataItem","filteringDataItem_1","displayValue","dataKey","nodeData","node_1","eachAxis","leaf","cloneDataTree","dataTree","createPath","caption_1","membersNode","axisSettings","cacheData","currentLevel","currentLevelNode","levelField_1","newDest","currentPath","readData","rowTuples","columnTuples","columnSettings","rowSettings","rowsCache","rowNode","rowColumnsNode","measuresMember_1","colNode","getTopMembersTuple","parentFields","axesSettings","allTuple","topField","sortFunc","descriptor","axe","order","sortableA","sortValue","sortableB","mergeData","exclude","childrenByKeys","element","curLevel_1","rootFields","definitions","createTuples","sortDescriptors","excludeFields","flatMembers","topTuple","currDef","keysToAdd","currDefMembers","delete","leafValue","leafTuple","axisCaption","curCaption","measureToMember","addMeasure","measureMember","tupleCopy","addMultipleMeasures","tupleWithMeasure","createLocalDataState","args","colTuples","createFlatSchemaDimensions","dimensions","dim","Navigation","tabIndex","eventHandlers","update","selectors","enumerable","configurable","all","elements","el","matches","start","eventType","this_1","mouseEvents","ev","Element","closest","addEventListener","this_2","keyboardEvents","stop","removeEventListener","focusElement","previous","removeAttribute","classList","setAttribute","focus","preventScroll","scrollableValuesSel","scrollableColumnHeaderSel","scrollableRowHeaderSel","emptyCellSel","tableSel","cellSel","scrollables","selectors$1","onEnter","nav","icon","index_1","click","preventDefault","tryScrollLeft","scrollable","elToScroll","offsetLeft","scrollLeft","tryScrollRight","offsetWidth","tryScrollUp","scrollTop","offsetTop","tryScrollDown","offsetHeight","scrollTo","scrollFunc","scroll","tableMap","table","colsCount","reduce","prev","cur","curColSpan","colSp","rowSp","ind","val","curInd","navigationMap","columnHeader","rowHeader","emptyCell","emptyCellRow","getTargetPos","ctrlKey","metaKey","cellAt","pos","targetPos","nextPos","keyboardEvents$1","keydown","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","_target","_ev","nextElementSibling","HTMLElement","setTimeout","parentNode","confHeader","Enter","Space","Home","ro","x","End","mouseEvents$1","hasAttribute","PivotGridNavigation","_super","onEscape","pivot","previousElementSibling","confButton","pivotCell","navigate","onDelete","Tab","shiftKey","Escape","Delete","Backspace","ConfiguratorNavigation"],"mappings":"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","file":"kendo.pivotgrid-common.cmn.chunk.js","sourcesContent":["import { c as compileFilter } from './kendo.data-query.cmn.chunk.js';\n\nconst __meta__ = {\n    id: \"pivotgrid-common.cmn.chunk\",\n    name: \"PivotgridCommonCmnChunk\",\n    category: \"web\",\n    description: \"A reusable outputed chunk of code\",\n    depends: ['data-query.cmn.chunk'],\n    hidden: true,\n    chunk: true\n};\n\n\n\nvar filterFunctionFormats = {\n    contains: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\") > 0\",\n    doesnotcontain: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\")\",\n    endswith: \", Right({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\",\n    eq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n    neq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n    startswith: \", Left({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\"\n};\nvar operators = {\n    doesnotcontain: 'doesnotcontain',\n    in: 'in',\n    neq: \"neq\"\n};\n/**\n * @hidden\n */\nfunction serializeFilters(filters, cube) {\n    var command = \"\";\n    var current = \"\";\n    for (var idx = filters.length - 1; idx >= 0; idx--) {\n        current = \"SELECT (\";\n        current += serializeExpression(filters[idx]);\n        current += \") ON 0\";\n        if (idx === filters.length - 1) {\n            current += \" FROM [\" + cube + \"]\";\n            command = current;\n        }\n        else {\n            command = current + \" FROM ( \" + command + \" )\";\n        }\n    }\n    return command;\n}\nfunction serializeExpression(expression) {\n    var command = '';\n    var value = String(expression.value);\n    var field = expression.field;\n    var operator = expression.operator;\n    if (operator === operators.in) {\n        command += \"{\";\n        command += value;\n        command += \"}\";\n    }\n    else {\n        command += operator === operators.neq || operator === operators.doesnotcontain ? '-' : '';\n        command += \"Filter(\";\n        command += field + \".MEMBERS\";\n        command += formatString(filterFunctionFormats[operator], field, value);\n        command += \")\";\n    }\n    return command;\n}\nfunction formatString(str) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    values.forEach(function (value, index) {\n        str = str.replace(new RegExp(\"\\\\{\" + index + \"\\\\}\", 'g'), value);\n    });\n    return str;\n}\n\n/**\n * @hidden\n */\nfunction serializeMembers(members, measures, sort) {\n    var command = \"\";\n    members = members || [];\n    var parsed = parseDescriptors(members);\n    var expanded = parsed.expanded;\n    var rootNames = getRootNames(parsed.root);\n    var crossJoinCommands = [];\n    var length = expanded.length;\n    var idx = 0;\n    var memberName;\n    var names = [];\n    if (rootNames.length > 1 || measures.length > 1) {\n        crossJoinCommands.push(crossJoinCommand(rootNames, measures));\n        for (; idx < length; idx++) {\n            memberName = expandMemberDescriptor(expanded[idx].name, sort);\n            names = mapNames(memberName, rootNames);\n            crossJoinCommands.push(crossJoinCommand(names, measures));\n        }\n        command += crossJoinCommands.join(\",\");\n    }\n    else {\n        for (; idx < length; idx++) {\n            memberName = expandMemberDescriptor(expanded[idx].name, sort);\n            names.push(memberName[0]);\n        }\n        command += rootNames.concat(names).join(\",\");\n    }\n    return command;\n}\n/**\n * @hidden\n */\nfunction measureNames(measures) {\n    var length = measures.length;\n    var result = [];\n    var measure;\n    for (var idx = 0; idx < length; idx++) {\n        measure = measures[idx];\n        result.push(measure.name !== undefined ? measure.name : measure);\n    }\n    return result;\n}\nfunction getRootNames(members) {\n    var root = [];\n    members.forEach(function (member) {\n        var name = member.name[0];\n        var hierarchyName = baseHierarchyPath(name);\n        if (!root.some(function (n) { return n.indexOf(hierarchyName) === 0; })) {\n            root.push(name);\n        }\n    });\n    return root;\n}\nfunction parseDescriptors(members) {\n    var expanded = [];\n    var child = [];\n    var root = [];\n    var idx = 0;\n    var found;\n    for (; idx < members.length; idx++) {\n        var member = members[idx];\n        var name_1 = member.name;\n        found = false;\n        if (name_1.length > 1) {\n            child.push(member);\n        }\n        else {\n            var hierarchyName = baseHierarchyPath(name_1[0]);\n            for (var j = 0, l = root.length; j < l; j++) {\n                if (root[j].name[0].indexOf(hierarchyName) === 0) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                root.push(member);\n            }\n            if (member.expand) {\n                expanded.push(member);\n            }\n        }\n    }\n    expanded = expanded.concat(child);\n    return {\n        expanded: expanded,\n        root: root\n    };\n}\nfunction mapNames(names, rootNames) {\n    var rootLength = rootNames.length;\n    rootNames = rootNames.slice(0);\n    for (var idx = 0; idx < names.length; idx++) {\n        var name_2 = names[idx];\n        for (var j = 0; j < rootLength; j++) {\n            var rootName = baseHierarchyPath(rootNames[j]);\n            if (name_2.indexOf(rootName) !== -1) {\n                rootNames[j] = name_2;\n                break;\n            }\n        }\n    }\n    return rootNames;\n}\nfunction crossJoinCommand(members, measures) {\n    var tmp = members.slice(0);\n    if (measures.length > 1) {\n        tmp.push(\"{\" + measureNames(measures).join(\",\") + \"}\");\n    }\n    return crossJoin(tmp);\n}\nfunction expandMemberDescriptor(names, sort) {\n    var idx = names.length - 1;\n    var name = names[idx];\n    var sortDescriptor = sortDescriptorForMember(sort, name);\n    if (sortDescriptor && sortDescriptor.dir) {\n        name = \"ORDER(\" + name + \".Children,\" + sortDescriptor.field + \".CurrentMember.MEMBER_CAPTION,\" + sortDescriptor.dir + \")\";\n    }\n    else {\n        name += \".Children\";\n    }\n    names[idx] = name;\n    return names;\n}\nfunction sortDescriptorForMember(sort, member) {\n    for (var idx = 0, length_1 = sort.length; idx < length_1; idx++) {\n        if (member.indexOf(sort[idx].field) === 0) {\n            return sort[idx];\n        }\n    }\n    return null;\n}\nfunction baseHierarchyPath(memberName) {\n    var parts = memberName.split(\".\");\n    if (parts.length > 2) {\n        return parts[0] + \".\" + parts[1];\n    }\n    return memberName;\n}\nfunction crossJoin(names) {\n    var result = \"CROSSJOIN({\";\n    var name;\n    if (names.length > 2) {\n        name = names.pop();\n        result += crossJoin(names);\n    }\n    else {\n        result += names.shift();\n        name = names.pop();\n    }\n    result += \"},{\";\n    result += name;\n    result += \"})\";\n    return result;\n}\n\n/**\n * @hidden\n */\nfunction createRequestBody(options) {\n    var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>';\n    var _a = options.columnAxes, columnAxes = _a === void 0 ? [] : _a, _b = options.rowAxes, rowAxes = _b === void 0 ? [] : _b;\n    var _c = options.measureAxes, measureAxes = _c === void 0 ? [] : _c, _d = options.sort, sort = _d === void 0 ? [] : _d, _e = options.filter, filter = _e === void 0 ? [] : _e;\n    var measuresRowAxis = options.measuresAxis === \"rows\";\n    command += \"SELECT NON EMPTY {\";\n    if (!columnAxes.length && rowAxes.length && (!measureAxes.length || (measureAxes.length && measuresRowAxis))) {\n        columnAxes = rowAxes;\n        rowAxes = [];\n        measuresRowAxis = false;\n    }\n    if (!columnAxes.length && !rowAxes.length) {\n        measuresRowAxis = false;\n    }\n    if (columnAxes.length) {\n        command += serializeMembers(columnAxes, !measuresRowAxis ? measureAxes : [], sort);\n    }\n    else if (measureAxes.length && !measuresRowAxis) {\n        command += measureNames(measureAxes).join(\",\");\n    }\n    command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON COLUMNS\";\n    if (rowAxes.length || (measuresRowAxis && measureAxes.length > 1)) {\n        command += \", NON EMPTY {\";\n        if (rowAxes.length) {\n            command += serializeMembers(rowAxes, measuresRowAxis ? measureAxes : [], sort);\n        }\n        else {\n            command += measureNames(measureAxes).join(\",\");\n        }\n        command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON ROWS\";\n    }\n    if (filter.length) {\n        command += \" FROM \";\n        command += \"(\";\n        command += serializeFilters(filter, options.connection.cube);\n        command += \")\";\n    }\n    else {\n        command += \" FROM [\" + options.connection.cube + \"]\";\n    }\n    if (measureAxes.length === 1 && columnAxes.length) {\n        command += \" WHERE (\" + measureNames(measureAxes).join(\",\") + \")\";\n    }\n    command += '</Statement></Command><Properties><PropertyList><Catalog>' + options.connection.catalog + '</Catalog><Format>Multidimensional</Format></PropertyList></Properties></Execute></Body></Envelope>';\n    return command.replace(/&/g, \"&amp;\");\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\n\n/**\n * @hidden\n */\nfunction parseResponse(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var axes = Array.from(xmlDoc.querySelectorAll(\"Axis\"));\n    var cells = Array.from(xmlDoc.querySelectorAll(\"CellData > Cell\"))\n        .map(function (cell) { return ({\n        fmtValue: getPropertyValue(cell, \"FmtValue\"),\n        ordinal: parseInt(cell.getAttribute(\"CellOrdinal\"), 10),\n        value: getPropertyValue(cell, \"Value\")\n    }); });\n    var columns = { tuples: [] };\n    var rows = { tuples: [] };\n    var data = [];\n    axes.forEach(function (axis) {\n        if (axis.getAttribute('name') !== \"SlicerAxis\") {\n            var tuples = columns.tuples.length === 0 ? columns.tuples : rows.tuples;\n            Array.prototype.push.apply(tuples, translateAxis(axis));\n        }\n    });\n    var indexedData = new Array(rows.tuples.length * columns.tuples.length).fill(null);\n    cells.forEach(function (c) { indexedData[c.ordinal] = c; });\n    var counter = 0;\n    rows.tuples.forEach(function (rowTuple) {\n        columns.tuples.forEach(function (colTuple) {\n            data.push({\n                columnTuple: colTuple,\n                data: indexedData[counter],\n                rowTuple: rowTuple\n            });\n            counter++;\n        });\n    });\n    return { columns: columns, data: data, rows: rows };\n}\n/**\n * @hidden\n */\nfunction getPropertyValue(member, name) {\n    var node = member.querySelector(name);\n    return node ? node.textContent : \"\";\n}\nfunction translateAxis(axis) {\n    var tuples = Array.from(axis.querySelectorAll(\"Tuple\"));\n    return tuples.map(function (tuple) {\n        var memberElements = Array.from(tuple.querySelectorAll(\"Member\"));\n        var members = memberElements.map(function (member) {\n            var lNum = parseInt(getPropertyValue(member, \"LNum\") || \"0\", 10);\n            var hasChildren = parseInt(getPropertyValue(member, \"CHILDREN_CARDINALITY\") || \"0\", 10) > 0;\n            return {\n                caption: getPropertyValue(member, \"Caption\"),\n                children: [],\n                hasChildren: hasChildren,\n                hierarchy: member.getAttribute('Hierarchy'),\n                levelName: getPropertyValue(member, \"LName\"),\n                levelNum: lNum,\n                name: getPropertyValue(member, \"UName\"),\n                parentName: getPropertyValue(member, \"PARENT_UNIQUE_NAME\")\n            };\n        });\n        return { members: members };\n    });\n}\n\n/**\n * @hidden\n */\nvar discoverCommands = {\n    schemaCatalogs: \"DBSCHEMA_CATALOGS\",\n    schemaCubes: \"MDSCHEMA_CUBES\",\n    schemaDimensions: \"MDSCHEMA_DIMENSIONS\",\n    schemaHierarchies: \"MDSCHEMA_HIERARCHIES\",\n    schemaKPIs: \"MDSCHEMA_KPIS\",\n    schemaLevels: \"MDSCHEMA_LEVELS\",\n    schemaMeasures: \"MDSCHEMA_MEASURES\",\n    schemaMembers: \"MDSCHEMA_MEMBERS\"\n};\n/**\n * @hidden\n */\nfunction createDiscoverBody(options) {\n    var properties = {};\n    var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\">';\n    command += \"<RequestType>\" + (discoverCommands[options.command] || options.command) + \"</RequestType>\";\n    command += \"<Restrictions>\" + serializeOptions(\"RestrictionList\", options.restrictions, true) + \"</Restrictions>\";\n    if (options.connection && options.connection.catalog) {\n        properties.Catalog = options.connection.catalog;\n    }\n    command += \"<Properties>\" + serializeOptions(\"PropertyList\", properties, false) + \"</Properties>\";\n    command += '</Discover></Body></Envelope>';\n    return command;\n}\nfunction serializeOptions(parentTagName, options, capitalize) {\n    var result = \"\";\n    if (options) {\n        result += \"<\" + parentTagName + \">\";\n        var value = void 0;\n        for (var key in options) {\n            if (options[key]) {\n                value = options[key];\n                if (capitalize) {\n                    key = key.replace(/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g, \"$1_\").toUpperCase().replace(/_$/, \"\");\n                }\n                result += \"<\" + key + \">\" + value + \"</\" + key + \">\";\n            }\n        }\n        result += \"</\" + parentTagName + \">\";\n    }\n    else {\n        result += \"<\" + parentTagName + \"/>\";\n    }\n    return result;\n}\n\n/**\n * @hidden\n */\nfunction parseCubes(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"CUBE_NAME\"),\n        caption: getPropertyValue(row, \"CUBE_CAPTION\"),\n        description: getPropertyValue(row, \"DESCRIPTION\"),\n        type: getPropertyValue(row, \"CUBE_TYPE\")\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseCatalogs(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"CATALOG_NAME\"),\n        description: getPropertyValue(row, \"DESCRIPTION\")\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseMeasures(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"MEASURE_NAME\"),\n        caption: getPropertyValue(row, \"MEASURE_CAPTION\"),\n        uniqueName: getPropertyValue(row, \"MEASURE_UNIQUE_NAME\"),\n        description: getPropertyValue(row, \"DESCRIPTION\"),\n        aggregator: getPropertyValue(row, \"MEASURE_AGGREGATOR\"),\n        groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n        displayFolder: getPropertyValue(row, \"MEASURE_DISPLAY_FOLDER\"),\n        defaultFormat: getPropertyValue(row, \"DEFAULT_FORMAT_STRING\")\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseKPIs(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"KPI_NAME\"),\n        uniqueName: getPropertyValue(row, \"KPI_NAME\"),\n        caption: getPropertyValue(row, \"KPI_CAPTION\"),\n        value: getPropertyValue(row, \"KPI_VALUE\"),\n        goal: getPropertyValue(row, \"KPI_GOAL\"),\n        status: getPropertyValue(row, \"KPI_STATUS\"),\n        trend: getPropertyValue(row, \"KPI_TREND\"),\n        statusGraphic: getPropertyValue(row, \"KPI_STATUS_GRAPHIC\"),\n        trendGraphic: getPropertyValue(row, \"KPI_TREND_GRAPHIC\"),\n        description: getPropertyValue(row, \"KPI_DESCRIPTION\"),\n        groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n        type: \"kpi\"\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseDimensions(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        caption: getPropertyValue(row, \"DIMENSION_CAPTION\"),\n        defaultHierarchy: getPropertyValue(row, \"DEFAULT_HIERARCHY\"),\n        description: getPropertyValue(row, \"DESCRIPTION\"),\n        name: getPropertyValue(row, \"DIMENSION_NAME\"),\n        type: parseInt(getPropertyValue(row, \"DIMENSION_TYPE\"), 10),\n        uniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\")\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseHierarchies(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"HIERARCHY_NAME\"),\n        caption: getPropertyValue(row, \"HIERARCHY_CAPTION\"),\n        description: getPropertyValue(row, \"DESCRIPTION\"),\n        uniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n        dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n        displayFolder: getPropertyValue(row, \"HIERARCHY_DISPLAY_FOLDER\"),\n        origin: getPropertyValue(row, \"HIERARCHY_ORIGIN\"),\n        defaultMember: getPropertyValue(row, \"DEFAULT_MEMBER\")\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseLevels(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"LEVEL_NAME\"),\n        caption: getPropertyValue(row, \"LEVEL_CAPTION\"),\n        description: getPropertyValue(row, \"DESCRIPTION\"),\n        uniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n        dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n        displayFolder: getPropertyValue(row, \"LEVEL_DISPLAY_FOLDER\"),\n        orderingProperty: getPropertyValue(row, \"LEVEL_ORDERING_PROPERTY\"),\n        origin: getPropertyValue(row, \"LEVEL_ORIGIN\"),\n        hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\")\n    }); });\n    return rows;\n}\n/**\n * @hidden\n */\nfunction parseMembers(response) {\n    var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n    var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n        .map(function (row) { return ({\n        name: getPropertyValue(row, \"MEMBER_NAME\"),\n        caption: getPropertyValue(row, \"MEMBER_CAPTION\"),\n        uniqueName: getPropertyValue(row, \"MEMBER_UNIQUE_NAME\"),\n        dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n        hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n        levelUniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n        childrenCardinality: getPropertyValue(row, \"CHILDREN_CARDINALITY\")\n    }); });\n    return rows;\n}\n\nvar _this = undefined;\nvar discoverParser = {\n    schemaCatalogs: parseCatalogs,\n    schemaCubes: parseCubes,\n    schemaDimensions: parseDimensions,\n    schemaHierarchies: parseHierarchies,\n    schemaKPIs: parseKPIs,\n    schemaLevels: parseLevels,\n    schemaMeasures: parseMeasures,\n    schemaMembers: parseMembers\n};\n/**\n * Fetches the data.\n *\n * @param options RequestOptions\n * @returns Promise<ResponseData>\n *\n * @example\n * const options: RequestOptions = { ... };\n *\n * fetchData(options).then(createDataState).then((dataState: DataState) => {\n *  // Update the UI\n * });\n */\n/**\n * @hidden\n */\nvar fetchData = function (fetchOptions, options) { return __awaiter(_this, void 0, void 0, function () {\n    var init, response, stringResponse;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                init = __assign({ body: createRequestBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                return [4 /*yield*/, fetch(fetchOptions.url, init)];\n            case 1:\n                response = _a.sent();\n                return [4 /*yield*/, response.text()];\n            case 2:\n                stringResponse = _a.sent();\n                return [2 /*return*/, parseResponse(stringResponse)];\n        }\n    });\n}); };\n/**\n * @hidden\n */\nvar fetchDiscover = function (fetchOptions, options) { return __awaiter(_this, void 0, void 0, function () {\n    var init, response, stringResponse;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                init = __assign({ body: createDiscoverBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                return [4 /*yield*/, fetch(fetchOptions.url, init)];\n            case 1:\n                response = _a.sent();\n                return [4 /*yield*/, response.text()];\n            case 2:\n                stringResponse = _a.sent();\n                return [2 /*return*/, discoverParser[options.command](stringResponse)];\n        }\n    });\n}); };\n\nvar isMeasure = function (member) { return member.hierarchy === '[Measures]'; };\n// A typical tree depth count won't work for the Pivot,\n// as each branch can have lower number of nodes than the total number of levels\n/**\n * @hidden\n */\nvar getMaxNesting = function (node, set) {\n    if (set === void 0) { set = new Set(); }\n    (node.children || []).forEach(function (child) {\n        set.add(child.levelName);\n        getMaxNesting(child, set);\n    });\n    return set.size;\n};\n/**\n * @hidden\n */\nvar getMaxExpansion = function (node) {\n    var expanded = 0;\n    (node.children || []).forEach(function (child) {\n        expanded += (getMaxExpansion(child) || 1);\n    });\n    return expanded;\n};\n/**\n * @hidden\n */\nvar generateNormalizedPath = function (node, parent) {\n    return (parent && (parent.hierarchy === node.hierarchy)\n        ? (parent.normalizedPath || []).slice(0, -1).concat([node.name || null]) : ((parent && parent.normalizedPath) ? parent.normalizedPath : []).concat([node.name])).filter(Boolean);\n};\n/**\n * @hidden\n */\nvar generatePath = function (node, parent) {\n    return (parent && (parent.hierarchy === node.hierarchy)\n        ? (parent.path || []).slice(0, -1).concat([((node.levelNum === 0 ? node.hierarchy : node.name) || null)]) : ((parent && parent.path) ? parent.path : []).concat([node.levelNum === 0 ? node.hierarchy : node.name])).filter(Boolean);\n};\n/**\n * @hidden\n */\nvar toMatrix = function (node, rowIndex, colIndex, maxDepth, maxBreadth, matrix, leafs, parent) {\n    if (rowIndex === void 0) { rowIndex = -1; }\n    if (colIndex === void 0) { colIndex = 0; }\n    if (maxDepth === void 0) { maxDepth = undefined; }\n    if (maxBreadth === void 0) { maxBreadth = undefined; }\n    if (matrix === void 0) { matrix = undefined; }\n    if (leafs === void 0) { leafs = undefined; }\n    if (parent === void 0) { parent = undefined; }\n    var branchDepth = getMaxNesting(node);\n    var branchBreadth = getMaxExpansion(node);\n    var depth = maxDepth || branchDepth;\n    var breadth = maxBreadth || branchBreadth;\n    var matrixResult = matrix ? matrix.slice() : [];\n    var leafsResult = leafs ? leafs.slice() : new Array(breadth);\n    var index = matrixResult.findIndex(function (l) { return l && l.name === node.levelName && l.level === node.levelNum; });\n    var level = matrixResult[index];\n    var row = {\n        name: node.levelName,\n        level: node.levelNum,\n        index: rowIndex,\n        cells: new Array(breadth).fill(null)\n    };\n    var inject = rowIndex !== -1 && colIndex !== -1;\n    var cell = {\n        caption: node.caption,\n        name: node.name,\n        levelName: node.levelName,\n        levelNum: node.levelNum,\n        hasChildren: node.hasChildren,\n        parentName: node.parentName,\n        hierarchy: node.hierarchy,\n        total: (node.total !== undefined ? node.total : false) || (parent && parent.children.length <= 1 && parent.total),\n        parent: parent,\n        rowIndex: rowIndex,\n        colIndex: colIndex,\n        depth: 1,\n        breadth: 1,\n        path: node.path || [],\n        normalizedPath: node.normalizedPath || [],\n        children: node.children.filter(function (c) { return c.hierarchy === node.hierarchy; })\n    };\n    if (inject) {\n        if (level) {\n            level.cells[colIndex] = cell;\n            if (level.index >= rowIndex) {\n                rowIndex = level.index;\n            }\n        }\n        else {\n            if (matrixResult[rowIndex] && matrixResult[rowIndex].cells.length) {\n                for (var idx = rowIndex; idx < matrixResult.length; idx++) {\n                    var shiftedRow = matrixResult[idx];\n                    shiftedRow.index++;\n                }\n                matrixResult.splice(rowIndex, 0, row);\n                matrixResult[rowIndex].cells[colIndex] = cell;\n            }\n            else {\n                matrixResult[rowIndex] = row;\n                matrixResult[rowIndex].cells[colIndex] = cell;\n            }\n        }\n    }\n    var collOffset = 0;\n    if (node.children && node.children.length) {\n        node.children.forEach(function (child) {\n            var _a = toMatrix(child, rowIndex + 1, colIndex + collOffset, depth, breadth, matrixResult, leafsResult, cell), newMatrix = _a[0], newLeafs = _a[1], childBreadth = _a[3];\n            collOffset += (childBreadth || 1);\n            matrixResult = newMatrix.slice();\n            leafsResult = newLeafs.slice();\n        });\n    }\n    else if (node.normalizedPath) {\n        leafsResult[colIndex] = { total: cell.total, path: node.normalizedPath };\n    }\n    cell.depth = branchDepth;\n    cell.breadth = branchBreadth;\n    return [\n        matrixResult,\n        leafsResult,\n        branchDepth,\n        branchBreadth\n    ];\n};\nvar withTotal = function (root, parent, index) {\n    if (parent === void 0) { parent = null; }\n    if (index === void 0) { index = 0; }\n    var hierarchy;\n    var alt = __assign({}, root, { total: true, hasChildren: false, children: [] });\n    for (var childIndex = 0; childIndex < root.children.length; childIndex++) {\n        var child = withTotal(root.children[childIndex], root, childIndex);\n        hierarchy = hierarchy || child.hierarchy;\n        if (child.hierarchy !== hierarchy\n            && parent\n            && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n            && !root.total) {\n            alt.children.push(child);\n            root.children.splice(childIndex, 1);\n            childIndex--;\n        }\n    }\n    if (root.children.filter(function (c) { return !c.total; }).length >= 1\n        && parent\n        && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n        && !root.total) {\n        var childHierarchy = root.children[0].hierarchy;\n        if (root.hierarchy === childHierarchy) {\n            parent.children.splice(index + 1, 0, alt);\n        }\n    }\n    return root;\n};\n/**\n * @hidden\n */\nvar toTree = function (tuples) {\n    var root = { children: [] };\n    var map = {};\n    if (tuples.every(function (t) { return t.members.length === 1 && isMeasure(t.members[0]); })) {\n        // toTree(columnsTuples) - The case where there are only measure(s) and no columns.\n        return {\n            children: tuples.map(function (t) {\n                var member = t.members[0];\n                return __assign({}, member, { normalizedPath: [member.name], parentName: member.name, path: [member.hierarchy] });\n            })\n        };\n    }\n    for (var tupleIndex = 0; tupleIndex < tuples.length; tupleIndex++) {\n        var tuple = copy(tuples[tupleIndex]);\n        var key = \"\";\n        var _loop_1 = function (memberIndex) {\n            var member = tuple.members[memberIndex];\n            var parent_1;\n            if (root.children && root.children.length === 0) {\n                parent_1 = root;\n            }\n            else if (map[key] && !map[key + member.name] && member.levelNum === 0) {\n                parent_1 = map[key];\n            }\n            else if (map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                parent_1 = map[key + member.parentName];\n            }\n            else if (!map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                var parentKey = Object.keys(map).find(function (e) { return member.parentName === map[e].name; });\n                if (parentKey) {\n                    parent_1 = map[parentKey];\n                }\n            }\n            if (parent_1) {\n                member.path = generatePath(member, parent_1);\n                member.normalizedPath = generateNormalizedPath(member, parent_1);\n                var intruderIndex = parent_1.children.findIndex(function (c) { return c.hierarchy !== parent_1.hierarchy; });\n                if (intruderIndex !== -1) {\n                    parent_1.children.splice(intruderIndex, 0, member);\n                }\n                else {\n                    parent_1.children.push(member);\n                }\n            }\n            member.parentName += member.name;\n            key += member.parentName;\n            if (!map[key]) {\n                map[key] = member;\n            }\n        };\n        for (var memberIndex = 0; memberIndex < tuple.members.length; memberIndex++) {\n            _loop_1(memberIndex);\n        }\n    }\n    return copy(withTotal(root));\n};\n/**\n * @hidden\n */\nvar toData = function (data, columns, rows, breadth, depth) {\n    var result = Array.from(new Array(depth), function () { return ({ cells: Array.from(new Array(breadth), function () { return null; }) }); });\n    var hash = function (names) { return names.join('|'); };\n    var membersNames = function (tuple) { return tuple.members.map(function (m) { return m.name; }); };\n    var columnsIndexes = new Map();\n    var rowsIndexes = new Map();\n    columns.forEach(function (colMembers, idx) { columnsIndexes.set(hash(colMembers.path), idx); });\n    rows.forEach(function (rowMembers, idx) { rowsIndexes.set(hash(rowMembers.path), idx); });\n    data.forEach(function (item) {\n        var colIndex = columnsIndexes.get(hash(membersNames(item.columnTuple)));\n        var rowIndex = rowsIndexes.get(hash(membersNames(item.rowTuple)));\n        if (colIndex !== undefined && rowIndex !== undefined) {\n            if (!result[rowIndex].cells[colIndex]) {\n                result[rowIndex].row = rows[rowIndex].path;\n                result[rowIndex].cells[colIndex] = item;\n            }\n        }\n    });\n    return result;\n};\nvar rotateMatrix = function (matrix, leafs, depth, breadth) {\n    var result = new Array(breadth);\n    for (var colIndex = 0; colIndex < breadth; colIndex++) {\n        for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n            if (matrix[rowIndex] && matrix[rowIndex].cells[colIndex]) {\n                var cell = matrix[rowIndex].cells[colIndex];\n                if (!result[colIndex]) {\n                    result[colIndex] = {\n                        cells: new Array(depth).fill(null)\n                    };\n                }\n                result[colIndex].cells[rowIndex] = __assign({}, cell, { rowSpan: cell.colSpan, colSpan: cell.rowSpan });\n            }\n        }\n    }\n    return [result, leafs, breadth, depth];\n};\n/**\n * @hidden\n */\nvar toColumns = function (root) {\n    var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n    for (var colIndex = 0; colIndex < breadth; colIndex++) {\n        var cell = null;\n        for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n            if (matrix[rowIndex]) {\n                var next = matrix[rowIndex].cells[colIndex];\n                if (!next && cell) {\n                    cell.rowSpan = (cell.rowSpan || 1) + 1;\n                }\n                if (cell) {\n                    cell.colSpan = cell.breadth || 1;\n                }\n                if (next) {\n                    cell = next;\n                }\n            }\n        }\n    }\n    return [matrix, leafs, depth, breadth];\n};\n/**\n * @hidden\n */\nvar toRows = function (root) {\n    var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n    for (var colIndex = 0; colIndex < breadth; colIndex++) {\n        var cell = null;\n        for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n            if (matrix[rowIndex]) {\n                var next = matrix[rowIndex].cells[colIndex];\n                if (!next && cell) {\n                    cell.rowSpan = (cell.rowSpan || 1) + 1;\n                }\n                if (cell) {\n                    cell.colSpan = cell.breadth;\n                }\n                if (next) {\n                    cell = next;\n                }\n            }\n        }\n    }\n    return rotateMatrix(matrix, leafs, depth, breadth);\n};\n/**\n * @hidden\n */\nvar cloneDate = function (date) { return date ? new Date(date.getTime()) : null; };\n/**\n * @hidden\n */\nfunction clone(obj) {\n    var result = {};\n    cloneObject(obj, result);\n    return result;\n}\n/**\n * @hidden\n */\nfunction cloneObject(obj, result) {\n    for (var field in obj) {\n        if (obj.hasOwnProperty(field)) {\n            var value = obj[field];\n            result[field] = cloneValue(value, result[field]);\n        }\n    }\n}\n/**\n * @hidden\n */\nfunction cloneValue(value, nextValue) {\n    if (Array.isArray(value)) {\n        return cloneArray(value);\n    }\n    else if (value instanceof Date) {\n        return cloneDate(value);\n    }\n    else if (value && typeof value === 'object') {\n        var newNextValue = nextValue || {};\n        cloneObject(value, newNextValue);\n        return newNextValue;\n    }\n    else {\n        return value;\n    }\n}\n/**\n * @hidden\n */\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n/**\n * @hidden\n */\nfunction cloneArray(array) {\n    return array.map(function (value) { return cloneValue(value, undefined); });\n}\nvar kpiMeasure = function (name, measure, type) {\n    return {\n        hierarchyUniqueName: name,\n        uniqueName: measure,\n        caption: measure,\n        measure: measure,\n        name: measure,\n        type: type,\n        kpi: true\n    };\n};\n/**\n * @hidden\n */\nfunction buildKPIMeasures(node) {\n    var name = node.name;\n    return [\n        kpiMeasure(name, node.value, \"value\"),\n        kpiMeasure(name, node.goal, \"goal\"),\n        kpiMeasure(name, node.status, \"status\"),\n        kpiMeasure(name, node.trend, \"trend\")\n    ];\n}\n/**\n * @hidden\n */\nvar addKPI = function (data) {\n    var found;\n    var idx = 0;\n    for (; idx < data.length; idx++) {\n        if (data[idx].type === 2) {\n            found = true;\n            break;\n        }\n    }\n    if (found) {\n        data.splice(idx + 1, 0, {\n            caption: \"KPIs\",\n            defaultHierarchy: \"[KPIs]\",\n            name: \"KPIs\",\n            uniqueName: \"[KPIs]\"\n        });\n    }\n};\n/**\n * @hidden\n */\nvar compareAxisWithField = function (a, b) { return String(a.name) === String([(b.defaultHierarchy\n        ? b.defaultHierarchy\n        : b.uniqueName)]); };\n/**\n * @hidden\n */\nvar compareAxes = function (a, b) { return String(a.name) === String(b.name); };\n/**\n * @hidden\n */\nvar filterField = function (axes, out) {\n    var _loop_2 = function (i) {\n        var axis = axes[i];\n        var index = axis.name.findIndex(function (name) { return compareAxisWithField({ name: [name] }, out) || String(name).startsWith(out.uniqueName); });\n        if (index !== -1) {\n            if (index === axis.name.length - 1 || axis.name.length === 1) {\n                axes.splice(i, 1);\n            }\n            else {\n                axis.name.splice(index, 1);\n                var duplicatedAxisIndex = axes.findIndex(function (ax) { return ax !== axis && String(ax.name) === String(axis.name); });\n                if (duplicatedAxisIndex !== -1) {\n                    axes[duplicatedAxisIndex] = __assign({}, axes[duplicatedAxisIndex], axis, ((axes[duplicatedAxisIndex].expand || axis.expand) ? { expand: true } : {}));\n                    axes.splice(i, 1);\n                }\n            }\n        }\n    };\n    for (var i = axes.length - 1; i >= 0; i--) {\n        _loop_2(i);\n    }\n};\n/**\n * @hidden\n */\nvar insertAxis = function (axes, toInsert, state) {\n    var index = -1;\n    if (state.dropTarget && state.dropDirection) {\n        var offset = state.dropDirection\n            ? (state.dropDirection === 'before'\n                ? 0\n                : 1)\n            : 0;\n        index = axes.findIndex(function (c) { return compareAxes(c, state.dropTarget); }) + offset;\n    }\n    if (index !== -1) {\n        axes.forEach(function (axis) {\n            var _a;\n            if (axis.expand && axis.name.length > 1 && axis.name.length > index) {\n                (_a = axis.name).splice.apply(_a, [index, 0].concat(toInsert.name));\n            }\n        });\n        axes.splice(index, 0, toInsert);\n    }\n    else {\n        axes.push(toInsert);\n    }\n};\n/**\n * @hidden\n */\nvar reverseColumnsByMeasures = function (columns) {\n    var firstColumn = columns.length && columns[0];\n    var lastMember = firstColumn && firstColumn.members[firstColumn.members.length - 1];\n    if (lastMember && isMeasure(lastMember)) {\n        var columnsArr = [];\n        var measuresCount = new Set(columns.map(function (col) { return col.members[col.members.length - 1].caption; })).size;\n        for (var i = 0; i < columns.length; i += measuresCount) {\n            columnsArr.push(columns.slice(i, i + measuresCount));\n        }\n        var result_1 = [];\n        columnsArr.forEach(function (arr) {\n            result_1.push.apply(result_1, arr.reverse());\n        });\n        return result_1;\n    }\n    return columns;\n};\n\n/**\n * Creates the state object. See `fetchData`.\n *\n * @param response - ResponseData\n * @returns DataState\n */\n/**\n * @hidden\n */\nvar createDataState = function (response) {\n    var state = {\n        columns: reverseColumnsByMeasures(response.columns.tuples),\n        data: response.data,\n        rows: response.rows.tuples\n    };\n    return state;\n};\n\n/**\n * Creates a collection of AxisDescriptor base on the expandTree.\n * @param expandTree - { [key: string]: boolean }\n * @returns AxisDescriptor[]\n *\n * @example\n * See `setRowExpand` or `setColumnExpand` functions.\n */\n/**\n * @hidden\n */\nfunction createAxisDescriptors(expandTree) {\n    var descriptors = [];\n    for (var _i = 0, _a = Object.keys(expandTree); _i < _a.length; _i++) {\n        var key = _a[_i];\n        descriptors.push({ name: JSON.parse(key), expand: expandTree[key] });\n    }\n    return descriptors;\n}\n\n/**\n * Sets sort descriptors to request options.\n *\n * @param options - RequestOptions\n * @param sort - SortDescriptor[]\n *\n * @example\n * const options: RequestOptions = { ... };\n * const sort: SortDescriptor[] = [{ ... }, { ... }];\n * setSort(options, sort);\n * // skip the sort parameter to clear current filter - setSort(options);\n *\n * fetchData(options).then(createDataState).then((dataState: DataState) => {\n *  // Update the UI\n * });\n */\n/**\n * @hidden\n */\nvar setSort = function (options, sort) {\n    if (sort === void 0) { sort = []; }\n    options.sort = sort;\n};\n\n/**\n * Sets filter descriptors to request options.\n *\n * @param options - RequestOptions\n * @param filter - FilterDescriptor[]\n *\n * @example\n * const options: RequestOptions = { ... };\n * const filter: FilterDescriptor[] = [{ ... }, { ... }];\n * setFilter(options, filter);\n * // skip the filter parameter to clear current filter - setFilter(options);\n *\n * fetchData(options).then(createDataState).then((dataState: DataState) => {\n *  // Update the UI\n * });\n */\n/**\n * @hidden\n */\nvar setFilter = function (options, filter) {\n    if (filter === void 0) { filter = []; }\n    options.filter = filter;\n};\n\n/**\n * @hidden\n */\nvar HEADERS_ACTION;\n(function (HEADERS_ACTION) {\n    HEADERS_ACTION[\"toggle\"] = \"HEADERS_ACTION_TOGGLE\";\n    HEADERS_ACTION[\"expand\"] = \"HEADERS_ACTION_EXPAND\";\n    HEADERS_ACTION[\"collapse\"] = \"HEADERS_ACTION_COLLAPSE\";\n})(HEADERS_ACTION || (HEADERS_ACTION = {}));\nvar findPath = function (node, matchFn, matched) {\n    var result = new Set();\n    node.children.forEach(function (child) {\n        var match = matchFn(child);\n        if (matched) {\n            result.add(String(child.path));\n        }\n        findPath(child, matchFn, (matched || match)).map(function (h) {\n            result.add(h);\n        });\n    });\n    return Array.from(result.values());\n};\n/**\n * @hidden\n */\nvar headersReducer = function (state, action) {\n    switch (action.type) {\n        case HEADERS_ACTION.toggle: {\n            var existing = state.find((function (s) { return String(s.name) === String(action.payload); }));\n            return headersReducer(state, __assign({}, action, { type: existing && (existing.expand)\n                    ? HEADERS_ACTION.collapse\n                    : HEADERS_ACTION.expand }));\n        }\n        case HEADERS_ACTION.expand: {\n            var existing_1 = state.find((function (s) { return String(s.name) === String(action.payload); }));\n            if (existing_1 && existing_1.expand === true) {\n                return state;\n            }\n            else if (existing_1 && (existing_1.expand === false || existing_1.expand === undefined)) {\n                return state.map(function (s) { return s === existing_1 ? (__assign({}, existing_1, { expand: true })) : s; });\n            }\n            else {\n                var nextState = state.slice();\n                nextState.push({ name: action.payload, expand: true });\n                return nextState;\n            }\n        }\n        case HEADERS_ACTION.collapse: {\n            var filtered_1 = findPath(action.tree, function (node) { return !node.total && String(node.path) === String(action.payload); });\n            var newState = state.slice()\n                .filter(function (h) { return !filtered_1.some(function (f) { return f === String(h.name); }); })\n                .map(function (h) { return (__assign({}, h, { expand: Boolean(h.expand) })); })\n                .map(function (h) { return (String(h.name) === String(action.payload))\n                ? action.payload.length > 1 ? undefined : { name: action.payload, expand: false }\n                : h; })\n                .filter(Boolean);\n            return newState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n/**\n * @hidden\n */\nvar PIVOT_CONFIGURATOR_ACTION;\n(function (PIVOT_CONFIGURATOR_ACTION) {\n    // Selection\n    PIVOT_CONFIGURATOR_ACTION[\"toggleSelection\"] = \"PIVOT_CONFIGURATOR_ACTION_TOGGLE_SELECTION\";\n    PIVOT_CONFIGURATOR_ACTION[\"addColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXIS\";\n    PIVOT_CONFIGURATOR_ACTION[\"addColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXES\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXIS\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXES\";\n    PIVOT_CONFIGURATOR_ACTION[\"addRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXIS\";\n    PIVOT_CONFIGURATOR_ACTION[\"addRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXES\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXIS\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXES\";\n    PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXIS\";\n    PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXES\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXIS\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXES\";\n    // Removal\n    PIVOT_CONFIGURATOR_ACTION[\"remove\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE\";\n    // Sort\n    PIVOT_CONFIGURATOR_ACTION[\"setSort\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_SORT\";\n    // Filter\n    PIVOT_CONFIGURATOR_ACTION[\"setFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_FILTER\";\n    PIVOT_CONFIGURATOR_ACTION[\"addFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_FILTER\";\n    PIVOT_CONFIGURATOR_ACTION[\"changeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_CHANGE_FILTER\";\n    PIVOT_CONFIGURATOR_ACTION[\"removeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_FILTER\";\n    // Drag\n    PIVOT_CONFIGURATOR_ACTION[\"setDragItem\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DRAGITEM\";\n    PIVOT_CONFIGURATOR_ACTION[\"drop\"] = \"PIVOT_CONFIGURATOR_ACTION_DROP\";\n    PIVOT_CONFIGURATOR_ACTION[\"setDropZone\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_ZONE\";\n    PIVOT_CONFIGURATOR_ACTION[\"setDropTarget\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_TARGET\";\n    PIVOT_CONFIGURATOR_ACTION[\"setDropDirection\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_DIRECTION\";\n})(PIVOT_CONFIGURATOR_ACTION || (PIVOT_CONFIGURATOR_ACTION = {}));\n/**\n * @hidden\n */\nvar configuratorReducer = function (state, action) {\n    var newRows;\n    var newColumns;\n    var newMeasures;\n    var newSort;\n    var newFilter;\n    var newDragitem;\n    var newDropZone;\n    var newDropDirection;\n    var newDropTarget;\n    switch (action.type) {\n        case PIVOT_CONFIGURATOR_ACTION.toggleSelection: {\n            if (Array.isArray(action.payload)) {\n                // TODO;\n            }\n            else {\n                var payload_1 = action.payload;\n                if (payload_1.type === 2 || 'aggregator' in payload_1) {\n                    if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.removeMeasureAxis }));\n                    }\n                    else {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.addMeasureAxis }));\n                    }\n                }\n                else if (payload_1.type === 'kpi') {\n                    var measures = buildKPIMeasures(payload_1);\n                    if (measures.every(function (m) { return state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); })) {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.removeMeasureAxes, payload: measures }));\n                    }\n                    else {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.addMeasureAxes, payload: measures.filter(function (m) { return !state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); }) }));\n                    }\n                }\n                else if (action.payload.kpi) {\n                    if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.removeMeasureAxis }));\n                    }\n                    else {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.addMeasureAxis }));\n                    }\n                }\n                else {\n                    if (state.columnAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.removeColumnAxis }));\n                    }\n                    else if (state.rowAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.removeRowAxis }));\n                    }\n                    else if ((state.columnAxes && state.columnAxes.length) && (!state.rowAxes || !state.rowAxes.length)) {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.addRowAxis }));\n                    }\n                    else {\n                        return configuratorReducer(state, __assign({}, action, { type: PIVOT_CONFIGURATOR_ACTION.addColumnAxis }));\n                    }\n                }\n            }\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.addColumnAxis: {\n            newColumns = (state.columnAxes || []).concat([\n                { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n            ]);\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.addColumnAxes: {\n            // TODO;\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.removeColumnAxis: {\n            newColumns = (state.columnAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }).slice();\n            filterField(newColumns, action.payload);\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.removeColumnAxes: {\n            // TODO;\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.addRowAxis: {\n            newRows = (state.rowAxes || []).concat([\n                { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n            ]);\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.addRowAxes: {\n            // TODO;\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.removeRowAxis: {\n            newRows = (state.rowAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }).slice();\n            filterField(newRows, action.payload);\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.removeRowAxes: {\n            // TODO;\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.addMeasureAxis: {\n            newMeasures = (state.measureAxes || []).concat([\n                { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n            ]);\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.removeMeasureAxis: {\n            newMeasures = (state.measureAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }).slice();\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.addMeasureAxes: {\n            newMeasures = (state.measureAxes || []).concat((action.payload || []).map(function (p) { return ({ name: [p.defaultHierarchy || p.uniqueName] }); }));\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.removeMeasureAxes: {\n            newMeasures = (state.measureAxes || []).filter(function (s) { return !action.payload.some(function (p) { return compareAxisWithField(s, p); }); }).slice();\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.remove: {\n            if (state.columnAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                newColumns = state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                filterField(newColumns, { uniqueName: action.payload.name });\n            }\n            if (state.rowAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                newRows = state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                filterField(newRows, { uniqueName: action.payload.name });\n            }\n            if (state.measureAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                newMeasures = state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n            }\n            break;\n        }\n        case PIVOT_CONFIGURATOR_ACTION.setDragItem:\n            newDragitem = action.payload;\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.setDropZone:\n            newDropZone = action.payload;\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.setDropTarget:\n            newDropTarget = action.payload;\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.setDropDirection:\n            newDropDirection = action.payload;\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.drop:\n            if (state.dragItem && state.dropZone) {\n                var currentColumn = state.columnAxes.find(function (s) { return compareAxes(s, action.payload); });\n                var currentRow = state.rowAxes.find(function (s) { return compareAxes(s, action.payload); });\n                var currentMeasure = state.measureAxes.find(function (s) { return compareAxes(s, action.payload); });\n                var current = void 0;\n                if (currentColumn) {\n                    current = currentColumn;\n                    newColumns = state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                    filterField(newColumns, { uniqueName: action.payload.name });\n                }\n                if (currentRow) {\n                    current = currentRow;\n                    newRows = state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                    filterField(newRows, { uniqueName: action.payload.name });\n                }\n                if (currentMeasure) {\n                    current = currentMeasure;\n                    newMeasures = state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                }\n                switch (state.dropZone) {\n                    case 'columnAxes': {\n                        newColumns = newColumns || state.columnAxes.slice();\n                        insertAxis(newColumns, current, state);\n                        break;\n                    }\n                    case 'rowAxes': {\n                        newRows = newRows || state.rowAxes.slice();\n                        insertAxis(newRows, current, state);\n                        break;\n                    }\n                    case 'measureAxes': {\n                        newMeasures = newMeasures || state.measureAxes.slice();\n                        insertAxis(newMeasures, current, state);\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            }\n            newDragitem = null;\n            newDropZone = null;\n            newDropTarget = null;\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.setSort:\n            newSort = action.payload;\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.setFilter:\n            if (Array.isArray(action.payload)) {\n                newFilter = action.payload;\n            }\n            else {\n                newFilter = [action.payload];\n            }\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.addFilter:\n            newFilter = (state.filter || []).slice();\n            if (Array.isArray(action.payload)) {\n                newFilter.push.apply(newFilter, action.payload);\n            }\n            else {\n                newFilter.push(action.payload);\n            }\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.changeFilter:\n            newFilter = (Array.isArray(action.payload)\n                ? (state.filter || []).map(function (f) { return action.payload.some(function (a) { return a.field === f.field; })\n                    ? action.payload.find(function (a) { return a.field === f.field; })\n                    : f; })\n                : (state.filter || []).map(function (f) { return f.field === action.payload.field\n                    ? action.payload\n                    : f; }));\n            break;\n        case PIVOT_CONFIGURATOR_ACTION.removeFilter:\n            newFilter = (state.filter || []).slice();\n            if (Array.isArray(action.payload)) {\n                newFilter = newFilter.filter(function (f) { return !action.payload.some(function (p) { return p.field === f.field &&\n                    p.operator === f.operator; }); });\n            }\n            else {\n                newFilter = newFilter.filter(function (f) { return !(f.field === action.payload.field\n                    && f.operator === action.payload.operator); });\n            }\n            break;\n        default:\n            break;\n    }\n    return {\n        dragItem: newDragitem,\n        dropTarget: newDropTarget,\n        dropDirection: newDropDirection,\n        dropZone: newDropZone,\n        columnAxes: newColumns,\n        rowAxes: newRows,\n        measureAxes: newMeasures,\n        filter: newFilter,\n        sort: newSort\n    };\n};\n\n// tslint:disable:object-literal-sort-keys\n/**\n * Represents the aggregate object which calculates the total value. Applicable for local data binding.\n */\nvar sumAggregate = {\n    init: function (data) {\n        if (('sum' in data) === false) {\n            data.sum = 0;\n        }\n    },\n    merge: function (src, dest) {\n        dest.sum += src.sum;\n    },\n    accumulate: function (acc, value) {\n        acc.sum += value;\n    },\n    result: function (data) { return data.sum; },\n    format: function (value) { return value.toFixed(2); }\n};\n/**\n * Represents the aggregate object which calculates the count value. Applicable for local data binding.\n */\nvar countAggregate = {\n    init: function (data) {\n        if (('countA' in data) === false) {\n            data.countA = 0;\n        }\n    },\n    merge: function (src, dest) {\n        dest.countA += src.countA;\n    },\n    accumulate: function (acc, _value) {\n        acc.countA += 1;\n    },\n    result: function (data) { return data.countA; },\n    format: function (value) { return value.toFixed(); }\n};\n/**\n * Represents the aggregate object which calculates the minimum value. Applicable for local data binding.\n */\nvar minAggregate = {\n    init: function (data) {\n        if (('min' in data) === false) {\n            data.min = Number.POSITIVE_INFINITY;\n        }\n    },\n    merge: function (src, dest) {\n        dest.min = Math.min(src.min, dest.min);\n    },\n    accumulate: function (acc, value) {\n        acc.min = Math.min(value, acc.min);\n    },\n    result: function (data) { return Number.isFinite(data.min) ? data.min : NaN; },\n    format: function (value) { return value.toFixed(2); }\n};\n/**\n * Represents the aggregate object which calculates the maximum value. Applicable for local data binding.\n */\nvar maxAggregate = {\n    init: function (data) {\n        if (('max' in data) === false) {\n            data.max = Number.NEGATIVE_INFINITY;\n        }\n    },\n    merge: function (src, dest) {\n        dest.max = Math.max(src.max, dest.max);\n    },\n    accumulate: function (acc, value) {\n        acc.max = Math.max(value, acc.max);\n    },\n    result: function (data) { return Number.isFinite(data.max) ? data.max : NaN; },\n    format: function (value) { return value.toFixed(2); }\n};\n/**\n * Represents the aggregate object which calculates the average value. Applicable for local data binding.\n */\nvar averageAggregate = {\n    init: function (data) {\n        if (('count' in data) === false) {\n            data.sumA = 0;\n            data.count = 0;\n        }\n    },\n    merge: function (src, dest) {\n        dest.sumA += src.sumA;\n        dest.count += src.count;\n    },\n    accumulate: function (acc, value) {\n        acc.sumA += value;\n        acc.count += 1;\n    },\n    result: function (data) { return data.sumA / data.count; },\n    format: function (value) { return value.toFixed(2); }\n};\n\nfunction forEachDesc(desc, callbackfn) {\n    if ('filters' in desc) {\n        desc.filters.map(function (child) { return forEachDesc(child, callbackfn); });\n    }\n    else {\n        callbackfn(desc);\n    }\n}\nvar filterFields = function (filter, callback) {\n    var descriptors = Array.isArray(filter) ? filter : filter.filters;\n    descriptors.forEach(function (desc) { return forEachDesc(desc, callback); });\n};\n/** @hidden */\nvar initializeFiltering = function (rows, columns, filter) {\n    var compositeFilter = filter ?\n        (Array.isArray(filter) ? { logic: 'and', filters: filter } : filter) : undefined;\n    var predicate = compositeFilter ? compileFilter(compositeFilter) : function () { return true; };\n    var axes = rows.concat(columns);\n    var fieldValues = [];\n    filterFields(filter || [], function (desc) {\n        if ('field' in desc && desc.field) {\n            fieldValues.push(desc.field);\n        }\n    });\n    var result = { hasFilter: false, predicate: predicate, filteringAxes: [] };\n    if (fieldValues.some(function (f) { return typeof f === 'function'; })) {\n        result.filteringAxes = axes.slice();\n    }\n    else if (fieldValues.length > 0) {\n        var filteringFields_1 = Array.from(new Set(fieldValues).values());\n        var filteringAxes = axes.filter(function (a) { return filteringFields_1.indexOf(a.key) >= 0; });\n        result.filteringAxes = filteringAxes;\n    }\n    result.hasFilter = result.filteringAxes.length > 0;\n    return result;\n};\n\n/** @hidden */\nvar subNode = function (node, field, initialNode) {\n    var childNode = node.get(field);\n    if (!childNode) {\n        childNode = initialNode || new Map();\n        node.set(field, childNode);\n    }\n    return childNode;\n};\nvar separator = '&';\n/** @hidden */\nvar createKey = function (key, value) { return key + separator + value; };\n/** @hidden */\nvar splitKeyValue = function (keyValue) {\n    var separatorIndex = keyValue.indexOf(separator);\n    if (separatorIndex !== -1) {\n        var key = keyValue.substring(0, separatorIndex);\n        var value = keyValue.substring(separatorIndex + 1);\n        return [key, value];\n    }\n    else {\n        return [keyValue, undefined];\n    }\n};\n\nvar calculateColumnData = function (node, measures, dataField) {\n    node.forEach(function (childNode, k) {\n        if (k !== dataField) {\n            if (childNode.size > 0) {\n                calculateColumnData(childNode, measures, dataField);\n            }\n            var childData_1 = childNode.get(dataField);\n            var parentData_1 = subNode(node, dataField, {});\n            measures.forEach(function (m) {\n                m.aggregate.init(parentData_1);\n                m.aggregate.merge(childData_1, parentData_1);\n            });\n        }\n    });\n};\n/** @hidden */\nvar mergeTrees = function (src, dest, measures, dataField) {\n    src.forEach(function (srcChild, k) {\n        var destChild;\n        if (k !== dataField) {\n            destChild = subNode(dest, k);\n            mergeTrees(srcChild, destChild, measures, dataField);\n        }\n        else {\n            destChild = subNode(dest, k, {});\n            measures.forEach(function (m) {\n                m.aggregate.init(destChild);\n                m.aggregate.merge(srcChild, destChild);\n            });\n        }\n    });\n};\nvar calculateColumns = function (node, measures, columnsData, dataField) {\n    node.forEach(function (childNode, k) {\n        if (k !== columnsData) {\n            if (childNode.size > 0) {\n                calculateColumns(childNode, measures, columnsData, dataField);\n            }\n            var srcColumns = subNode(childNode, columnsData);\n            var destColumns = subNode(node, columnsData);\n            mergeTrees(srcColumns, destColumns, measures, dataField);\n        }\n    });\n};\n/** @hidden */\nvar createDataTree = function (data, rows, columns, measures, fields, filter) {\n    var result = new Map();\n    var cache = new Map();\n    var axes = rows.concat(columns);\n    var leafNodes = new Set();\n    var dataField = fields.dataField, columnsData = fields.columnsData;\n    var _a = initializeFiltering(rows, columns, filter), hasFilter = _a.hasFilter, predicate = _a.predicate, filteringAxes = _a.filteringAxes;\n    var empty = '';\n    data.forEach(function (dataItem) {\n        if (hasFilter) {\n            var filteringDataItem_1 = {};\n            filteringAxes.forEach(function (axis) { filteringDataItem_1[axis.key] = axis.displayValue(dataItem); });\n            if (!predicate(filteringDataItem_1)) {\n                return;\n            }\n        }\n        var values = axes.map(function (a) { return a.displayValue(dataItem); });\n        var dataKey = empty.concat.apply(empty, values);\n        var nodeData = cache.get(dataKey);\n        if (!nodeData) {\n            var node_1 = result;\n            var eachAxis = function (axis) {\n                node_1 = subNode(node_1, createKey(axis.key, axis.displayValue(dataItem)));\n            };\n            rows.forEach(eachAxis);\n            node_1 = subNode(node_1, columnsData);\n            leafNodes.add(node_1);\n            columns.forEach(eachAxis);\n            nodeData = {};\n            node_1.set(dataField, nodeData);\n            cache.set(dataKey, nodeData);\n            measures.forEach(function (m) {\n                m.aggregate.init(nodeData);\n            });\n        }\n        measures.forEach(function (m) {\n            m.aggregate.accumulate(nodeData, m.value(dataItem));\n        });\n    });\n    leafNodes.forEach(function (leaf) { return calculateColumnData(leaf, measures, dataField); });\n    calculateColumns(result, measures, columnsData, dataField);\n    return result;\n};\n/** @hidden */\nvar cloneDataTree = function (dataTree, dataField, measures) {\n    var result = new Map();\n    mergeTrees(dataTree, result, measures, dataField);\n    return result;\n};\n\nvar createPath = function (name, axes, path) {\n    var _a = splitKeyValue(name), key = _a[0], value = _a[1];\n    var result = path.slice();\n    if (key && value) {\n        var axis = axes.find(function (a) { return a.key === key; });\n        var caption_1 = axis ? axis.caption : '';\n        return result.map(function (p) { return p === caption_1 ? name : p; });\n    }\n    return result;\n};\nvar membersNode = function (tree, members, field, axisSettings, measures, dataField, cache) {\n    var cacheData = cache || new Map();\n    var path = axisSettings.map(function (a) { return a.caption; });\n    while (members.length > 1 && axisSettings.some(function (a) { return a.caption === members[members.length - 1].caption; })) {\n        members.pop();\n        path.pop();\n    }\n    var node = tree;\n    members.forEach(function (m, i) {\n        path = createPath(m.name, axisSettings, path);\n        if (node && !axisSettings.some(function (a) { return a.caption === m.name; })) {\n            if (!node.has(m.name) && !cacheData.has(path.slice(0, path.indexOf(m.name) + 1).join('-'))) {\n                var currentLevel = Array.from(node).find(function (n) { return n[0] !== field; });\n                var currentLevelNode = currentLevel && currentLevel[0];\n                var levelField_1 = currentLevelNode && splitKeyValue(currentLevelNode)[0];\n                var depth = levelField_1 ? i - axisSettings.findIndex(function (a) { return a.key === levelField_1; }) : 0;\n                var _loop_1 = function (t) {\n                    var data = [];\n                    node.forEach(function (value, key) {\n                        if (key !== field) {\n                            data.push.apply(data, Array.from(value).filter(function (d) { return d[0] !== field; }));\n                        }\n                    });\n                    var next = new Map();\n                    data.forEach(function (item) {\n                        if (next.has(item[0])) {\n                            var dest = next.get(item[0]);\n                            var src = item[1];\n                            var newDest = new Map();\n                            mergeTrees(dest, newDest, measures, dataField);\n                            mergeTrees(src, newDest, measures, dataField);\n                            next.set(item[0], newDest);\n                        }\n                        else {\n                            next.set(item[0], new Map(item[1]));\n                        }\n                    });\n                    var currentPath = path.slice(0, path.indexOf(m.name));\n                    next.forEach(function (value, key) {\n                        cacheData.set(createPath(key, axisSettings, currentPath.concat([key])).join('-'), value);\n                    });\n                    next.set(field, node.get(field));\n                    node = next;\n                };\n                for (var t = 0; t < depth; t++) {\n                    _loop_1(t);\n                }\n            }\n            node = node.get(m.name) || cacheData.get(path.slice(0, path.indexOf(m.name) + 1).join('-'));\n        }\n    });\n    return node;\n};\n/** @hidden */\nvar readData = function (dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures) {\n    var data = [];\n    var dataField = fields.dataField, columnsData = fields.columnsData;\n    var rowsCache = new Map();\n    rowTuples.forEach(function (row) {\n        var rowNode = membersNode(dataTree, row.members.slice(), columnsData, rowSettings, measures, dataField, rowsCache);\n        var rowColumnsNode = rowNode && rowNode.get(columnsData);\n        columnTuples.forEach(function (col) {\n            var members = col.members.slice();\n            var measure = measures[0];\n            if (members[members.length - 1].levelName === \"[Measures].[MeasuresLevel]\") {\n                var measuresMember_1 = members.pop();\n                measure = measures.find(function (m) { return String(m.name) === measuresMember_1.caption; }) || measure;\n            }\n            var colNode = rowColumnsNode && membersNode(rowColumnsNode, members, dataField, columnSettings, measures, dataField);\n            var value = '', fmtValue = '', ordinal = 0;\n            if (colNode && measure) {\n                var result = measure.aggregate.result(colNode.get(dataField));\n                value = String(result);\n                fmtValue = measure.aggregate.format(result);\n            }\n            data.push({\n                columnTuple: col,\n                data: { fmtValue: fmtValue, ordinal: ordinal, value: value },\n                rowTuple: row\n            });\n        });\n    });\n    return data;\n};\n\nvar getTopMembersTuple = function (parentFields, axesSettings) {\n    var allTuple = { members: [] };\n    parentFields.forEach(function (topField) {\n        var axis = axesSettings.find(function (a) { return a.key === topField; });\n        var caption = axis ? axis.caption : \"\";\n        var member = {\n            caption: caption,\n            children: [],\n            hasChildren: true,\n            parentName: \"\",\n            levelNum: 0,\n            levelName: caption,\n            hierarchy: topField,\n            name: caption\n        };\n        allTuple.members.push(member);\n    });\n    return allTuple;\n};\nvar sortFunc = function (descriptor, axe) {\n    return function (a, b) {\n        var order = descriptor.dir;\n        var sortableA = axe.sortValue(splitKeyValue(a[0])[1]);\n        var sortableB = axe.sortValue(splitKeyValue(b[0])[1]);\n        if (sortableA < sortableB) {\n            return order === \"asc\" ? -1 : 1;\n        }\n        if (sortableA > sortableB) {\n            return order === \"asc\" ? 1 : -1;\n        }\n        return 0;\n    };\n};\nvar mergeData = function (src, dest, exclude) {\n    src.forEach(function (srcChild, k) {\n        if (!exclude[k]) {\n            var destChild = subNode(dest, k);\n            mergeData(srcChild, destChild, exclude);\n        }\n    });\n};\nvar childrenByKeys = function (dataTree, keys, exclude) {\n    var result = [];\n    var nodeData = function (node) { return Array.from(node).filter(function (n) { return !exclude[n[0]]; }); };\n    var element = new Map(dataTree);\n    var next;\n    var _loop_1 = function (i) {\n        next = element.get(keys[i]);\n        if (next) {\n            element = new Map(next);\n        }\n        else if (i < keys.length - 1 && Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n            var curLevel_1 = [];\n            element.forEach(function (child, key) {\n                if (!exclude[key]) {\n                    curLevel_1.push.apply(curLevel_1, nodeData(new Map(child)));\n                }\n            });\n            element = new Map();\n            curLevel_1.forEach(function (item) {\n                if (element.has(item[0])) {\n                    var dest = element.get(item[0]);\n                    var src = item[1];\n                    var newDest = new Map();\n                    mergeData(dest, newDest, exclude);\n                    mergeData(src, newDest, exclude);\n                    element.set(item[0], newDest);\n                }\n                else {\n                    element.set(item[0], new Map(item[1]));\n                }\n            });\n        }\n        else if (i === 0 || i === keys.length - 1) {\n            if (Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n                result.push.apply(result, nodeData(element));\n            }\n        }\n    };\n    for (var i = 0; i < keys.length; i++) {\n        _loop_1(i);\n    }\n    return result;\n};\n/** @hidden */\nvar rootFields = function (definitions) {\n    var fields = new Set();\n    definitions.forEach(function (item) {\n        if (item.name.length === 1 && !splitKeyValue(item.name[0])[1]) {\n            fields.add(item.name[0]);\n        }\n    });\n    return fields;\n};\n/** @hidden */\nvar createTuples = function (axesSettings, definitions, dataTree, sortDescriptors, excludeFields) {\n    var parentFields = rootFields(definitions);\n    var flatMembers = [];\n    var topTuple = getTopMembersTuple(parentFields, axesSettings);\n    flatMembers.push(topTuple);\n    var _loop_2 = function (i) {\n        var currDef = definitions[i];\n        if (currDef.name.length === 1 && !currDef.expand && parentFields.has(currDef.name[0])) {\n            return \"continue\";\n        }\n        var keysToAdd = new Set(parentFields.keys());\n        var currDefMembers = [];\n        var keys = [];\n        var tuples = [];\n        var axe;\n        currDef.name.forEach(function (element, index) {\n            var _a;\n            var _b = splitKeyValue(element), field = _b[0], value = _b[1];\n            axe = axesSettings.find(function (a) { return a.key === field; });\n            if (value) {\n                keysToAdd.delete(field);\n                keys.push(element);\n                var member = {\n                    children: [],\n                    caption: value,\n                    hierarchy: field,\n                    levelNum: 1,\n                    levelName: field + \" \" + field,\n                    name: element,\n                    parentName: axe ? axe.caption : \"\"\n                };\n                currDefMembers.push(member);\n            }\n            else if (currDef.expand && currDef.name.length - 1 === index) {\n                keysToAdd.delete(element);\n                keys.push(element);\n                var children = childrenByKeys(dataTree, keys, excludeFields);\n                var descriptor = sortDescriptors.find(function (desc) { return desc.field === field; });\n                if (descriptor && descriptor.dir) {\n                    children.sort(sortFunc(descriptor, axe));\n                }\n                for (var c = 0; c < children.length; c++) {\n                    var leafValue = children[c][0];\n                    var leafTuple = { members: [] };\n                    tuples.push(leafTuple);\n                    var caption = splitKeyValue(leafValue)[1];\n                    axe = axesSettings.find(function (a) { return a.key === element; });\n                    var member = {\n                        caption: caption,\n                        children: [],\n                        levelName: element + \" \" + element,\n                        levelNum: 1,\n                        parentName: axe ? axe.caption : \"\",\n                        hierarchy: element,\n                        name: leafValue\n                    };\n                    (_a = leafTuple.members).push.apply(_a, currDefMembers);\n                    leafTuple.members.push(member);\n                }\n            }\n            else if (currDef.expand) {\n                axe = axesSettings.find(function (a) { return a.key === element; });\n                var axisCaption = axe ? axe.caption : \"\";\n                keysToAdd.delete(element);\n                keys.push(element);\n                var member = {\n                    children: [],\n                    caption: axisCaption,\n                    hierarchy: element,\n                    levelName: axisCaption,\n                    levelNum: 0,\n                    name: axisCaption,\n                    parentName: \"\"\n                };\n                currDefMembers.push(member);\n            }\n            keysToAdd.forEach(function (key) {\n                tuples.forEach(function (tuple) {\n                    axe = axesSettings.find(function (a) { return a.key === key; });\n                    var curCaption = axe ? axe.caption : \"\";\n                    var member = {\n                        children: [],\n                        hasChildren: true,\n                        caption: curCaption,\n                        hierarchy: key,\n                        levelName: curCaption,\n                        levelNum: 0,\n                        name: curCaption,\n                        parentName: \"\"\n                    };\n                    tuple.members.push(member);\n                });\n            });\n            flatMembers.push.apply(flatMembers, tuples);\n        });\n    };\n    for (var i = 0; i < definitions.length; i++) {\n        _loop_2(i);\n    }\n    return flatMembers;\n};\nvar measureToMember = function (measure) {\n    return {\n        caption: String(measure.name),\n        children: [],\n        hasChildren: false,\n        hierarchy: \"[Measures]\",\n        levelName: \"[Measures].[MeasuresLevel]\",\n        levelNum: 0,\n        name: \"[Measures].[\" + measure.name + \"]\",\n        parentName: \"\"\n    };\n};\nvar addMeasure = function (tuple, measure) {\n    var measureMember = measureToMember(measure);\n    var tupleCopy = copy(tuple);\n    tupleCopy.members.push(measureMember);\n    return tupleCopy;\n};\n/** @hidden */\nvar addMultipleMeasures = function (tuples, measures) {\n    if (measures.length < 2) {\n        return tuples;\n    }\n    var result = tuples.slice();\n    for (var i = result.length - 1; i >= 0; i--) {\n        var tuple = result[i];\n        result[i] = addMeasure(result[i], measures[0]);\n        for (var m = 1; m < measures.length; m++) {\n            var tupleWithMeasure = addMeasure(tuple, measures[m]);\n            result.splice(i + m, 0, tupleWithMeasure);\n        }\n    }\n    return reverseColumnsByMeasures(result);\n};\n/** @hidden */\nvar createLocalDataState = function (args) {\n    var _a;\n    var dataTree = args.dataTree, rowSettings = args.rowSettings, columnSettings = args.columnSettings, rowAxes = args.rowAxes, columnAxes = args.columnAxes, measures = args.measures, sort = args.sort, fields = args.fields;\n    var exclude = (_a = {}, _a[fields.columnsData] = fields.columnsData, _a[fields.dataField] = fields.dataField, _a);\n    var colTuples = columnAxes.length ?\n        createTuples(columnSettings, columnAxes, dataTree.get(fields.columnsData), sort, exclude) :\n        measures.map(function (m) { return ({ members: [measureToMember(m)] }); });\n    var columnTuples = columnAxes.length > 0 ? addMultipleMeasures(colTuples, measures) : colTuples;\n    var rowTuples = rowAxes.length ? createTuples(rowSettings, rowAxes, dataTree, sort, exclude) : [{ members: [] }];\n    var resultData = readData(dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures);\n    return {\n        columns: columnTuples,\n        data: resultData,\n        rows: rowTuples\n    };\n};\n\n/** @hidden */\nvar createFlatSchemaDimensions = function (dimensions, measures) {\n    var result = Object.keys(dimensions).map(function (dim) { return ({\n        caption: dim,\n        defaultHierarchy: dim,\n        description: '',\n        name: dim,\n        uniqueName: dim,\n        hierarchyUniqueName: dim,\n        measure: true,\n        type: 1 // https://github.com/telerik/kendo-pivotgrid-common/blob/develop/src/models/responseDiscover.ts#L12-L14\n    }); });\n    if (measures.length) {\n        result.push({\n            caption: 'Measures',\n            children: measures.map(function (m) { return ({\n                aggregator: '1',\n                caption: String(m.name),\n                defaultFormat: '',\n                description: '',\n                displayFolder: '',\n                groupName: String(m.name),\n                name: String(m.name),\n                uniqueName: String(m.name)\n            }); }),\n            type: 2,\n            description: '',\n            name: 'Measures',\n            uniqueName: '[Measures]'\n        });\n    }\n    return result;\n};\n\nvar Navigation = /** @class */ (function () {\n    function Navigation(options) {\n        this.tabIndex = 0;\n        this.root = null;\n        this.eventHandlers = {};\n        this.update = function () { };\n        this.tabIndex = options.tabIndex;\n    }\n    Object.defineProperty(Navigation.prototype, \"elements\", {\n        get: function () {\n            return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(','))) : [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Navigation.prototype, \"first\", {\n        get: function () {\n            return (this.root && this.root.querySelector(this.selectors.join(','))) || null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Navigation.prototype, \"last\", {\n        get: function () {\n            var all = this.elements;\n            return all[all.length - 1] || null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Navigation.prototype, \"current\", {\n        get: function () {\n            return this.elements.find(function (el) { return el.matches(':focus'); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Navigation.prototype.start = function (root) {\n        var _this = this;\n        this.root = root;\n        var _loop_1 = function (eventType) {\n            if (this_1.mouseEvents[eventType]) {\n                this_1.eventHandlers[eventType] = (function (ev) {\n                    var target = ev.target instanceof Element && ev.target.closest(_this.selectors.join(','));\n                    if (target) {\n                        _this.mouseEvents[eventType].call(undefined, target, _this, ev);\n                    }\n                });\n                root.addEventListener(eventType, this_1.eventHandlers[eventType]);\n            }\n        };\n        var this_1 = this;\n        for (var eventType in this.mouseEvents) {\n            _loop_1(eventType);\n        }\n        var _loop_2 = function (eventType) {\n            if (this_2.keyboardEvents[eventType]) {\n                this_2.eventHandlers[eventType] = (function (ev) {\n                    var target = ev.target instanceof Element && ev.target.closest(_this.selectors.join(','));\n                    var key = ev.key === ' ' ? 'Space' : ev.key;\n                    if (target && _this.keyboardEvents[eventType][key]) {\n                        _this.keyboardEvents[eventType][key].call(undefined, target, _this, ev);\n                    }\n                });\n                root.addEventListener(eventType, this_2.eventHandlers[eventType]);\n            }\n        };\n        var this_2 = this;\n        for (var eventType in this.keyboardEvents) {\n            _loop_2(eventType);\n        }\n    };\n    Navigation.prototype.stop = function () {\n        if (this.root) {\n            for (var eventType in this.eventHandlers) {\n                if (this.eventHandlers[eventType]) {\n                    this.root.removeEventListener(eventType, this.eventHandlers[eventType]);\n                }\n            }\n        }\n        this.root = null;\n    };\n    Navigation.prototype.focusElement = function (element, previous) {\n        if (element) {\n            if (previous) {\n                previous.removeAttribute('tabindex');\n                previous.classList.remove('k-focus');\n            }\n            element.setAttribute('tabindex', String(this.tabIndex));\n            element.focus({ preventScroll: true });\n        }\n    };\n    return Navigation;\n}());\n\nvar scrollableValuesSel = '.k-pivotgrid .k-pivotgrid-values';\nvar scrollableColumnHeaderSel = '.k-pivotgrid .k-pivotgrid-column-headers';\nvar scrollableRowHeaderSel = '.k-pivotgrid .k-pivotgrid-row-headers';\nvar emptyCellSel = '.k-pivotgrid > .k-pivotgrid-empty-cell';\nvar tableSel = 'table.k-pivotgrid-table';\nvar cellSel = '.k-pivotgrid-cell';\nvar scrollables = [scrollableValuesSel, scrollableColumnHeaderSel, scrollableRowHeaderSel].join(',');\nvar selectors$1 = [\n    emptyCellSel,\n    [scrollableColumnHeaderSel, tableSel, cellSel].join(' '),\n    [scrollableRowHeaderSel, tableSel, cellSel].join(' '),\n    [scrollableValuesSel, tableSel, cellSel].join(' ')\n];\nvar onEnter = function (target, nav, ev) {\n    var icon = target.querySelector('.k-icon, .k-svg-icon');\n    if (icon) {\n        var index_1 = nav.elements.indexOf(target);\n        nav.update = function () {\n            nav.focusElement(nav.elements[index_1], null);\n            nav.update = function () { };\n        };\n        icon.click();\n        ev.preventDefault();\n    }\n};\nvar tryScrollLeft = function (target, scrollable, elToScroll) {\n    if (target.offsetLeft < scrollable.scrollLeft) {\n        elToScroll.scrollLeft = target.offsetLeft;\n    }\n};\nvar tryScrollRight = function (target, scrollable, elToScroll) {\n    if (target.offsetLeft + target.offsetWidth > scrollable.scrollLeft + scrollable.offsetWidth &&\n        target.offsetWidth < scrollable.offsetWidth) {\n        elToScroll.scrollLeft = target.offsetLeft + target.offsetWidth - scrollable.offsetWidth;\n    }\n};\nvar tryScrollUp = function (target, scrollable, elToScroll) {\n    if (scrollable.scrollTop && target.offsetTop < scrollable.scrollTop) {\n        elToScroll.scrollTop = target.offsetTop;\n    }\n};\nvar tryScrollDown = function (target, scrollable, elToScroll) {\n    if (target.offsetTop + target.offsetHeight > scrollable.scrollTop + scrollable.offsetHeight &&\n        target.offsetHeight < scrollable.offsetHeight) {\n        elToScroll.scrollTop = target.offsetTop + target.offsetHeight - scrollable.offsetHeight;\n    }\n};\nvar scrollTo = function (target, root, scrollFunc) {\n    var elToScroll = root.querySelector(scrollableValuesSel);\n    var scrollable = target && target.closest(scrollables);\n    if (!elToScroll || !scrollable || !target) {\n        return;\n    }\n    scrollFunc.forEach(function (scroll) { return scroll(target, scrollable, elToScroll); });\n};\nvar tableMap = function (table) {\n    var rows = Array.from(table.rows);\n    var colsCount = Array.from((rows && rows[0] && rows[0].cells) || [])\n        .map(function (c) { return c.colSpan; })\n        .reduce(function (prev, cur) { return prev + cur; }, 0);\n    var map = rows.map(function () { return new Array(colsCount); });\n    rows.forEach(function (row, r) {\n        var curColSpan = 0;\n        Array.from(row.cells).forEach(function (c) {\n            for (var colSp = 0; colSp < c.colSpan; colSp++) {\n                for (var rowSp = 0; rowSp < c.rowSpan; rowSp++) {\n                    var ind = map[r + rowSp].findIndex(function (val, curInd) { return curInd >= curColSpan && !val; });\n                    map[r + rowSp][ind] = c;\n                }\n                curColSpan++;\n            }\n        });\n    });\n    return map;\n};\nvar navigationMap = function (root) {\n    var columnHeader = tableMap(root.querySelector([scrollableColumnHeaderSel, tableSel].join(' ')));\n    var rowHeader = tableMap(root.querySelector([scrollableRowHeaderSel, tableSel].join(' ')));\n    var values = tableMap(root.querySelector([scrollableValuesSel, tableSel].join(' ')));\n    var emptyCell = root.querySelector(emptyCellSel);\n    var emptyCellRow = new Array(rowHeader[0].length).fill(emptyCell);\n    var map = [];\n    for (var i = 0; i < columnHeader.length; i++) {\n        map.push(emptyCellRow.concat(columnHeader[i]));\n    }\n    for (var i = 0; i < rowHeader.length; i++) {\n        map.push(rowHeader[i].concat(values[i]));\n    }\n    return map;\n};\nvar getTargetPos = function (map, target) {\n    for (var r = 0; r < map.length; r++) {\n        for (var c = 0; c < map[r].length; c++) {\n            if (map[r][c] === target) {\n                return [r, c];\n            }\n        }\n    }\n    return [-1, -1];\n};\nvar ctrlKey = function (ev) { return ev.ctrlKey || ev.metaKey; };\nvar cellAt = function (root, target, pos) {\n    var map = navigationMap(root);\n    var targetPos = getTargetPos(map, target);\n    var nextPos = [targetPos[0] + pos[0], targetPos[1] + pos[1]];\n    var next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n    while (next && next === target) {\n        nextPos = [nextPos[0] + pos[0], nextPos[1] + pos[1]];\n        next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n    }\n    return next;\n};\nvar keyboardEvents$1 = {\n    keydown: {\n        ArrowLeft: function (target, nav, ev) {\n            ev.preventDefault();\n            var next = cellAt(nav.root, target, [0, -1]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n        },\n        ArrowRight: function (target, nav, ev) {\n            ev.preventDefault();\n            var next = cellAt(nav.root, target, [0, 1]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollDown, tryScrollUp]);\n        },\n        ArrowUp: function (target, nav, ev) {\n            ev.preventDefault();\n            var next = cellAt(nav.root, target, [-1, 0]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n        },\n        ArrowDown: function (target, nav, ev) {\n            ev.preventDefault();\n            var next = cellAt(nav.root, target, [1, 0]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollUp, tryScrollDown]);\n        },\n        o: function (_target, nav, _ev) {\n            if (!nav.root) {\n                return;\n            }\n            var next = nav.root.nextElementSibling;\n            if (next && next instanceof HTMLElement && next.matches('div.k-pivotgrid-configurator-button')) {\n                next.click();\n                setTimeout(function () {\n                    if (nav.root.parentNode) {\n                        var confHeader = nav.root.parentNode.querySelector('.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview');\n                        if (confHeader instanceof HTMLElement) {\n                            confHeader.setAttribute('tabindex', String(nav.tabIndex));\n                            confHeader.focus();\n                        }\n                    }\n                }, 0);\n            }\n        },\n        Enter: onEnter,\n        Space: onEnter,\n        Home: function (target, nav, ev) {\n            var map = navigationMap(nav.root);\n            var ctrl = ctrlKey(ev);\n            var row = ctrl ? map[0] : (map.find(function (ro) { return Boolean(ro.find(function (x) { return x === target; })); }) || []);\n            var next = row[0];\n            if (next) {\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n                ev.preventDefault();\n            }\n        },\n        End: function (target, nav, ev) {\n            var map = navigationMap(nav.root);\n            var ctrl = ctrlKey(ev);\n            var row = ctrl ? map[map.length - 1] : (map.find(function (ro) { return Boolean(ro.find(function (x) { return x === target; })); }) || []);\n            var next = row && row[row.length - 1] || null;\n            if (next) {\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollUp, tryScrollDown]);\n                ev.preventDefault();\n            }\n        }\n    }\n};\nvar mouseEvents$1 = {\n    click: function (target, nav) {\n        if (target && target instanceof HTMLElement) {\n            var prev = nav.elements.find(function (c) { return c.hasAttribute('tabindex'); }) || null;\n            nav.focusElement(target, prev);\n        }\n    }\n};\n/**\n * The PivotGrid keyboard navigation functionality.\n *\n * Usage:\n *\n * On Initialize\n * const navigation = new PivotGridNavigation({ tabindex: 0 });\n *\n * Turn on\n * navigation.start(rootDomElement);\n *\n * On After Update\n * navigation.update();\n *\n * On Destroy / Turn off\n * navigation.stop();\n */\nvar PivotGridNavigation = /** @class */ (function (_super) {\n    __extends(PivotGridNavigation, _super);\n    function PivotGridNavigation() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.selectors = selectors$1;\n        _this.mouseEvents = mouseEvents$1;\n        _this.keyboardEvents = keyboardEvents$1;\n        return _this;\n    }\n    return PivotGridNavigation;\n}(Navigation));\n\nvar selectors = [\n    '.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview',\n    '.k-pivotgrid-configurator-content .k-chip',\n    '.k-pivotgrid-configurator-actions button'\n];\nvar onEscape = function (_target, nav, ev) {\n    if (ev.target instanceof HTMLElement) {\n        if (nav.root) {\n            var pivot = nav.root.previousElementSibling;\n            var confButton = nav.root.nextElementSibling;\n            var pivotCell = Array.from(pivot instanceof HTMLElement ? pivot.querySelectorAll('[tabindex]') : []).find(function (c) { return c.tabIndex >= 0; });\n            if (pivotCell instanceof HTMLElement) {\n                pivotCell.focus();\n                if (confButton instanceof HTMLElement) {\n                    confButton.click();\n                }\n            }\n        }\n    }\n};\nvar navigate = function (target, nav, ev, dir) {\n    ev.preventDefault();\n    var all = nav.elements;\n    var index = all.indexOf(target) + dir;\n    if (index < 0) {\n        index = all.length - 1;\n    }\n    nav.focusElement(all[index % all.length], target);\n};\nvar onDelete = function (target, nav, ev) {\n    if (ev.target instanceof HTMLElement) {\n        var deleteButton = ev.target.querySelector('.k-icon.k-i-x-circle, .k-svg-icon.k-svg-i-x-circle');\n        if (deleteButton instanceof HTMLElement) {\n            ev.preventDefault();\n            navigate(target, nav, ev, -1);\n        }\n    }\n};\nvar keyboardEvents = {\n    keydown: {\n        Tab: function (target, nav, ev) {\n            navigate(target, nav, ev, ev.shiftKey ? -1 : 1);\n        },\n        Escape: onEscape,\n        Delete: onDelete,\n        Backspace: onDelete\n    }\n};\nvar mouseEvents = {\n    click: function (target, nav) {\n        if (target && target instanceof HTMLElement) {\n            var prev = nav.elements.find(function (c) { return c.hasAttribute('tabindex'); }) || null;\n            nav.focusElement(target, prev);\n        }\n    }\n};\n/**\n * The PivotGrid Configurator keyboard navigation functionality.\n *\n * Usage:\n *\n * On Initialize\n * const navigation = new ConfiguratorNavigation({ tabindex: 0 });\n *\n * Turn on\n * navigation.start(rootDomElement);\n *\n * On After Update\n * navigation.update();\n *\n * On Destroy / Turn off\n * navigation.stop();\n */\nvar ConfiguratorNavigation = /** @class */ (function (_super) {\n    __extends(ConfiguratorNavigation, _super);\n    function ConfiguratorNavigation() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.selectors = selectors;\n        _this.mouseEvents = mouseEvents;\n        _this.keyboardEvents = keyboardEvents;\n        return _this;\n    }\n    return ConfiguratorNavigation;\n}(Navigation));\n\nexport { discoverCommands as A, mergeTrees as B, parseResponse as C, readData as D, rootFields as E, setFilter as F, setSort as G, ConfiguratorNavigation as H, PIVOT_CONFIGURATOR_ACTION as I, PivotGridNavigation as P, createLocalDataState as a, averageAggregate as b, createDataTree as c, maxAggregate as d, countAggregate as e, fetchData as f, createDataState as g, fetchDiscover as h, headersReducer as i, toTree as j, toColumns as k, toRows as l, minAggregate as m, addKPI as n, addMultipleMeasures as o, buildKPIMeasures as p, cloneDataTree as q, compareAxes as r, sumAggregate as s, toData as t, configuratorReducer as u, createAxisDescriptors as v, createDiscoverBody as w, createFlatSchemaDimensions as x, createRequestBody as y, createTuples as z };\nexport { __meta__ };"]}