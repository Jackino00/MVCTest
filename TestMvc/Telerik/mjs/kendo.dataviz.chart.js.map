{"version":3,"sources":["raw-mjs/kendo.dataviz.chart.js"],"names":["chartExport","constants","DomEventsBuilder","InstanceObserver","defined","Chart","getField","SeriesBinder","grep","inArray","$","kendo","window","dataviz","Widget","ui","ChartBreadcrumb","extend","init","element","options","fn","call","this","chart","Error","_attachChartEvents","_renderBreadcrumb","notify","events","name","rootItem","type","icon","text","showIcon","destroy","breadcrumb","unbind","_onChartDrilldown","_onChartDrilldownLevelChange","deferred","resetDrilldownLevel","getKendoChart","setTimeout","bind","breadcrumbElement","append","Breadcrumb","items","e","_onBreadcrumbClick","level","findIndex","item","isDefaultPrevented","point","category","slice","plugin","jQuery","__meta__","id","description","depends","features","undefined$1","deepExtend","NS","Class","outerWidth","_outerWidth","outerHeight","_outerHeight","DataSource","data","isArray","Array","template","encode","htmlEncode","MOUSELEAVE_NS","constants$1","LEGEND_ITEM_CLICK","LEGEND_ITEM_HOVER","LEGEND_ITEM_LEAVE","SERIES_CLICK","SERIES_HOVER","SERIES_OVER","SERIES_LEAVE","PANE_RENDER","PLOT_AREA_CLICK","PLOT_AREA_HOVER","PLOT_AREA_LEAVE","DRAG","DRAG_END","DRAG_START","DRILLDOWN","DRILLDOWN_LEVEL_CHANGE","ZOOM_START","ZOOM","ZOOM_END","SELECT_START","SELECT","SELECT_END","RENDER","DOCUMENT_ELEMENT","document","documentElement","CHANGE","DATABOUND","LEAVE","PIE","DONUT","FUNNEL","Observable","register","create","UserEvents","global","multiTouch","fastTap","ChartInstanceObserver","ConvertClass","handlerMap","showTooltip","hideTooltip","legendItemClick","render","drilldown","Chart$1","userOptions","dataSource","wrapper","_attachEvents","_seriesVisibility","SeriesVisibilityState","_initDataSource","_drilldownState","_showWatermarkOverlay","renderAs","theme","axisDefaults","chartArea","legend","categoryAxis","autoBind","seriesDefaults","series","seriesColors","tooltip","transitions","valueAxis","plotArea","title","xAxis","yAxis","panes","pannable","zoomable","noData","messages","refresh","instance","_instance","applyDefaults","applySeriesColors","_bindSeries","_bindCategories","trigger","_redraw","getSize","dimensions","redraw","paneName","_size","setOptions","_setEvents","applyOptions","_getThemeOptions","_tooltip","_sourceSeries","setDataSource","_hasDataSource","_onDataChanged","updateMouseMoveHandler","_dataChangeHandler","_hasData","fetch","off","_destroyNoData","_destroyCrosshairTooltips","findPaneByName","_plotArea","idx","length","ChartPane","findPaneByIndex","findSeries","callback","srcSeries","ChartSeries","findSeriesByName","_createSeries","findSeriesByIndex","index","exportVisual","visual","width","height","originalChartArea","_originalOptions","model","_getModel","renderVisual","notifyRender","triggerPaneRender","state","args","sender","seriesOptions","_seriesOptions","on","_mouseleave","target","relatedTarget","closest","handlingTap","hideElements","keepTooltipOpen","autoHide","themeName","SASS_THEMES","indexOf","toLowerCase","autoTheme","themes","_initChart","_createChart","themeOptions","observer","rtl","_isRtl","_onInit","_initNoData","_initTooltip","tooltips","_crosshairTooltips","key","_getCrosshairTooltip","CrosshairTooltip","_showTooltip","crosshair","axisName","axisIndex","show","_hideTooltip","hide","_onRender","_copyMembers","surface","_model","_highlight","_selections","_pannable","_zoomSelection","_mousewheelZoom","requiresHandlers","names","_events","_createTooltip","_tooltipleave","_onLegendItemClick","_legendItemClick","seriesIndex","pointIndex","currentSeries","_hasInactiveOpacity","_activeChartInstance","_updateSeriesOpacity","_applySeriesOpacity","children","visible","pointVisibility","save","_noTransitionsRedraw","Tooltip","_onDrilldown","value","drilldownSeriesFactory","result","Promise","then","resolved","_onDrilldownData","drilldownSeries","Object","assign","push","_bindData","seriesIx","groupedSeries","seriesLength","view","grouped","group","processedSeries","seriesVisibility","read","_isBindable","groupSeries","concat","applyByGroup","applyByIndex","_noData","noDataWrap","appendTo","noDataContent","templateFn","html","remove","_noDataContent","total","fontLoaded","groupIx","seriesData","_groupIx","axisIx","axis","categoriesData","definitions","_bindCategoryAxis","categoryIx","row","count","field","categories","dataItems","bindCategoryAxisFromSeries","i","valueFields","current","support","isRtl","css","proxyMembers","createProxyMember","apply","arguments","nameTemplate","seriesClone","legacyTemplate","groupNameTemplate","dataLength","visibleInLegend","logToConsole","isFunction","color","_groupValue","ExportMixin","PDFMixin","groups","action","persistSeriesVisibility","saveState","geom","geometry","chartElement","font","border","opacity","attr","applyStylesFromKendoAttributes","move","mobileScrollerSelector","format","_mobileScroller","downEvent","applyEventMap","guid","_closeTooltipHandler","_closeTooltip","_clearShowTimeout","animation","duration","sharedTemplate","colspan","categoryText","points","content","colorMarker","nameColumn","sharedTemplateIterator","categoryFormat","offset","anchor","_offset","top","left","_ensureElement","body","stop","animate","showTimeout","clearTimeout","getAnchor","size","align","x","y","horizontal","vertical","_measure","zoomLevel","viewport","scrollTop","pageYOffset","scrollLeft","pageXOffset","movable","scale","transform","Point","_fit","fakeContainer","style","normalizeStyle","toggleClass","className","shared","_sharedContent","_pointContent","find","empty","forceHide","_hideElement","is","preventDefault","contains","fadeOut","always","toString","tooltipTemplate","dataItem","percentage","runningTotal","low","high","xLow","xHigh","yLow","yHigh","formatValue","viewPortSize","output","addClass","pane","_chart","_pane","chartsVisual","chartContainer","groupSeriesByPane","_options","filter","_points","pointsBySeriesIndex","_filterPoints","categoryField","seriesCategoryAxis","_clearFields","findPoint","toggleHighlight","elements","togglePointsHighlight","toggleVisibility","_filterData","_series"],"mappings":"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","file":"kendo.dataviz.chart.js","sourcesContent":["import './kendo.breadcrumb.js';\nimport './kendo.data.js';\nimport './kendo.dataviz.core.js';\nimport './kendo.dataviz.themes.js';\nimport './kendo.drawing.js';\nimport './kendo.userevents.js';\nimport './kendo.icons.js';\nimport { a as chartExport, d as constants, D as DomEventsBuilder, I as InstanceObserver, e as defined, C as Chart, g as getField, S as SeriesBinder, f as grep, j as inArray } from './kendo.charts.cmn.chunk.js';\n\n(function($, undefined$1) {\n\n    const kendo = window.kendo;\n    const dataviz = kendo.dataviz;\n    const Widget = kendo.ui.Widget;\n\n    const ChartBreadcrumb = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            if (!options.chart) {\n                throw new Error('ChartBreadcrumb: No Chart instance supplied as `options.chart`');\n            }\n\n            this._attachChartEvents();\n            this._renderBreadcrumb();\n\n            kendo.notify(this, dataviz.ui);\n        },\n\n        events: [],\n\n        options: {\n            name: \"ChartBreadcrumb\",\n            rootItem: {\n                type: 'rootitem',\n                icon: 'home',\n                text: 'Home',\n                showIcon: true\n            }\n        },\n\n        destroy: function() {\n            if (this.breadcrumb) {\n                this.breadcrumb.destroy();\n                this.breadcrumb = null;\n            }\n\n            if (this.chart) {\n                this.chart.unbind('drilldown', this._onChartDrilldown);\n                this.chart.unbind('drilldownLevelChange', this._onChartDrilldownLevelChange);\n                this.chart = null;\n            }\n\n            Widget.fn.destroy.call(this);\n        },\n\n        _attachChartEvents(deferred) {\n            const options = this.options;\n\n            if (typeof options.chart.resetDrilldownLevel === 'function') {\n                this.chart = options.chart;\n            } else if (typeof options.chart === 'string') {\n                this.chart = $(options.chart).getKendoChart() || $('#' + options.chart).getKendoChart();\n\n                if (!this.chart && !deferred) {\n                    setTimeout(() => this._attachChartEvents(true));\n                    return;\n                }\n            } else {\n                throw new Error('ChartBreadcrumb: `options.chart` must be a Chart instance, element ID or a selector');\n            }\n\n            this._onChartDrilldown = this._onChartDrilldown.bind(this);\n            this.chart.bind('drilldown', this._onChartDrilldown);\n\n            this._onChartDrilldownLevelChange = this._onChartDrilldownLevelChange.bind(this);\n            this.chart.bind('drilldownLevelChange', this._onChartDrilldownLevelChange);\n        },\n\n        _renderBreadcrumb: function() {\n            const breadcrumbElement = $('<nav />');\n            this.element.append(breadcrumbElement);\n            this.breadcrumb = new kendo.ui.Breadcrumb(breadcrumbElement, {\n                items: [this.options.rootItem]\n            });\n\n            this.breadcrumb.bind('click', e => this._onBreadcrumbClick(e));\n        },\n\n        _onBreadcrumbClick: function(e) {\n            if (!this.breadcrumb || !this.chart) {\n                return;\n            }\n\n            let items = this.breadcrumb.items();\n            const level = items.findIndex((item) => item === e.item);\n\n            const chart = this.chart;\n            chart.resetDrilldownLevel(level);\n        },\n\n        _onChartDrilldown: function(e) {\n            if (!this.breadcrumb || e.isDefaultPrevented()) {\n                return;\n            }\n\n            this.breadcrumb.items([\n                ...this.breadcrumb.items(),\n                { type: 'item', text: e.point.category }\n            ]);\n        },\n\n        _onChartDrilldownLevelChange: function(e) {\n            if (!this.breadcrumb) {\n                return;\n            }\n\n            let items = this.breadcrumb.items();\n            items = items.slice(0, e.level + 1);\n            this.breadcrumb.items(items);\n        }\n    });\n\n    dataviz.ui.plugin(ChartBreadcrumb);\n\n})(window.kendo.jQuery);\n\nconst __meta__ = {\n    id: \"dataviz.chart\",\n    name: \"Chart\",\n    category: \"dataviz\",\n    description: \"The Chart widget uses modern browser technologies to render high-quality data visualizations in the browser.\",\n    depends: [\"data\", \"userevents\", \"drawing\", \"dataviz.core\", \"dataviz.themes\", \"breadcrumb\", \"charts.cmn.chunk\"],\n    features: [{\n        id: \"dataviz.chart-pdf-export\",\n        name: \"PDF export\",\n        description: \"Export Chart as PDF\",\n        depends: [ \"pdf\" ]\n    }]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo;\n\n    kendo.dataviz = kendo.dataviz || {};\n    kendo.deepExtend(kendo.dataviz, kendo.deepExtend({}, chartExport));\n\n    var NS = \".kendoChart\";\n    var Class = kendo.Class;\n    var outerWidth = kendo._outerWidth;\n    var outerHeight = kendo._outerHeight;\n    var dataviz = kendo.dataviz;\n    var Widget = kendo.ui.Widget;\n    var DataSource = kendo.data.DataSource;\n    var deepExtend = kendo.deepExtend;\n    var isArray = Array.isArray;\n    var extend = $.extend;\n    var template = kendo.template;\n    var encode = kendo.htmlEncode;\n\n    var MOUSELEAVE_NS = \"mouseleave\" + NS;\n    var constants$1 = constants;\n    var AXIS_LABEL_CLICK = \"axisLabelClick\";\n    var LEGEND_ITEM_CLICK = constants$1.LEGEND_ITEM_CLICK;\n    var LEGEND_ITEM_HOVER = constants$1.LEGEND_ITEM_HOVER;\n    var LEGEND_ITEM_LEAVE = constants$1.LEGEND_ITEM_LEAVE;\n    var SERIES_CLICK = constants$1.SERIES_CLICK;\n    var SERIES_HOVER = constants$1.SERIES_HOVER;\n    var SERIES_OVER = constants$1.SERIES_OVER;\n    var SERIES_LEAVE = constants$1.SERIES_LEAVE;\n    var PANE_RENDER = constants$1.PANE_RENDER;\n    var PLOT_AREA_CLICK = constants$1.PLOT_AREA_CLICK;\n    var PLOT_AREA_HOVER = constants$1.PLOT_AREA_HOVER;\n    var PLOT_AREA_LEAVE = constants$1.PLOT_AREA_LEAVE;\n    var DRAG = constants$1.DRAG;\n    var DRAG_END = constants$1.DRAG_END;\n    var DRAG_START = constants$1.DRAG_START;\n    var DRILLDOWN = constants$1.DRILLDOWN;\n    var DRILLDOWN_LEVEL_CHANGE = \"drilldownLevelChange\";\n    var ZOOM_START = constants$1.ZOOM_START;\n    var ZOOM = constants$1.ZOOM;\n    var ZOOM_END = constants$1.ZOOM_END;\n    var SELECT_START = constants$1.SELECT_START;\n    var SELECT = constants$1.SELECT;\n    var SELECT_END = constants$1.SELECT_END;\n    var RENDER = constants$1.RENDER;\n    var NOTE_CLICK = \"noteClick\";\n    var NOTE_HOVER = \"noteHover\";\n    var NOTE_LEAVE = \"noteLeave\";\n    var DOCUMENT_ELEMENT = $(document.documentElement);\n\n    var CHANGE = \"change\";\n    var DATABOUND = \"dataBound\";\n    var LEAVE = \"leave\";\n    var MOUSEDOWN = \"down\";\n\n    var VALUE = \"value\";\n    var PIE = constants$1.PIE;\n    var DONUT = constants$1.DONUT;\n    var FUNNEL = constants$1.FUNNEL;\n\n    var Observable = kendo.Observable;\n    var TOOLTIP_ANIMATION_DURATION = 150;\n    var TOOLTIP_SHOW_DELAY = 100;\n    var TOOLTIP_INVERSE = \"k-chart-tooltip-inverse\";\n    var SHARED_TOOLTIP_CLASS = \"k-chart-shared-tooltip\";\n    var RTL = \"rtl\";\n\n    DomEventsBuilder.register({\n        create: function(element, events) {\n             return new kendo.UserEvents(element, deepExtend({\n                 global: true,\n                 multiTouch: true,\n                 fastTap: true\n             }, events));\n        }\n    });\n    let ConvertedObserver = kendo.ConvertClass(InstanceObserver);\n    var ChartInstanceObserver = ConvertedObserver.extend({\n        handlerMap: {\n            showTooltip: '_showTooltip',\n            hideTooltip: '_hideTooltip',\n            legendItemClick: '_onLegendItemClick',\n            render: '_onRender',\n            init: '_onInit',\n            drilldown: '_onDrilldown'\n        }\n    });\n\n    var Chart$1 = Widget.extend({\n        init: function(element, userOptions) {\n            var dataSource;\n\n            kendo.destroy(element);\n\n            Widget.fn.init.call(this, element);\n\n            if (userOptions) {\n                dataSource = userOptions.dataSource;\n                delete userOptions.dataSource;\n            }\n\n            this.options = deepExtend({}, this.options, userOptions);\n\n            this.wrapper = this.element;\n            this._attachEvents();\n\n            if (userOptions) {\n                userOptions.dataSource = dataSource;\n            }\n\n            this._seriesVisibility = new SeriesVisibilityState();\n\n            this.bind(this.events, this.options);\n            this._initDataSource(userOptions);\n\n            this._drilldownState = [];\n\n            kendo.notify(this, dataviz.ui);\n\n            if (this._showWatermarkOverlay) {\n                this._showWatermarkOverlay(this.wrapper[0]);\n            }\n        },\n\n        events: [\n            DATABOUND,\n            DRILLDOWN,\n            DRILLDOWN_LEVEL_CHANGE,\n            SERIES_CLICK,\n            SERIES_HOVER,\n            SERIES_OVER,\n            SERIES_LEAVE,\n            AXIS_LABEL_CLICK,\n            LEGEND_ITEM_CLICK,\n            LEGEND_ITEM_HOVER,\n            LEGEND_ITEM_LEAVE,\n            PANE_RENDER,\n            PLOT_AREA_CLICK,\n            PLOT_AREA_HOVER,\n            PLOT_AREA_LEAVE,\n            DRAG_START,\n            DRAG,\n            DRAG_END,\n            ZOOM_START,\n            ZOOM,\n            ZOOM_END,\n            SELECT_START,\n            SELECT,\n            SELECT_END,\n            NOTE_CLICK,\n            NOTE_HOVER,\n            NOTE_LEAVE,\n            RENDER\n        ],\n\n        options: {\n            name: \"Chart\",\n            renderAs: \"\",\n            theme: \"sass\",\n            axisDefaults: {},\n            chartArea: {},\n            legend: {},\n            categoryAxis: {},\n            autoBind: true,\n            seriesDefaults: {},\n            series: [],\n            seriesColors: null,\n            tooltip: {},\n            transitions: true,\n            valueAxis: {},\n            plotArea: {},\n            title: {},\n            xAxis: {},\n            yAxis: {},\n            panes: [{}],\n            pannable: false,\n            zoomable: false,\n            noData: true,\n            messages: {\n                noData: \"No data available\"\n            }\n        },\n\n        items: function() {\n            return $();\n        },\n\n        refresh: function() {\n            var chart = this;\n            var instance = chart._instance;\n            instance.applyDefaults(chart.options);\n            instance.applySeriesColors();\n\n            chart._bindSeries();\n            chart._bindCategories();\n\n            chart.trigger(DATABOUND);\n            chart._redraw();\n        },\n\n        getSize: function() {\n            return kendo.dimensions(this.element);\n        },\n\n        redraw: function(paneName) {\n            this._size = null;\n            this._instance.redraw(paneName);\n        },\n\n        setOptions: function(options) {\n            var chart = this,\n                dataSource = options.dataSource;\n\n            delete options.dataSource;\n\n            Widget.fn._setEvents.call(chart, options);\n\n            this._instance.applyOptions(options, this._getThemeOptions(options));\n            this.options = this._instance.options;\n            this._tooltip.setOptions(this.options.tooltip);\n            this._seriesVisibility.setOptions(this.options);\n            this._sourceSeries = null;\n\n            if (dataSource) {\n                chart.setDataSource(dataSource);\n            }\n\n            if (chart._hasDataSource) {\n                chart._onDataChanged();\n            } else {\n                chart._bindCategories();\n                chart.redraw();\n            }\n\n            chart._instance.updateMouseMoveHandler();\n\n        },\n\n        setDataSource: function(dataSource) {\n            var chart = this;\n\n            chart.dataSource.unbind(CHANGE, chart._dataChangeHandler);\n            chart.dataSource = dataSource = DataSource.create(dataSource);\n            chart._hasDataSource = true;\n            chart._hasData = false;\n\n            dataSource.bind(CHANGE, chart._dataChangeHandler);\n\n            if (chart.options.autoBind) {\n                dataSource.fetch();\n            }\n        },\n\n        destroy: function() {\n            var chart = this,\n                dataSource = chart.dataSource;\n\n            chart.element.off(NS);\n\n            if (dataSource) {\n                dataSource.unbind(CHANGE, chart._dataChangeHandler);\n            }\n\n            if (chart._instance) {\n                chart._instance.destroy();\n                delete this._instance;\n            }\n\n            if (this._tooltip) {\n                this._tooltip.destroy();\n                delete this._tooltip;\n            }\n\n            this._destroyNoData();\n\n            this._destroyCrosshairTooltips();\n\n            Widget.fn.destroy.call(chart);\n        },\n\n        findPaneByName: function(name) {\n            var panes = this._plotArea.panes;\n\n            for (var idx = 0; idx < panes.length; idx++) {\n                if (panes[idx].options.name === name) {\n                    return new ChartPane(this, panes[idx]);\n                }\n            }\n        },\n\n        findPaneByIndex: function(idx) {\n            var panes = this._plotArea.panes;\n            if (panes[idx]) {\n                return new ChartPane(this, panes[idx]);\n            }\n        },\n\n        findSeries: function(callback) {\n            var plotArea = this._plotArea;\n            var series = plotArea.srcSeries || plotArea.series;\n            for (var idx = 0; idx < series.length; idx++) {\n                if (callback(series[idx])) {\n                    return new ChartSeries(this, series[idx]);\n                }\n            }\n        },\n\n        findSeriesByName: function(name) {\n            return this._createSeries({ name: name });\n        },\n\n        findSeriesByIndex: function(index) {\n            return this._createSeries({ index: index });\n        },\n\n        exportVisual: function(options) {\n            var instance = this._instance;\n            if (!instance) {\n                return;\n            }\n\n            var visual;\n\n            //TO DO: support for setting any options. already available in kendo-charts\n            if (options && (options.width || options.height)) {\n                var chartArea = instance.options.chartArea;\n                var originalChartArea = instance._originalOptions.chartArea;\n\n                deepExtend(chartArea, options);\n\n                var model = instance._getModel();\n\n                chartArea.width = originalChartArea.width;\n                chartArea.height = originalChartArea.height;\n\n                model.renderVisual();\n\n                triggerPaneRender(model._plotArea.panes);\n\n                visual = model.visual;\n            } else {\n                visual = instance.exportVisual();\n            }\n\n            return visual;\n        },\n\n        resetDrilldownLevel(level) {\n            level = level || 0;\n            const state = this._drilldownState;\n            if (!state || level < 0 || level > state.length - 1) {\n                return;\n            }\n\n            const args = {\n                level,\n                sender: this\n            };\n            this.trigger(DRILLDOWN_LEVEL_CHANGE, args);\n\n            this.options.series = this._drilldownState[level];\n            this._drilldownState = this._drilldownState.slice(0, level);\n\n            this._bindCategories();\n            this._redraw();\n        },\n\n        _createSeries: function(options) {\n            var seriesOptions = this._seriesOptions(options);\n            if (seriesOptions) {\n                return new ChartSeries(this, seriesOptions);\n            }\n        },\n\n        _seriesOptions: function(options) {\n            var plotArea = this._plotArea;\n            var series = plotArea.srcSeries || plotArea.series;\n            var seriesOptions;\n\n            if (defined(options.index)) {\n                seriesOptions = series[options.index];\n            } else if (defined(options.name)) {\n                for (var idx = 0; idx < series.length; idx++) {\n                    if (series[idx].name === options.name) {\n                        seriesOptions = series[idx];\n                        break;\n                    }\n                }\n            }\n\n            return seriesOptions;\n        },\n\n        _attachEvents: function() {\n             this.element.on(MOUSELEAVE_NS, this._mouseleave.bind(this));\n        },\n\n        _mouseleave: function(e) {\n            var instance = this._instance;\n            var tooltip = this._tooltip;\n            var target = e.relatedTarget;\n\n            if (!(target && $(target).closest(tooltip.element).length) && instance && !instance.handlingTap) {\n                instance.hideElements({\n                    keepTooltipOpen: !tooltip.options.autoHide\n                });\n            }\n        },\n\n        _getThemeOptions: function(userOptions) {\n            var themeName = (userOptions || {}).theme;\n\n            if (themeName && dataviz.SASS_THEMES.indexOf(themeName.toLowerCase()) !== -1) {\n                return dataviz.autoTheme().chart;\n            }\n\n            if (defined(themeName)) {\n                var themes = dataviz.ui.themes || {};\n                var theme = themes[themeName] || themes[themeName.toLowerCase()] || {};\n                return theme.chart || {};\n            }\n        },\n\n        _initChart: function() {\n            this._createChart(this.options, this._getThemeOptions(this.options));\n            this.options = this._instance.options;\n            this._seriesVisibility.setOptions(this.options);\n        },\n\n        _createChart: function(options, themeOptions) {\n            this._instance = new Chart(this.element[0], options, themeOptions, {\n                observer: new InstanceObserver(this, {\n                    showTooltip: '_showTooltip',\n                    hideTooltip: '_hideTooltip',\n                    legendItemClick: '_onLegendItemClick',\n                    render: '_onRender',\n                    init: '_onInit',\n                    drilldown: '_onDrilldown'\n                }),\n                sender: this,\n                rtl: this._isRtl()\n            });\n        },\n\n        _onInit: function(e) {\n            this._instance = e.sender;\n        },\n\n        _initDataSource: function(userOptions) {\n            var chart = this,\n                dataSource = (userOptions || {}).dataSource;\n\n            chart._dataChangeHandler = chart._onDataChanged.bind(chart);\n\n            chart.dataSource = DataSource\n                .create(dataSource)\n                .bind(\"change\", chart._dataChangeHandler);\n\n            chart._bindCategories();\n\n            if (dataSource) {\n                chart._hasDataSource = true;\n            }\n\n            this._initNoData();\n            this._initChart();\n            this._initTooltip();\n\n            if (dataSource) {\n                if (chart.options.autoBind) {\n                    chart.dataSource.fetch();\n                }\n            }\n        },\n\n        _destroyCrosshairTooltips: function() {\n            var tooltips = this._crosshairTooltips;\n            if (tooltips) {\n                for (var key in tooltips) {\n                    tooltips[key].destroy();\n                }\n            }\n            this._crosshairTooltips = {};\n        },\n\n        _getCrosshairTooltip: function(name, index) {\n            var tooltips = this._crosshairTooltips = this._crosshairTooltips || {};\n            var key = name + index;\n            var tooltip = tooltips[key];\n            if (!tooltip) {\n                tooltip = tooltips[key] = new CrosshairTooltip(this.element);\n            }\n            return tooltip;\n        },\n\n        _showTooltip: function(e) {\n            if (e.crosshair) {\n                var tooltip = this._getCrosshairTooltip(e.axisName, e.axisIndex);\n                tooltip.show(e);\n            } else if (this._tooltip) {\n                this._tooltip.show(e);\n            }\n        },\n\n        _hideTooltip: function(e) {\n            if (e.crosshair) {\n                 var tooltip = this._getCrosshairTooltip(e.axisName, e.axisIndex);\n                 tooltip.hide();\n            } else if (this._tooltip) {\n                this._tooltip.hide();\n            }\n        },\n\n        _onRender: function(e) {\n            this._destroyCrosshairTooltips();\n            this._copyMembers(e.sender);\n            if (!this._hasDataSource || this._hasData || !this.options.autoBind) {\n                this.trigger(RENDER);\n            }\n        },\n\n        _copyMembers: function(instance) {\n            this.options = instance.options;\n            this._originalOptions = instance._originalOptions;\n            this.surface = instance.surface;\n            this._plotArea = instance._plotArea;\n            this._model = instance._model;\n            this._highlight = instance._highlight;\n            this._selections = instance._selections;\n            this._pannable = instance._pannable;\n            this._zoomSelection = instance._zoomSelection;\n            this._mousewheelZoom = instance._mousewheelZoom;\n        },\n\n        requiresHandlers: function(names) {\n           var events = this._events;\n           for (var idx = 0; idx < names.length; idx++) {\n               if (defined(events[names[idx]])) {\n                   return true;\n               }\n           }\n        },\n\n        _initTooltip: function() {\n            this._tooltip = this._createTooltip();\n\n            this._tooltip.bind(LEAVE, this._tooltipleave.bind(this));\n        },\n\n        _onLegendItemClick: function(e) {\n            if (!this.trigger(LEGEND_ITEM_CLICK, e)) {\n                this._legendItemClick(e.seriesIndex, e.pointIndex);\n            }\n        },\n\n        _legendItemClick: function(seriesIndex, pointIndex) {\n            var chart = this._instance,\n                plotArea = chart._plotArea,\n                currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];\n\n            if (chart._hasInactiveOpacity() && chart._activeChartInstance) {\n                chart._updateSeriesOpacity(null, true);\n                chart._applySeriesOpacity(chart._activeChartInstance.children, null, true);\n                chart._activeChartInstance = null;\n            }\n\n            if ($.inArray(currentSeries.type, [PIE, DONUT, FUNNEL]) >= 0) {\n                var point = currentSeries.data[pointIndex];\n                if (point && defined(point.visible)) {\n                    point.visible = !point.visible;\n                } else {\n                    var pointVisibility = currentSeries.pointVisibility = currentSeries.pointVisibility || {};\n                    var visible = pointVisibility[pointIndex];\n                    pointVisibility[pointIndex] = defined(visible) ? !visible : false;\n                }\n            } else {\n                currentSeries.visible = !currentSeries.visible;\n                this._seriesVisibility.save(currentSeries);\n            }\n\n            chart._noTransitionsRedraw();\n        },\n\n        _createTooltip: function() {\n            return new Tooltip(this.element, extend({}, this.options.tooltip, {\n                rtl: this._isRtl()\n            }));\n        },\n\n        _tooltipleave: function() {\n            if (this._instance) {\n                this._instance.hideElements();\n            }\n        },\n\n        _onDrilldown: function(e) {\n            const { series, value } = e;\n\n            if (series.drilldownSeriesFactory) {\n                const result = series.drilldownSeriesFactory(value);\n\n                if (!result) {\n                    return;\n                } else if (result instanceof Promise) {\n                    result.then((resolved) => this._onDrilldownData(e, resolved));\n                } else {\n                    this._onDrilldownData(e, result);\n                }\n            } else if (typeof value === 'object') {\n                this._onDrilldownData(e, value);\n            }\n        },\n\n        _onDrilldownData: function(e, data) {\n            const drilldownSeries = Object.assign({}, e.series, data);\n            const args = {\n                point: e.point,\n                series: e.series,\n                drilldownSeries,\n                sender: this\n            };\n\n            const prevented = this.trigger(DRILLDOWN, args);\n            if (!prevented) {\n                this._drilldownState.push(this.options.series);\n\n                this.options.series = [drilldownSeries];\n                this._bindCategories();\n                this._redraw();\n            }\n        },\n\n        _bindData: function(e) {\n            var chart = this,\n                options = chart.options,\n                series = chart._sourceSeries || options.series,\n                seriesIx,\n                seriesLength = series.length,\n                data = chart.dataSource.view(),\n                grouped = (chart.dataSource.group() || []).length > 0,\n                processedSeries = [],\n                seriesVisibility = this._seriesVisibility,\n                currentSeries,\n                groupedSeries;\n\n            seriesVisibility.read();\n\n            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n                currentSeries = series[seriesIx];\n\n                if (chart._isBindable(currentSeries) && grouped) {\n                    groupedSeries = groupSeries(currentSeries, data);\n                    processedSeries = processedSeries.concat(groupedSeries);\n\n                    seriesVisibility.applyByGroup(groupedSeries, e);\n                } else {\n                    currentSeries = extend({}, currentSeries);\n                    processedSeries.push(currentSeries);\n\n                    seriesVisibility.applyByIndex(currentSeries, e);\n                }\n            }\n\n            chart._sourceSeries = series;\n            options.series = processedSeries;\n            this._instance.applySeriesColors();\n\n            chart._bindSeries();\n            chart._bindCategories();\n\n            this._hasData = true;\n        },\n\n        _initNoData: function() {\n            if (this._noData || this.options.noData === false) {\n                return;\n            }\n\n            const noDataWrap = $(\"<div class='k-chart-overlay'></div>\");\n            this._noData = noDataWrap.hide().appendTo(this.wrapper);\n\n            const noDataContent = $(\"<div class='k-no-data'></div>\");\n            noDataContent.appendTo(this._noData);\n\n            const template = this.options.noData?.template || (() => encode(this.options.messages.noData));\n            if (template) {\n                const templateFn = typeof template !== \"function\" ? kendo.template(template) : template;\n                noDataContent.html(templateFn({}));\n            }\n        },\n\n        _destroyNoData: function() {\n            if (this._noData) {\n                kendo.destroy(this._noData);\n                this._noData.remove();\n                delete this._noData;\n                delete this._noDataContent;\n            }\n        },\n\n        _onDataChanged: function(e) {\n            this._bindData(e);\n\n            // If there is data in the dataSource, remove the no data overlay.\n            if (this.dataSource.total() > 0) {\n                this._destroyNoData();\n            }\n\n            this.trigger(DATABOUND);\n            if (this._instance && this._instance.fontLoaded) {\n                this._redraw();\n            }\n        },\n\n        _bindSeries: function() {\n            var chart = this,\n                data = chart.dataSource.view(),\n                series = chart.options.series,\n                seriesIx,\n                seriesLength = series.length,\n                currentSeries,\n                groupIx,\n                seriesData;\n\n            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n                currentSeries = series[seriesIx];\n\n                if (chart._isBindable(currentSeries)) {\n                    groupIx = currentSeries._groupIx;\n                    seriesData = defined(groupIx) ? (data[groupIx] || {}).items : data;\n\n                    if (currentSeries.autoBind !== false) {\n                        currentSeries.data = seriesData;\n                    }\n                }\n            }\n        },\n\n        _bindCategories: function() {\n            var chart = this,\n                data = chart.dataSource.view() || [],\n                grouped = (chart.dataSource.group() || []).length > 0,\n                categoriesData = data,\n                options = chart.options,\n                definitions = [].concat(options.categoryAxis),\n                axisIx,\n                axis;\n\n            if (grouped) {\n                if (data.length) {\n                    categoriesData = data[0].items;\n                }\n            }\n\n            for (axisIx = 0; axisIx < definitions.length; axisIx++) {\n                axis = definitions[axisIx];\n                if (axis.autoBind !== false) {\n                    chart._bindCategoryAxis(axis, categoriesData, axisIx);\n                }\n            }\n        },\n\n        _bindCategoryAxis: function(axis, data, axisIx) {\n            var count = (data || []).length,\n                categoryIx,\n                category,\n                row;\n\n            if (axis.field) {\n                axis.categories = [];\n                for (categoryIx = 0; categoryIx < count; categoryIx++) {\n                    row = data[categoryIx];\n\n                    category = getField(axis.field, row);\n                    if (categoryIx === 0) {\n                        axis.categories = [category];\n                        axis.dataItems = [row];\n                    } else {\n                        axis.categories.push(category);\n                        axis.dataItems.push(row);\n                    }\n                }\n            } else if (this._instance) {\n                this._instance.bindCategoryAxisFromSeries(axis, axisIx);\n            }\n        },\n\n        _isBindable: function(series) {\n            var valueFields = SeriesBinder.current.valueFields(series),\n                result = true,\n                field, i;\n\n            for (i = 0; i < valueFields.length; i++) {\n                field = valueFields[i];\n                if (field === VALUE) {\n                    field = \"field\";\n                } else {\n                    field = field + \"Field\";\n                }\n\n                if (!defined(series[field])) {\n                    result = false;\n                    break;\n                }\n            }\n\n            return result;\n        },\n\n        _isRtl: function() {\n            return kendo.support.isRtl(this.element) && this.element.css(\"direction\") === RTL;\n        }\n    });\n\n    var proxyMembers = [\"getAxis\", \"findAxisByName\", \"plotArea\", \"toggleHighlight\", \"showTooltip\",\n        \"hideTooltip\", \"_resize\", \"_redraw\", \"_noTransitionsRedraw\", \"_legendItemHover\", \"_eventCoordinates\"];\n\n    function createProxyMember(name) {\n        Chart$1.fn[name] = function() {\n            var instance = this._instance;\n            if (instance) {\n                return instance[name].apply(instance, arguments);\n            }\n        };\n    }\n\n    for (var idx = 0; idx < proxyMembers.length; idx++) {\n        createProxyMember(proxyMembers[idx]);\n    }\n\n    function groupSeries(series, data) {\n        var result = [],\n            nameTemplate,\n            legacyTemplate = series.groupNameTemplate,\n            groupIx,\n            dataLength = data.length,\n            seriesClone,\n            defaultNameTemplate = ({ group }) => `${defined(series.name) ? group.value + \": \" + series.name : group.value}`;\n\n        if (dataLength === 0) {\n            seriesClone = deepExtend({}, series);\n            seriesClone.visibleInLegend = false;\n            return [seriesClone];\n        }\n\n        if (defined(legacyTemplate)) {\n            kendo.logToConsole(\n                \"'groupNameTemplate' is obsolete and will be removed in future versions. \" +\n                \"Specify the group name template as 'series.name'\"\n            );\n\n            if (legacyTemplate) {\n                nameTemplate = template(legacyTemplate);\n            }\n        } else {\n            nameTemplate = template(series.name || defaultNameTemplate);\n        }\n\n        for (groupIx = 0; groupIx < dataLength; groupIx++) {\n            seriesClone = deepExtend({}, series);\n\n            if (!kendo.isFunction(seriesClone.color)) {\n                seriesClone.color = undefined$1;\n            }\n\n            seriesClone._groupIx = groupIx;\n            seriesClone._groupValue = data[groupIx].value;\n            result.push(seriesClone);\n\n            if (nameTemplate) {\n                seriesClone.name = nameTemplate({\n                    series: seriesClone, group: data[groupIx]\n                });\n            }\n        }\n\n        return result;\n    }\n\n    dataviz.ExportMixin.extend(Chart$1.fn);\n\n    if (kendo.PDFMixin) {\n        kendo.PDFMixin.extend(Chart$1.fn);\n    }\n\n    dataviz.ui.plugin(Chart$1);\n\n    var SeriesVisibilityState = Class.extend({\n        init: function() {\n            this.groups = {};\n            this.index = {};\n            this.options = {};\n        },\n\n        applyByGroup: function(series, e) {\n            if ((e && e.action) || this.options.persistSeriesVisibility) {\n                for (var idx = 0; idx < series.length; idx++) {\n                    if (this.groups[series[idx]._groupValue] === false) {\n                        series[idx].visible = false;\n                    }\n                }\n            } else {\n                this.groups = {};\n            }\n        },\n\n        applyByIndex: function(series, e) {\n            if ((e && e.action) || this.options.persistSeriesVisibility) {\n                if (this.index[series.index] === false) {\n                    series.visible = false;\n                }\n            } else {\n                this.index = {};\n            }\n        },\n\n        save: function(series) {\n            if (!series) {\n                return;\n            }\n\n            if (this.options.persistSeriesVisibility) {\n                this.options.series[series.index].visible = series.visible;\n            } else {\n                this.saveState(series);\n            }\n        },\n\n        setOptions: function(options) {\n            this.options = options;\n            this.groups = {};\n            this.index = {};\n        },\n\n        read: function() {\n            var options = this.options;\n            if (options.persistSeriesVisibility) {\n                var series = options.series;\n                for (var idx = 0; idx < series.length; idx++) {\n                    this.saveState(series[idx]);\n                }\n            }\n        },\n\n        saveState: function(series) {\n            if (defined(series._groupValue)) {\n                this.groups[series._groupValue] = series.visible;\n            } else {\n                this.index[series.index] = series.visible;\n            }\n        }\n    });\n\n    var geom = kendo.geometry;\n\n    function normalizeStyle(style) {\n        for (var field in style) {\n            if (style[field] === undefined$1) {\n                style[field] = '';\n            }\n        }\n\n        return style;\n    }\n\n    var Tooltip = Observable.extend({\n        init: function(chartElement, options) {\n            var tooltip = this;\n\n            Observable.fn.init.call(tooltip);\n\n            this.setOptions(options);\n\n            tooltip.chartElement = chartElement;\n\n            tooltip.template = Tooltip.template;\n            if (!tooltip.template) {\n                tooltip.template = Tooltip.template = ({ autoHide, rtl, font, border, opacity }) =>\n                    `<div class='k-tooltip ${autoHide ? \"k-tooltip-closable\" : \"\"} k-chart-tooltip ${rtl ? \"k-rtl\" : \"\"}' ` +\n                    `${kendo.attr(\"style-display\")}=\"none\" ${kendo.attr(\"style-position\")}=\"absolute\" ` +\n                    `${kendo.attr(\"style-font\")}=\"${font}\" ${kendo.attr(\"style-opacity\")}=\"${opacity}\" ` +\n                    `${border ? `${kendo.attr(\"style-border\")}=\"${border.width}px solid\" ` : \"\"}` +\n                    `>` +\n                    '<div class=\"k-tooltip-content\"></div>' +\n                    `${autoHide ? '' : '<div class=\"k-tooltip-button\">' + kendo.ui.icon($('<a href=\"#\" title=\"Close\"></a>'), { icon: \"x\" }) + '</div>'}` +\n                    \"</div>\";\n            }\n\n            tooltip.element = $(tooltip.template(tooltip.options));\n            kendo.applyStylesFromKendoAttributes(tooltip.element, [\"display\", \"position\", \"font\", \"border\", \"opacity\"]);\n\n            tooltip.move = tooltip.move.bind(tooltip);\n            tooltip._mouseleave = tooltip._mouseleave.bind(tooltip);\n\n            var mobileScrollerSelector = kendo.format(\"[{0}='content'],[{0}='scroller']\", kendo.attr(\"role\"));\n            tooltip._mobileScroller = chartElement.closest(mobileScrollerSelector).data(\"kendoMobileScroller\");\n            tooltip.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());\n            tooltip._closeTooltipHandler = tooltip._closeTooltip.bind(tooltip);\n        },\n\n        destroy: function() {\n            var tooltip = this;\n\n            this._clearShowTimeout();\n            DOCUMENT_ELEMENT.off(tooltip.downEvent, tooltip._closeTooltipHandler);\n            if (this.element) {\n                this.element.off(MOUSELEAVE_NS).remove();\n                this.element = null;\n            }\n        },\n\n        setOptions: function(options) {\n            this.options = deepExtend({}, this.options, options);\n        },\n\n        options: {\n            opacity: 1,\n            animation: {\n                duration: TOOLTIP_ANIMATION_DURATION\n            },\n            sharedTemplate: ({ colspan, categoryText, points, content, colorMarker, nameColumn }) =>\n                \"<table>\" +\n                `<th colspan='${colspan}'>${categoryText}</th>` +\n                    sharedTemplateIterator(points, colorMarker, nameColumn, content) +\n                \"</table>\",\n            categoryFormat: \"{0:d}\",\n            autoHide: true\n        },\n\n        move: function() {\n            var tooltip = this,\n                options = tooltip.options,\n                element = tooltip.element,\n                offset;\n\n            if (!tooltip.anchor || !tooltip.element) {\n                return;\n            }\n\n            offset = tooltip._offset();\n            if (!tooltip.visible) {\n                element.css({ top: offset.top, left: offset.left });\n            }\n\n            tooltip.visible = true;\n            tooltip._ensureElement(document.body);\n            element\n                .stop(true, true)\n                .show()\n                .animate({\n                    left: offset.left,\n                    top: offset.top\n                }, options.animation.duration);\n        },\n\n        _clearShowTimeout: function() {\n            if (this.showTimeout) {\n                clearTimeout(this.showTimeout);\n                this.showTimeout = null;\n            }\n        },\n\n        getAnchor: function(size) {\n            var anchor = this.anchor;\n            var point = anchor.point;\n            var align = anchor.align;\n            var x = point.left;\n            var y = point.top;\n            if (align.horizontal === \"center\") {\n                x -= size.width / 2;\n            } else if (align.horizontal === \"right\") {\n                x -= size.width;\n            }\n\n            if (align.vertical === \"center\") {\n                y -= size.height / 2;\n            } else if (align.vertical === \"bottom\") {\n                y -= size.height;\n            }\n\n            return {\n                x: x,\n                y: y\n            };\n        },\n\n        _offset: function() {\n            var tooltip = this,\n                size = tooltip._measure(),\n                anchor = tooltip.getAnchor(size),\n                top = anchor.y,\n                left = anchor.x,\n                zoomLevel = kendo.support.zoomLevel(),\n                viewport = $(window),\n                scrollTop = window.pageYOffset || document.documentElement.scrollTop || 0,\n                scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || 0,\n                movable = (this._mobileScroller || {}).movable;\n\n            if (!movable || movable.scale === 1) {\n                top += tooltip._fit(top - scrollTop, size.height, outerHeight(viewport) / zoomLevel);\n                left += tooltip._fit(left - scrollLeft, size.width, outerWidth(viewport) / zoomLevel);\n            } else {\n                var transform = geom.transform().scale(movable.scale, movable.scale, [movable.x, movable.y]);\n                var point = new geom.Point(left, top).transform(transform);\n                left = point.x;\n                top = point.y;\n            }\n\n            return {\n                top: top,\n                left: left\n            };\n        },\n\n        show: function(e) {\n            var tooltip = this;\n            var fakeContainer = $(\"<div></div>\");\n            this.anchor = e.anchor;\n            this.element.css(normalizeStyle(e.style));\n            this.element.toggleClass(TOOLTIP_INVERSE, !!e.className);\n            this.element.toggleClass(SHARED_TOOLTIP_CLASS, !!e.shared);\n\n            var content = e.shared ? this._sharedContent(e) : this._pointContent(e.point);\n            fakeContainer.html(content);\n            kendo.applyStylesFromKendoAttributes(fakeContainer, [\"background-color\"]);\n            this.element.find('.k-tooltip-content').empty().append(fakeContainer);\n\n            if (!tooltip.options.autoHide) {\n                tooltip.element.off(\"click\" + NS).on(\"click\" + NS, \".k-tooltip-button\", tooltip._closeTooltipHandler);\n                DOCUMENT_ELEMENT.off(tooltip.downEvent, tooltip._closeTooltipHandler)\n                    .on(tooltip.downEvent, tooltip._closeTooltipHandler);\n            }\n\n            this._clearShowTimeout();\n            this.showTimeout = setTimeout(this.move, TOOLTIP_SHOW_DELAY);\n        },\n\n        hide: function(forceHide) {\n            var tooltip = this;\n\n            if (!tooltip.options.autoHide && !forceHide) {\n                return;\n            }\n\n            clearTimeout(tooltip.showTimeout);\n            tooltip._hideElement();\n\n            if (tooltip.visible) {\n                tooltip.point = null;\n                tooltip.visible = false;\n                tooltip.index = null;\n                DOCUMENT_ELEMENT.off(tooltip.downEvent, tooltip._closeTooltipHandler);\n            }\n        },\n\n        _closeTooltip: function(e) {\n            var target = $(e.target);\n\n            if (!target.is(\".k-chart-tooltip, .k-tooltip-content\")) {\n                e.preventDefault();\n                this.chartElement.data(\"kendoChart\")._instance.hideElements();\n                this.hide(true);\n            }\n        },\n\n        _sharedContent: function(e) {\n            var points = e.points;\n            var that = this;\n\n            var nameColumn = grep(points, function(point) {\n                return defined(point.series.name);\n            }).length;\n\n            var colorMarker = e.series.length > 1;\n            var colspan = 1;\n            if (nameColumn) {\n                colspan++;\n            }\n            if (colorMarker) {\n                colspan++;\n            }\n\n            var template = kendo.template(this.options.sharedTemplate);\n            var content = template({\n                points: points,\n                category: e.category,\n                categoryText: e.categoryText,\n                content: this._pointContent.bind(that),\n                colorMarker: colorMarker,\n                nameColumn: nameColumn,\n                colspan: colspan\n            });\n\n            return content;\n        },\n\n        _measure: function() {\n            this._ensureElement();\n\n            var size = {\n                width: outerWidth(this.element),\n                height: outerHeight(this.element)\n            };\n\n            return size;\n        },\n\n        _ensureElement: function() {\n            if (this.element) {\n                this.element\n                    .appendTo(document.body)\n                    .on(MOUSELEAVE_NS, this._mouseleave);\n            }\n        },\n\n        _mouseleave: function(e) {\n            var target = e.relatedTarget;\n            var chart = this.chartElement[0];\n            if (target && target !== chart && !$.contains(chart, target)) {\n                this.trigger(LEAVE);\n            }\n        },\n\n        _hideElement: function() {\n            var tooltip = this;\n            var element = this.element;\n            if (element) {\n                element.fadeOut({\n                    always: function() {\n                        if (!tooltip.visible) {\n                            element.off(MOUSELEAVE_NS).remove();\n                        }\n                    }\n                });\n            }\n        },\n\n        _pointContent: function(point) {\n            var tooltip = this,\n                options = deepExtend({}, tooltip.options, point.options.tooltip),\n                content, tooltipTemplate;\n\n            if (defined(point.value)) {\n                content = point.value.toString();\n            }\n\n            if (options.template) {\n                tooltipTemplate = template(options.template);\n                content = tooltipTemplate({\n                    value: point.value,\n                    category: point.category,\n                    series: point.series,\n                    dataItem: point.dataItem,\n                    percentage: point.percentage,\n                    runningTotal: point.runningTotal,\n                    total: point.total,\n                    low: point.low,\n                    high: point.high,\n                    xLow: point.xLow,\n                    xHigh: point.xHigh,\n                    yLow: point.yLow,\n                    yHigh: point.yHigh\n                });\n            } else if (options.format) {\n                content = point.formatValue(options.format);\n            }\n\n            return content;\n        },\n\n        _fit: function(offset, size, viewPortSize) {\n            var output = 0;\n\n            if (offset + size > viewPortSize) {\n                output = viewPortSize - (offset + size);\n            }\n\n            if (offset < 0) {\n                output = -offset;\n            }\n\n            return output;\n        }\n    });\n\n    var CrosshairTooltip = Tooltip.extend({\n        init: function(chartElement, options) {\n            Tooltip.fn.init.call(this, chartElement, options);\n            this.element.addClass(\"k-chart-crosshair-tooltip\");\n        },\n\n        show: function(e) {\n            var element = this.element;\n\n            if (element) {\n                this.anchor = e.anchor;\n                this.element.css(e.style);\n                this.element.html(this.content(e));\n\n                this.move();\n            }\n        },\n\n        move: function() {\n            var tooltip = this,\n                element = tooltip.element,\n                offset = tooltip._offset();\n\n            tooltip._ensureElement();\n            element.css({ top: offset.top, left: offset.left }).show();\n        },\n\n        content: function(e) {\n            var content = e.value,\n                options = e.crosshair.options.tooltip;\n\n            if (options.template) {\n                content = template(options.template)({\n                    value: content\n                });\n            }\n\n            return content;\n        },\n\n        hide: function() {\n            this.element.hide();\n        }\n    });\n\n    var ChartPane = Class.extend({\n        init: function(chart, pane) {\n            this._chart = chart;\n            this._pane = pane;\n            this.visual = pane.visual;\n            this.chartsVisual = pane.chartContainer.visual;\n            this.name = pane.options.name;\n        },\n\n        series: function() {\n            var chart = this._chart;\n            var seriesByPane = chart._plotArea.groupSeriesByPane();\n            var series = seriesByPane[this.name || \"default\"];\n\n            var result = [];\n            if (series) {\n                for (var idx = 0; idx < series.length; idx++) {\n                    result.push(new ChartSeries(chart, series[idx]));\n                }\n            }\n\n            return result;\n        }\n    });\n\n    var ChartSeries = Class.extend({\n        init: function(chart, options) {\n            this._chart = chart;\n            this._options = options;\n        },\n\n        points: function(filter) {\n            var points = this._points;\n            if (!points) {\n                var series = this._seriesOptions();\n                var plotArea = this._chart._plotArea;\n                this._points = points = plotArea.pointsBySeriesIndex(series.index);\n            }\n            if (kendo.isFunction(filter)) {\n                points = this._filterPoints(points, filter);\n            }\n\n\n            return points;\n        },\n\n        data: function(data) {\n            var series = this._seriesOptions();\n            if (data) {\n                var chart = this._chart;\n                var plotArea = chart._plotArea;\n\n                series.data = data;\n\n                if (series.categoryField) {\n                    var axis = plotArea.seriesCategoryAxis(series);\n                    var options = [].concat(chart.options.categoryAxis);\n\n                    chart._instance.bindCategoryAxisFromSeries(options[axis.axisIndex], axis.axisIndex);\n                }\n\n                chart._noTransitionsRedraw();\n                this._clearFields();\n            }\n\n            return series.data;\n        },\n\n        findPoint: function(filter) {\n            var points = this.points();\n            for (var idx = 0; idx < points.length; idx++) {\n                if (filter(points[idx])) {\n                    return points[idx];\n                }\n            }\n        },\n\n        toggleHighlight: function(show, elements) {\n            if (!elements) {\n                elements = this.points();\n            } else if (kendo.isFunction(elements)) {\n                elements = this.points(elements);\n            } else {\n                elements = isArray(elements) ? elements : [elements];\n            }\n\n            this._chart._instance.togglePointsHighlight(show, elements);\n        },\n\n        toggleVisibility: function(visible, filter) {\n            var chart = this._chart;\n            var seriesOptions = this._seriesOptions();\n            var hasFilter = kendo.isFunction(filter);\n            if (!hasFilter) {\n                seriesOptions.visible = visible;\n                chart._seriesVisibility.save(seriesOptions);\n            } else {\n                if (inArray(seriesOptions.type, [PIE, DONUT, FUNNEL])) {\n                    var data = this._filterData(filter);\n                    for (var idx = 0; idx < data.length; idx++) {\n                        data[idx].visible = visible;\n                    }\n                } else {\n                    seriesOptions.visible = function(data) {\n                        return filter(data.dataItem) ? visible : true;\n                    };\n                }\n            }\n\n            chart._noTransitionsRedraw();\n\n            this._clearFields();\n        },\n\n        _filterData: function(filter) {\n            var data = this._seriesOptions().data;\n            var length = data.length;\n            var result = [];\n\n            for (var idx = 0; idx < length; idx++) {\n                if (filter(data[idx])) {\n                    result.push(data[idx]);\n                }\n            }\n            return result;\n        },\n\n        _filterPoints: function(points, filter) {\n            var result = [];\n            var length = points.length;\n            for (var idx = 0; idx < length; idx++) {\n                if (filter(points[idx])) {\n                    result.push(points[idx]);\n                }\n            }\n            return result;\n        },\n\n        _seriesOptions: function() {\n            var series = this._series;\n            if (!series) {\n                series = this._series = this._chart._seriesOptions(this._options);\n            }\n            return series;\n        },\n\n        _clearFields: function() {\n            delete this._points;\n            delete this._series;\n        }\n    });\n\n    function triggerPaneRender(panes) {\n        for (var idx = 0; idx < panes.length; idx++) {\n            panes[idx].notifyRender();\n        }\n    }\n\n    function sharedTemplateIterator(points, colorMarker, nameColumn, content) {\n        var result = \"\";\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            result += \"<tr>\";\n\n            if (colorMarker) {\n                result += `<td><span class='k-chart-shared-tooltip-marker' ${kendo.attr(\"style-background-color\")}=\"${encode(point.series.color)}\"></span></td>`;\n            }\n\n            if (nameColumn) {\n                result += `<td> ${point.series.name ? point.series.name + \":\" : \"&nbsp;\"}</td>`;\n            }\n\n            result += `<td>${content(point)}</td>`;\n            result += \"</tr>\";\n        }\n\n        return result;\n    }\n\n    dataviz.Tooltip = Tooltip;\n    dataviz.CrosshairTooltip = CrosshairTooltip;\n    dataviz.ChartInstanceObserver = ChartInstanceObserver;\n    dataviz.ChartPane = ChartPane;\n    dataviz.ChartSeries = ChartSeries;\n\n})(window.kendo.jQuery);\n\nexport { __meta__ };\n"]}