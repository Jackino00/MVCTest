{"version":3,"sources":["raw-mjs/kendo.scheduler.monthview.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","kendo","window","ui","SchedulerView","NS","extend","encode","htmlEncode","getDate","date","MS_PER_DAY","INVERSE_COLOR_CLASS","DAY_TEMPLATE","template","toString","EVENT_WRAPPER_STRING","task","ns","uid","ariaLabel","resources","attr","color","tail","middle","icon","isException","isRecurring","showDelete","messages","destroy","head","resizable","EVENT_TEMPLATE","title","replace","MORE_BUTTON_TEMPLATE","iconClass","MonthGroupedView","Class","init","view","this","_view","_verticalRowCountForLevel","level","_rowCountForLevel","_horizontalGroupCountForLevel","_columnCountForLevel","_getCalendarRowsLength","cellsPerRow","cellCount","_createRows","start","startIdx","horizontalGroupCount","verticalGroupIndex","isVerticallyGrouped","_isVerticallyGrouped","html","groupIdx","_createRow","_adjustStartDate","addDays","_getContent","content","startDate","_getTimeSlotByPosition","x","y","groupIndex","groups","daySlotByPosition","_nextSlotStartDate","nextDay","_createRowsLayout","rows","groupHeaderTemplate","_createVerticalColumnsLayout","columns","_createColumnsLayout","_verticalGroupCount","_horizontalGroupCount","_columnOffsetForResource","_positionMobileEvent","event","group","range","rangeCount","end","rangeIndex","endDate","occurrence","clone","Date","_createEventElement","_positionEvent","_addDaySlotCollections","groupCount","tableRows","rowMultiplier","rowIndex","collection","addDaySlotCollection","cells","children","cellMultiplier","cellIndex","cell","addDaySlot","_changePeriodGroupIndex","reverse","length","_createResizeHint","left","startSlot","offsetLeft","top","offsetTop","width","innerWidth","height","clientHeight","hint","fn","call","_appendResizeHint","_createMoveHint","endSlot","css","firstChildHeight","options","eventHeight","index","addClass","inverseColor","_appendMoveHint","MonthGroupedByDateView","dateIdx","verticalStart","_groupCount","isLastRow","NUMBER_OF_COLUMNS","cellIdx","_createDateLayout","resource","configuration","data","dataSource","dataIndex","value","getter","dataValueField","obj","text","dataTextField","dataColorField","field","className","slice","push","subColumns","startIndex","endIndex","i","currentSlot","_slots","dateRange","daySlotRanges","dateIndex","currentGroupIndex","_daySlotCollections","vertical","selectionGroupIndex","offsetWidth","offsetHeight","slotIdx","slot","isInDateRange","min","max","msValue","scheduler","MonthView","element","that","eventsPerDay","moreButtonHeight","adaptiveSlotHeight","_groupedView","_getGroupedView","isGroupedByDate","_isGroupedByDate","Error","_templates","_editable","_renderLayout","_groups","_updateDirection","selection","ranges","multiple","isSameSlot","isSameCollection","collectionIndex","backward","_changeDate","previous","collections","_getCollections","daySlotCollectionCount","_getNextHorizontalRange","method","horizontalRange","isVertical","_getNextVerticalRange","verticalRange","_changeViewPeriod","newStart","newEnd","pad","_isInRange","events","_continuousSlot","continuousSlot","_changeGroupContinuously","lastGroupIndex","_normalizeHorizontalSelection","_normalizeVerticalSelection","settings","Template","templateSettings","eventTemplate","dayTemplate","dateForTitle","format","selectedDateFormat","_firstDayOfMonth","_lastDayOfMonth","shortDateForTitle","selectedShortDateFormat","mobileDateForTitle","selectedMobileDateFormat","mobileYearForTitle","split","nextDate","previousDate","previousDay","_startDate","_endDate","firstDayOfMonth","lastDayOfMonth","calendarInfo","firstDay","firstVisibleDay","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","getDay","setTime","firstVisibleMonthDay","createLayout","_layout","_content","_initSlotHeight","_initTimesHeight","refreshLayout","_isVirtualized","_tryRenderContent","on","e","offset","currentTarget","_slotByPosition","preventDefault","trigger","_footer","editable","_isMobile","_touchEditable","_mouseEditable","closest","create","resourceInfo","_resourceBySlot","eventInfo","isAllDay","update","threshold","support","mobileOS","android","_addUserEvents","UserEvents","useClickAsTap","browser","edge","filter","tap","_scrolling","target","selectionByElement","columnLevel","columnLevels","rowLevel","rowLevels","verticalGroupCount","groupedView","groupedResources","verticalGroupIdx","_createCalendar","_cachedGroupIndex","find","_virtualContent","append","_calcSlotHeight","dateHeader","eventSpacing","firstCell","firstChild","Math","round","rowHeight","isMobile","table","_sortEventMeta","eventMeta","sort","first","second","order","_adjustSlotHeight","_canAdjustSlotHeight","forEach","week","_events","eventIndex","slots","firstSlot","weekOffsetTop","weekHeight","actualEventCount","slotIndex","meta","adjSlot","adjMeta","indexOf","dirty","slotHeight","firstChildTop","style","more","parentNode","times","isSetHeight","_isSchedulerHeightSet","contentDiv","weekStartDates","_slotIndices","calendarRowsLength","rowIdx","_weekStartDates","classes","isToday","getTime","names","array","idx","concat","shiftArray","days","namesShort","map","inner","resize","eventResources","_formatEventAriaLabel","applyStylesFromKendoAttributes","_isInDateSlot","slotStart","slotEnd","lastSlot","startTime","toUtcTime","endTime","_slotIndex","slotRange","tableEl","contentEl","collidingEvents","createRows","at","container","_isRtl","clientWidth","scrollWidth","appendChild","addEvent","_continuousEvents","eventCount","rightOffset","rowEvents","eventTop","j","eventLength","parseInt","appendTo","_inverseEventColor","_collectionIndex","_startSlotIndex","_startSlot","outerHeight","scrollTop","scrollLeft","ceil","_resizeHint","add","_updateResizeHint","_removeResizeHint","timezone","toLocalDate","last","_updateMoveHint","distance","duration","_removeMoveHint","_moveHint","getElementsByTagName","_addResourceView","MS_PER_HOUR","render","remove","_cachedEvents","Query","dir","toArray","bind","_renderGroups","_renderEvents","_ongoingEvents","slotRanges","rangeStart","rangeEnd","setDate","parentValue","item","itemParentValue","dataParentValueField","itemIdx","_resourceValue","tmp","operator","groupEqFilter","removeClass","off","ongoingEvents","cssClass","enabled","updateInterval","jQuery","kendo$1"],"mappings":"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","file":"kendo.scheduler.monthview.js","sourcesContent":["import './kendo.scheduler.view.js';\nimport './kendo.icons.js';\n\nconst __meta__ = {\n    id: \"scheduler.monthview\",\n    name: \"Scheduler Month View\",\n    category: \"web\",\n    description: \"The Scheduler Month View\",\n    depends: [ \"scheduler.view\", \"icons\" ],\n    hidden: true\n};\n\n(function($) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        SchedulerView = ui.SchedulerView,\n        NS = \".kendoMonthView\",\n        extend = $.extend,\n        encode = kendo.htmlEncode,\n        getDate = kendo.date.getDate,\n        MS_PER_DAY = kendo.date.MS_PER_DAY,\n        NUMBER_OF_ROWS = 6,\n        NUMBER_OF_COLUMNS = 7,\n        INVERSE_COLOR_CLASS = \"k-event-inverse\",\n        DAY_TEMPLATE = kendo.template(({ date }) => `<span class=\"k-link k-nav-day\">${encode(kendo.toString(date, \"dd\"))}</span>`),\n        EVENT_WRAPPER_STRING = (task) =>\n            `<div role=\"button\" data-${task.ns}uid=\"${task.uid}\" aria-label=\"${encode(task.ariaLabel)}\" ` +\n            (task.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${task.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${task.resources[0].color}\" class=\"k-event\">` : 'class=\"k-event\">') +\n                '<span class=\"k-event-actions\">' +\n                    `${task.tail || task.middle ? kendo.ui.icon(\"caret-alt-left\") : ''}` +\n                    `${task.isException() ? kendo.ui.icon(\"arrows-no-repeat\") :\n                        (task.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '')}` +\n                '</span>' +\n                `${kendo.template(task.template)(task)}` +\n                '<span class=\"k-event-actions\">' +\n                    `${task.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${task.messages.destroy}\" aria-label=\"${task.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : ''}` +\n                    `${task.head || task.middle ? kendo.ui.icon(\"caret-alt-right\") : ''}` +\n                '</span>' +\n                (task.resizable && !task.tail && !task.middle ? '<span class=\"k-resize-handle k-resize-w\"></span>' : '') +\n                (task.resizable && !task.head && !task.middle ? '<span class=\"k-resize-handle k-resize-e\"></span>' : '') +\n            '</div>',\n        EVENT_TEMPLATE = kendo.template(({ title }) => `<div title=\"${title.replace(/\"/g,\"&#34;\")}\">` +\n                    `<div class=\"k-event-template\">${encode(title)}</div>` +\n                '</div>');\n\n    var CELL_INNER_SPACING = 2;\n\n    var MORE_BUTTON_TEMPLATE = kendo.template(() =>\n        `<div role=\"button\" aria-label=\"Show all events in Day view.\" class=\"k-more-events k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\">${kendo.ui.icon({ icon: \"more-horizontal\", iconClass: \"k-button-icon\" })}</div>`\n    );\n\n    var MonthGroupedView = kendo.Class.extend({\n        init: function(view) {\n            this._view = view;\n        },\n\n        _verticalRowCountForLevel: function(level) {\n            var view = this._view;\n\n            return view._rowCountForLevel(level);\n        },\n\n        _horizontalGroupCountForLevel: function(level) {\n            var view = this._view;\n\n            return view._columnCountForLevel(level);\n        },\n\n        _getCalendarRowsLength: function(cellsPerRow, cellCount) {\n            return cellCount / cellsPerRow;\n        },\n\n        _createRows: function(start, startIdx, horizontalGroupCount, verticalGroupIndex) {\n            var view = this._view;\n            var cellsPerRow = NUMBER_OF_COLUMNS;\n            var isVerticallyGrouped = view._isVerticallyGrouped();\n            var html = \"\";\n\n            for (var groupIdx = 0; groupIdx < horizontalGroupCount; groupIdx++) {\n                html += view._createRow(start, startIdx, cellsPerRow, isVerticallyGrouped ? verticalGroupIndex : groupIdx);\n            }\n\n            return html;\n        },\n\n        _adjustStartDate: function(start) {\n            return kendo.date.addDays(start, NUMBER_OF_COLUMNS);\n        },\n\n        _getContent: function(content, startDate, resources) {\n            return content({ date: startDate, resources: resources });\n        },\n\n        _getTimeSlotByPosition: function(x, y, groupIndex) {\n            var group = this._view.groups[groupIndex];\n\n            return group.daySlotByPosition(x, y);\n        },\n\n        _nextSlotStartDate: function(startDate) {\n            return kendo.date.nextDay(startDate);\n        },\n\n        _createRowsLayout: function(resources, rows, groupHeaderTemplate) {\n            var view = this._view;\n\n            return view._createRowsLayout(resources, rows, groupHeaderTemplate);\n        },\n\n        _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n\n            return columns;\n        },\n\n        _createColumnsLayout: function(resources, columns, groupHeaderTemplate) {\n            var view = this._view;\n\n            return view._createColumnsLayout(resources, columns, groupHeaderTemplate);\n        },\n\n        _verticalGroupCount: function(level) {\n            var view = this._view;\n\n            return view._rowCountForLevel(level);\n        },\n\n        _horizontalGroupCount: function(level) {\n            var view = this._view;\n\n            return view._columnCountForLevel(level) / view._columnOffsetForResource(level);\n        },\n\n        _positionMobileEvent: function(event, group, range, rangeCount, start, end, rangeIndex) {\n            var view = this._view;\n\n            if (rangeCount > 1) {\n                if (rangeIndex === 0) {\n                    end = range.end.endDate();\n                } else if (rangeIndex == rangeCount - 1) {\n                    start = range.start.startDate();\n                } else {\n                    start = range.start.startDate();\n                    end = range.end.endDate();\n                }\n            }\n\n            var occurrence = event.clone({ start: new Date(start), end: new Date(end), head: range.head, tail: range.tail });\n\n            view._positionMobileEvent(range, view._createEventElement(occurrence), group);\n        },\n\n        _positionEvent: function(event, group, range, rangeCount, start, end, rangeIndex) {\n            var view = this._view;\n\n            if (rangeCount > 1) {\n                if (rangeIndex === 0) {\n                    end = range.end.endDate();\n                } else if (rangeIndex == rangeCount - 1) {\n                    start = range.start.startDate();\n                } else {\n                    start = range.start.startDate();\n                    end = range.end.endDate();\n                }\n            }\n\n            var occurrence = event.clone({ start: start, end: end, head: range.head, tail: range.tail });\n\n            view._positionEvent(range, view._createEventElement(occurrence), group);\n        },\n\n        _addDaySlotCollections: function(groupCount, tableRows, startDate) {\n            var view = this._view;\n            var columnCount = NUMBER_OF_COLUMNS;\n            var rowCount = NUMBER_OF_ROWS;\n\n            for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                var cellCount = 0;\n                var rowMultiplier = 0;\n\n                if (view._isVerticallyGrouped()) {\n                    rowMultiplier = groupIndex;\n                }\n\n                for (var rowIndex = rowMultiplier * rowCount; rowIndex < (rowMultiplier + 1) * rowCount; rowIndex++) {\n                    var group = view.groups[groupIndex];\n                    var collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));\n\n                    var tableRow = tableRows[rowIndex];\n                    var cells = tableRow.children;\n                    var cellMultiplier = 0;\n\n                    if (!view._isVerticallyGrouped()) {\n                        cellMultiplier = groupIndex;\n                    }\n\n                    for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {\n                        var cell = cells[cellIndex];\n\n                        view.addDaySlot(collection, cell, startDate, cellCount);\n                        cellCount++;\n                    }\n                }\n            }\n        },\n\n        _changePeriodGroupIndex: function(reverse) {\n            var view = this._view;\n\n            return reverse ? view.groups.length - 1 : 0;\n        },\n\n        _createResizeHint: function(range) {\n            var view = this._view;\n            var left = range.startSlot().offsetLeft;\n            var top = range.start.offsetTop;\n            var width = range.innerWidth();\n            var height = range.start.clientHeight - 2;\n            var hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n            view._appendResizeHint(hint);\n        },\n\n        _createMoveHint: function(range, event) {\n            var view = this._view;\n            var startSlot = range.startSlot();\n            var endSlot = range.endSlot();\n            var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));\n\n            hint.css({\n                left: startSlot.offsetLeft + 2,\n                top: startSlot.offsetTop + startSlot.firstChildHeight,\n                height: (view.options.eventHeight === \"auto\") ? 25 : view.options.eventHeight,\n                width: range.innerWidth() - (startSlot.index !== endSlot.index ? 3 : 2)\n            });\n\n            hint.addClass(\"k-event-drag-hint\");\n\n            if (event.inverseColor) {\n                hint.addClass(INVERSE_COLOR_CLASS);\n            }\n\n            view._appendMoveHint(hint);\n        }\n    });\n\n    var MonthGroupedByDateView = kendo.Class.extend({\n        init: function(view) {\n            this._view = view;\n        },\n\n        _verticalRowCountForLevel: function() {\n            return 1;\n        },\n\n        _horizontalGroupCountForLevel: function(level) {\n            var view = this._view;\n\n            return view._columnCountForLevel(level + 1) / NUMBER_OF_COLUMNS;\n        },\n\n        _createRows: function(start, startIdx, horizontalGroupCount) {\n            var view = this._view;\n            var cellsPerRow = NUMBER_OF_COLUMNS;\n            var isVerticallyGrouped = view._isVerticallyGrouped();\n            var html = \"\";\n            var dateIdx = 0;\n\n            if (isVerticallyGrouped) {\n                var verticalStart = new Date(start);\n                var groupCount = view._groupCount();\n                for (dateIdx; dateIdx < NUMBER_OF_ROWS; dateIdx++) {\n                    html += view._createRow(verticalStart, startIdx, groupCount, dateIdx);\n\n                    verticalStart = kendo.date.addDays(verticalStart, cellsPerRow);\n                }\n                start = kendo.date.nextDay(start);\n            } else {\n                for (dateIdx; dateIdx < cellsPerRow; dateIdx++) {\n                    html += view._createRow(start, startIdx, horizontalGroupCount, dateIdx);\n                    start = kendo.date.nextDay(start);\n                }\n                start = kendo.date.addDays(start, cellsPerRow);\n            }\n\n            return html;\n        },\n\n        _adjustStartDate: function(start, isLastRow) {\n            var view = this._view;\n            var isVerticallyGrouped = view._isVerticallyGrouped();\n\n            if (isVerticallyGrouped) {\n                if (isLastRow) {\n                    return kendo.date.addDays(start, NUMBER_OF_COLUMNS * (NUMBER_OF_ROWS - 1) + 1);\n                } else {\n                    return kendo.date.nextDay(start);\n                }\n            }\n\n            return kendo.date.addDays(start, NUMBER_OF_COLUMNS);\n        },\n\n        _getContent: function(content, startDate, resources, cellIdx) {\n            if (cellIdx === 0) {\n                return content({ date: startDate, resources: resources });\n            }\n            return \"\";\n        },\n\n        _getTimeSlotByPosition: function(x, y, groupIndex) {\n            var group = this._view.groups[groupIndex];\n\n            return group.daySlotByPosition(x, y, true);\n        },\n\n        _nextSlotStartDate: function(startDate) {\n            return startDate;\n        },\n\n        _getCalendarRowsLength: function() {\n            var view = this._view;\n            var isVerticallyGrouped = view._isVerticallyGrouped();\n\n            return isVerticallyGrouped ? NUMBER_OF_COLUMNS : NUMBER_OF_ROWS;\n        },\n\n        _createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n            var view = this._view;\n\n            return view._createDateLayout(columns, null, false);\n        },\n\n        _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {\n            var view = this._view;\n            var resource = resources[0];\n            var configuration = [];\n            var data = resource.dataSource.view();\n\n            for (var dataIndex = 0; dataIndex < data.length * NUMBER_OF_ROWS; dataIndex++) {\n                var value = kendo.getter(resource.dataValueField)(data[dataIndex % data.length]);\n                var obj = {\n                    text: groupHeaderTemplate({\n                        text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex % data.length])),\n                        color: kendo.getter(resource.dataColorField)(data[dataIndex % data.length]),\n                        field: resource.field,\n                        title: resource.title,\n                        name: resource.name,\n                        value: value\n                    }),\n                    className: \"k-slot-cell\",\n                    value: value\n                };\n\n                obj.columns = view._createColumnsLayout(resources.slice(1), null, groupHeaderTemplate, null, null, value);\n\n                configuration.push(obj);\n            }\n\n            return configuration;\n        },\n\n        _createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {\n            var view = this._view;\n\n            return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);\n        },\n\n        _verticalGroupCount: function(level) {\n            var view = this._view;\n\n            return view._columnCountForLevel(level) / NUMBER_OF_ROWS;\n        },\n\n        _horizontalGroupCount: function(level) {\n            var view = this._view;\n            return view._columnCountForLevel(level) / NUMBER_OF_COLUMNS;\n        },\n\n        _positionMobileEvent: function(event, group, range, rangeCount, start, end) {\n            var view = this._view;\n            var startIndex = range.start.index;\n            var endIndex = range.end.index;\n\n            for (var i = range.start.index; i <= range.end.index; i++) {\n                var currentSlot = range.collection._slots[i];\n                var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];\n\n                var occurrence = event.clone({\n                    start: i === startIndex ? start : currentSlot.startDate(),\n                    end: i === endIndex ? end : currentSlot.endDate(),\n                    head: i !== endIndex || range.head,\n                    tail: i !== startIndex || range.tail });\n\n                view._positionMobileEvent(dateRange, view._createEventElement(occurrence), group);\n            }\n        },\n\n        _positionEvent: function(event, group, range, rangeCount, start, end) {\n            var view = this._view;\n            var startIndex = range.start.index;\n            var endIndex = range.end.index;\n\n            for (var i = range.start.index; i <= range.end.index; i++) {\n                var currentSlot = range.collection._slots[i];\n                var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];\n\n                var occurrence = event.clone({\n                    start: i === startIndex ? start : currentSlot.startDate(),\n                    end: i === endIndex ? end : currentSlot.endDate(),\n                    head: i !== endIndex || range.head,\n                    tail: i !== startIndex || range.tail });\n\n                view._positionEvent(dateRange, view._createEventElement(occurrence), group);\n            }\n        },\n\n        _addDaySlotCollections: function(groupCount, tableRows, startDate) {\n            var view = this._view;\n            var columnCount = NUMBER_OF_COLUMNS;\n            var rowCount = NUMBER_OF_ROWS;\n            var isVerticallyGrouped = view._isVerticallyGrouped();\n\n            for (var dateIndex = 0; dateIndex < columnCount; dateIndex++) {\n                for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                    var groupIndex = 0;\n                    var currentTableIndex = isVerticallyGrouped ? dateIndex : rowIndex;\n                    var tableRow = tableRows[currentTableIndex];\n                    var cells = tableRow.children;\n                    var cellMultiplier = 0;\n\n                    if (!view._isVerticallyGrouped()) {\n                        cellMultiplier = dateIndex;\n                    }\n\n                    for (var cellIndex = cellMultiplier * groupCount; cellIndex < (cellMultiplier + 1) * groupCount; cellIndex++) {\n                        var cellCount = (rowIndex * columnCount) + dateIndex;\n                        var currentCellIndex = isVerticallyGrouped ? cellIndex + (rowIndex * groupCount) : cellIndex;\n                        var cell = cells[currentCellIndex];\n                        var currentGroupIndex = isVerticallyGrouped ? cellIndex : groupIndex;\n                        var group = view.groups[currentGroupIndex];\n                        var collection;\n                        if (dateIndex === 0) {\n                            collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));\n                        } else {\n                            collection = group._daySlotCollections[rowIndex];\n                        }\n\n                        view.addDaySlot(collection, cell, startDate, cellCount);\n                        groupIndex++;\n                    }\n                }\n            }\n        },\n\n        _changePeriodGroupIndex: function(reverse, vertical, selectionGroupIndex) {\n            var view = this._view;\n\n            if (vertical && view._isVerticallyGrouped()) {\n                return reverse ? view.groups.length - 1 : 0;\n            }\n\n            return selectionGroupIndex;\n        },\n\n        _createResizeHint: function(range) {\n            var view = this._view;\n            var left, top, width, height, hint;\n\n            if (view._isVerticallyGrouped()) {\n            left = range.startSlot().offsetLeft;\n            top = range.start.offsetTop;\n            width = range.startSlot().offsetWidth;\n            height = range.endSlot().offsetTop + range.startSlot().offsetHeight - range.startSlot().offsetTop - 2;\n            hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n            view._appendResizeHint(hint);\n            } else {\n                for (var slotIdx = range.startSlot().index; slotIdx <= range.endSlot().index; slotIdx++) {\n                    var slot = range.collection._slots[slotIdx];\n                    left = slot.offsetLeft;\n                    top = slot.offsetTop;\n                    width = slot.offsetWidth;\n                    height = slot.offsetHeight - 2;\n                    hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                    view._appendResizeHint(hint);\n                }\n            }\n        },\n\n        _createMoveHint: function(range, event) {\n            var view = this._view;\n            var startSlot = range.startSlot();\n            var endSlot = range.endSlot();\n\n            for (var slotIdx = startSlot.index; slotIdx <= endSlot.index; slotIdx++) {\n                var slot = range.collection._slots[slotIdx];\n                var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));\n\n                hint.css({\n                    left: slot.offsetLeft,\n                    top: slot.offsetTop + slot.firstChildHeight,\n                    height: (view.options.eventHeight === \"auto\") ? 25 : view.options.eventHeight,\n                    width: slot.offsetWidth - 2\n                });\n\n                hint.addClass(\"k-event-drag-hint\");\n\n                if (event.inverseColor) {\n                    hint.addClass(INVERSE_COLOR_CLASS);\n                }\n\n                view._appendMoveHint(hint);\n            }\n        }\n    });\n\n    kendo.ui.scheduler.MonthGroupedView = MonthGroupedView;\n    kendo.ui.scheduler.MonthGroupedByDateView = MonthGroupedByDateView;\n\n    ui.MonthView = SchedulerView.extend({\n        init: function(element, options) {\n            var that = this;\n\n            // Do not allow less than one event\n            if (options.eventsPerDay === 0) {\n                options.eventsPerDay = 1;\n            }\n\n            // Do not allow 0 height events\n            if (options.eventHeight === 0) {\n                options.eventHeight = 1;\n            }\n\n            // Do not allow 0 height more-button\n            if (options.moreButtonHeight === 0) {\n                options.moreButtonHeight = 1;\n            }\n\n            // Do not allow string values other than auto\n            if (typeof options.eventHeight === \"string\" && options.eventHeight !== \"auto\") {\n                options.eventHeight = 25;\n            }\n\n            // Set adaptiveSlotHeight to true if eventHeight is auto\n            if (options.eventHeight === \"auto\") {\n                options.adaptiveSlotHeight = true;\n            }\n\n            SchedulerView.fn.init.call(that, element, options);\n            that._groupedView = that._getGroupedView();\n\n            // Exception handling for invalid combinations\n            var isGroupedByDate = this._isGroupedByDate();\n            var adaptiveSlotHeight = this.options.adaptiveSlotHeight;\n            var eventHeight = this.options.eventHeight;\n\n            if (isGroupedByDate === true && adaptiveSlotHeight === true) {\n                throw new Error(\"Incompatible options: adaptive slot height and date grouping!\");\n            }\n\n            if (isGroupedByDate === true && eventHeight === \"auto\") {\n                throw new Error(\"Incompatible options: auto event height and date grouping!\");\n            }\n\n            that.title = that.options.title;\n\n            that._templates();\n\n            that._editable();\n\n            that._renderLayout(that.options.date);\n\n            that._groups();\n        },\n\n        name: \"month\",\n\n        _getGroupedView: function() {\n            if (this._isGroupedByDate()) {\n                return new kendo.ui.scheduler.MonthGroupedByDateView(this);\n            } else {\n                return new kendo.ui.scheduler.MonthGroupedView(this);\n            }\n        },\n\n        _updateDirection: function(selection, ranges, multiple, reverse, vertical) {\n            if (multiple) {\n                var startSlot = ranges[0].start;\n                var endSlot = ranges[ranges.length - 1].end;\n                var isSameSlot = startSlot.index === endSlot.index;\n                var isSameCollection = startSlot.collectionIndex === endSlot.collectionIndex;\n                var updateDirection;\n\n                if (vertical) {\n                    updateDirection = (isSameSlot && isSameCollection) || isSameCollection;\n                } else {\n                    updateDirection = isSameSlot && isSameCollection;\n                }\n\n                if (updateDirection) {\n                    selection.backward = reverse;\n                }\n            }\n        },\n\n        _changeDate: function(selection, slot, previous) {\n            var group = this.groups[selection.groupIndex];\n            var collections, index;\n\n            if (previous) {\n                collections = group._getCollections(group.daySlotCollectionCount());\n                index = slot.collectionIndex - 1;\n\n                if (index >= 0) {\n                    return collections[index]._slots[collections[index]._slots.length - 1];\n                }\n            } else {\n                collections = group._getCollections(group.daySlotCollectionCount());\n                index = slot.collectionIndex + 1;\n                var slotIndex = 0;\n\n                if (collections[index] && collections[index]._slots[slotIndex]) {\n                    return collections[index]._slots[slotIndex];\n                }\n            }\n        },\n\n        _getNextHorizontalRange: function(group, method, horizontalRange) {\n            var isVertical = this._isVerticallyGrouped();\n\n            horizontalRange.startSlot = group[method](horizontalRange.startSlot, isVertical);\n            horizontalRange.endSlot = group[method](horizontalRange.endSlot, isVertical);\n\n            return horizontalRange;\n        },\n\n        _getNextVerticalRange: function(group, method, verticalRange, multiple) {\n            var isVertical = this._isVerticallyGrouped() && this._isGroupedByDate();\n\n            verticalRange.startSlot = group[method](verticalRange.startSlot, multiple, isVertical);\n            verticalRange.endSlot = group[method](verticalRange.endSlot, multiple, isVertical);\n\n            return verticalRange;\n        },\n\n        _changeViewPeriod: function(selection, reverse, vertical) {\n            var pad = vertical ? 7 : 1;\n            var newStart, newEnd;\n\n            if (reverse) {\n                pad *= -1;\n            }\n\n            newStart = kendo.date.addDays(selection.start, pad);\n            newEnd = kendo.date.addDays(selection.end, pad);\n\n            if (this._isInRange(newStart, newEnd)) {\n                return false;\n            }\n\n            selection.start = newStart;\n            selection.end = newEnd;\n\n            if (!vertical || (vertical && this._isVerticallyGrouped())) {\n                selection.groupIndex = this._groupedView._changePeriodGroupIndex(reverse, vertical, selection.groupIndex);\n            }\n\n            selection.events = [];\n\n            return true;\n        },\n\n        _continuousSlot: function(selection, ranges, reverse) {\n            var index = selection.backward ? 0 : ranges.length - 1;\n            var group = this.groups[selection.groupIndex];\n\n            return group.continuousSlot(ranges[index].start, reverse);\n        },\n\n        _changeGroupContinuously: function(selection, continuousSlot, multiple, reverse) {\n            if (!multiple) {\n                var groupIndex = selection.groupIndex;\n                var lastGroupIndex = this.groups.length - 1;\n                var vertical = this._isVerticallyGrouped();\n                var group = this.groups[groupIndex];\n\n                if (!continuousSlot && vertical) {\n\n                    continuousSlot = group[reverse ? \"lastSlot\" : \"firstSlot\"]();\n\n                    groupIndex += (reverse ? -1 : 1);\n\n                } else if (continuousSlot && !vertical) {\n                    groupIndex = reverse ? lastGroupIndex : 0;\n                }\n\n                if (groupIndex < 0 || groupIndex > lastGroupIndex) {\n                    groupIndex = reverse ? lastGroupIndex : 0;\n                    continuousSlot = null;\n                }\n\n                selection.groupIndex = groupIndex;\n            }\n\n            return continuousSlot;\n        },\n\n        _normalizeHorizontalSelection: function(selection, ranges, reverse) {\n            var slot;\n\n            if (reverse) {\n                slot = ranges[0].start;\n            } else {\n                slot = ranges[ranges.length - 1].end;\n            }\n\n            return slot;\n        },\n\n        _normalizeVerticalSelection: function(selection, ranges) {\n            var slot;\n\n            if (selection.backward) {\n                slot = ranges[0].start;\n            } else {\n                slot = ranges[ranges.length - 1].end;\n            }\n\n            return slot;\n        },\n\n        _templates: function() {\n            var options = this.options,\n                settings = extend({}, kendo.Template, options.templateSettings);\n\n            this.eventTemplate = kendo.template(EVENT_WRAPPER_STRING);\n            this.dayTemplate = kendo.template(options.dayTemplate, settings);\n            this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);\n        },\n\n        dateForTitle: function() {\n            return kendo.format(this.options.selectedDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n        },\n\n        shortDateForTitle: function() {\n            return kendo.format(this.options.selectedShortDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n        },\n\n        mobileDateForTitle: function() {\n            return kendo.format(this.options.selectedMobileDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n        },\n\n        mobileYearForTitle: function() {\n            return this.dateForTitle().split(', ')[1];\n        },\n\n        nextDate: function() {\n            return kendo.date.nextDay(this._lastDayOfMonth);\n        },\n\n        previousDate: function() {\n            return kendo.date.previousDay(this._firstDayOfMonth);\n        },\n\n        startDate: function() {\n            return this._startDate;\n        },\n\n        endDate: function() {\n            return this._endDate;\n        },\n\n        _renderLayout: function(date) {\n            var that = this;\n\n            this._firstDayOfMonth = kendo.date.firstDayOfMonth(date);\n\n            this._lastDayOfMonth = kendo.date.lastDayOfMonth(date);\n\n            this._startDate = firstVisibleMonthDay(date, this.calendarInfo());\n\n            this.createLayout(this._layout());\n\n            this._content();\n\n            this._initSlotHeight();\n\n            this._initTimesHeight();\n\n            this.refreshLayout();\n\n            if (this._isVirtualized()) {\n                this._tryRenderContent();\n            }\n\n            this.content.on(\"click\" + NS, \".k-nav-day,.k-more-events\", function(e) {\n                var offset = $(e.currentTarget).offset();\n                var slot = that._slotByPosition(offset.left, offset.top);\n\n                e.preventDefault();\n                that.trigger(\"navigate\", { view: \"day\", date: slot.startDate() });\n            });\n\n            this._footer();\n        },\n\n        _editable: function() {\n            if (this.options.editable) {\n                if (this._isMobile()) {\n                    this._touchEditable();\n                } else {\n                    this._mouseEditable();\n                }\n\n            }\n        },\n\n        _mouseEditable: function() {\n            var that = this;\n            that.element.on(\"click\" + NS, \".k-scheduler-monthview .k-event a:has(.k-i-x),.k-scheduler-monthview .k-event a:has(.k-svg-i-x)\", function(e) {\n                that.trigger(\"remove\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                e.preventDefault();\n            });\n\n            if (that.options.editable.create !== false) {\n                that.element.on(\"dblclick\" + NS, \".k-scheduler-monthview .k-scheduler-content td\", function(e) {\n                    var offset = $(e.currentTarget).offset();\n                    var slot = that._slotByPosition(offset.left, offset.top);\n\n                    if (slot) {\n                        var resourceInfo = that._resourceBySlot(slot);\n                        that.trigger(\"add\", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });\n                    }\n\n                    e.preventDefault();\n                });\n            }\n\n            if (that.options.editable.update !== false) {\n                that.element.on(\"dblclick\" + NS, \".k-scheduler-monthview .k-event\", function(e) {\n                    that.trigger(\"edit\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                    e.preventDefault();\n                });\n            }\n        },\n\n        _touchEditable: function() {\n            var that = this;\n            var threshold = 0;\n\n            if (kendo.support.mobileOS.android) {\n                threshold = 5;\n            }\n\n            if (that.options.editable.create !== false) {\n                that._addUserEvents = new kendo.UserEvents(that.element, {\n                    threshold: threshold,\n                    useClickAsTap: !kendo.support.browser.edge,\n                    filter: \".k-scheduler-monthview .k-scheduler-content td\",\n                    tap: function(e) {\n                        if (that._scrolling) {\n                            return;\n                        }\n                        var offset = $(e.target).offset();\n                        var slot = that._slotByPosition(offset.left, offset.top);\n\n                        if (slot) {\n                            var resourceInfo = that._resourceBySlot(slot);\n                            that.trigger(\"add\", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });\n                        }\n\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        selectionByElement: function(cell) {\n            var offset = $(cell).offset();\n            return this._slotByPosition(offset.left, offset.top);\n        },\n\n        _columnCountForLevel: function(level) {\n            var columnLevel = this.columnLevels[level];\n            return columnLevel ? columnLevel.length : 0;\n        },\n\n        _rowCountForLevel: function(level) {\n            var rowLevel = this.rowLevels[level];\n            return rowLevel ? rowLevel.length : 0;\n        },\n\n        _content: function() {\n            var html = '<tbody>';\n            var verticalGroupCount = 1;\n            var groupedView = this._groupedView;\n            var resources = this.groupedResources;\n\n            if (resources.length) {\n                if (this._isVerticallyGrouped()) {\n                    verticalGroupCount = groupedView._verticalRowCountForLevel(resources.length - 1);\n                }\n            }\n\n            for (var verticalGroupIdx = 0; verticalGroupIdx < verticalGroupCount; verticalGroupIdx++) {\n                html += this._createCalendar(verticalGroupIdx);\n                this._cachedGroupIndex = verticalGroupIdx;\n            }\n\n            html += \"</tbody>\";\n\n            this.content.find(\"table\").html(html);\n        },\n\n        _virtualContent: function() {\n            var that = this;\n            var html = '';\n\n            html += this._createCalendar(++this._cachedGroupIndex);\n\n            that.content.find(\"table tbody\").append(html);\n\n            that._initSlotHeight();\n        },\n\n        _calcSlotHeight: function(eventsPerDay) {\n            var options = this.options;\n            var eventHeight = options.eventHeight;\n            var eventSpacing = options.eventSpacing;\n            var moreButtonHeight = options.moreButtonHeight;\n            var firstCell = this.content.find(\"table tr td\")[0];\n            var dateHeader;\n\n            if (eventHeight === \"auto\" || !firstCell) {\n                return undefined;\n            }\n\n            dateHeader = firstCell.firstChild;\n\n            return Math.round(\n                // border of cell\n                ( firstCell.offsetHeight - firstCell.clientHeight ) +\n\n                // top padding\n                dateHeader.offsetTop +\n\n                // height of date header\n                dateHeader.offsetHeight +\n\n                // cell inner spacing\n                CELL_INNER_SPACING +\n\n                // all visible events and spacing\n                ( eventsPerDay * eventHeight ) + ( ( eventsPerDay - 1 ) * eventSpacing ) +\n\n                // leading space, more button\n                ( CELL_INNER_SPACING + moreButtonHeight ) +\n\n                // traling spacing\n                CELL_INNER_SPACING\n            );\n        },\n\n        _initSlotHeight: function() {\n            var options = this.options;\n            var eventsPerDay = options.eventsPerDay;\n            var eventHeight = options.eventHeight;\n            var isMobile = this._isMobile();\n            var table = this.content.find(\"table\");\n            var rowHeight;\n\n            if (isMobile) {\n                return;\n            }\n\n            if (typeof eventHeight === \"number\") {\n                rowHeight = this._calcSlotHeight(eventsPerDay);\n\n                table.find(\"tr\").height( rowHeight );\n\n                // table.addClass(\"k-scheduler-table-auto\");\n            }\n        },\n\n        _sortEventMeta: function(slot) {\n            slot.eventMeta.sort(function(first, second) {\n                return first.order - second.order;\n            });\n        },\n\n        _adjustSlotHeight: function(group) {\n            var that = this;\n            var options = this.options;\n            var eventHeight = options.eventHeight;\n            var eventSpacing = options.eventSpacing;\n            var moreButtonHeight = options.moreButtonHeight;\n\n            if (this._canAdjustSlotHeight !== true) {\n                return;\n            }\n\n            var weeks = group._daySlotCollections;\n\n            weeks.forEach(function(week) {\n                var events = week._events;\n                var eventIndex = 0;\n                var slots = week._slots;\n                var firstSlot = slots[0];\n                var weekOffsetTop = firstSlot.element.offsetTop;\n                var weekHeight = 0;\n\n                // Ensure event meta exists in each slot\n                slots.forEach(function(slot) {\n                    if (!slot.eventMeta) {\n                        slot.eventMeta = [];\n                        slot.actualEventCount = 0;\n                    } else {\n                        slot.actualEventCount = slot.eventMeta.length;\n                    }\n                });\n\n                // Ensure spanning event meta is present in all related slots\n                slots.forEach(function(slot, slotIndex) {\n\n                    for (let i = 0; i < slot.eventMeta.length; i++) {\n                        let meta = slot.eventMeta[i];\n                        // Skip events not starting in this slot\n                        if (meta.startIndex !== slotIndex) {\n                            return;\n                        }\n\n                        // Skip non-spanning events\n                        if (meta.startIndex === meta.endIndex) {\n                            return;\n                        }\n\n                        // Copy spanning event meta in all related slots\n                        slots.slice(slotIndex, meta.endIndex + 1).forEach(function(adjSlot) {\n\n                            var adjMeta = adjSlot.eventMeta;\n\n                            if (adjMeta.indexOf(meta) > -1) {\n                                return;\n                            }\n\n                            // adjMeta.push(meta);\n                            adjMeta[adjMeta.length] = slot.eventMeta[i];\n                            adjSlot.actualEventCount = adjMeta.length;\n                            adjSlot.dirty = true;\n                        });\n                    }\n\n                    // Set correct order\n                    if (slot.dirty === true) {\n                        that._sortEventMeta(slot);\n                        delete slot.dirty;\n                    }\n\n                });\n\n                if (eventHeight === \"auto\") {\n                    slots.forEach(function(slot, slotIndex) {\n                        let slotHeight = slot.firstChildTop + slot.firstChildHeight + CELL_INNER_SPACING;\n                        for (let i = 0; i < slot.eventMeta.length; i++) {\n                            let meta = slot.eventMeta[i];\n                            meta.top = Math.max(meta.top, weekOffsetTop + slotHeight);\n                            slotHeight = (meta.top - weekOffsetTop) + eventSpacing + meta.height;\n                        }\n                    });\n                }\n\n                // Position events\n                slots.forEach(function(slot, slotIndex) {\n                    var slotHeight = slot.firstChildTop + slot.firstChildHeight + CELL_INNER_SPACING;\n\n                    for (let i = 0; i < slot.eventMeta.length; i++) {\n                        let meta = slot.eventMeta[i];\n                        meta.top = Math.max(meta.top, weekOffsetTop + slotHeight);\n                        slotHeight = (meta.top - weekOffsetTop) + eventSpacing + meta.height;\n\n                        if (meta.startIndex === slotIndex) {\n                            events[eventIndex].element[0].style.top = meta.top + \"px\";\n                            eventIndex++;\n                        }\n                    }\n\n                    if (slot.eventMeta.length > 0) {\n                        slotHeight -= eventSpacing;\n                        slotHeight += CELL_INNER_SPACING;\n                    } else {\n                        slotHeight += (eventHeight === \"auto\" ? 25 : eventHeight);\n                    }\n\n                    if (slot.more) {\n                        slot.more[0].style.top = weekOffsetTop + slotHeight + \"px\";\n                        slotHeight += CELL_INNER_SPACING + moreButtonHeight;\n                    }\n\n                    weekHeight = Math.max(weekHeight, slotHeight + 1);\n\n                });\n\n                // Update slot size and meta\n                firstSlot.element.parentNode.style.height = weekHeight + \"px\";\n                slots.forEach(function(slot) {\n                    slot.offsetTop = weekOffsetTop;\n                    slot.offsetHeight = weekHeight;\n                    slot.clientHeight = weekHeight - 1;\n                });\n\n            });\n        },\n\n        _initTimesHeight: function() {\n            var that = this;\n            var times = that.times;\n            var isSetHeight = that._isSchedulerHeightSet();\n            var contentDiv = that.content[0];\n\n            if (times && !isSetHeight) {\n                times.height(contentDiv.clientHeight);\n            }\n        },\n\n        _createCalendar: function(verticalGroupIndex) {\n            var start = this.startDate();\n            var cellCount = NUMBER_OF_COLUMNS * NUMBER_OF_ROWS;\n            var cellsPerRow = NUMBER_OF_COLUMNS;\n            var weekStartDates = [start];\n            var html = '';\n            var horizontalGroupCount = 1;\n            var isVerticallyGrouped = this._isVerticallyGrouped();\n            var groupedView = this._groupedView;\n\n            var resources = this.groupedResources;\n\n            if (resources.length) {\n                if (!isVerticallyGrouped) {\n                    horizontalGroupCount = groupedView._horizontalGroupCountForLevel(resources.length - 1);\n                }\n            }\n\n            this._slotIndices = {};\n\n            var calendarRowsLength = groupedView._getCalendarRowsLength(cellsPerRow, cellCount);\n\n            for (var rowIdx = 0; rowIdx < calendarRowsLength; rowIdx++) {\n                html += \"<tr>\";\n\n                weekStartDates.push(start);\n\n                var startIdx = rowIdx * cellsPerRow;\n\n                html += groupedView._createRows(start, startIdx, horizontalGroupCount, verticalGroupIndex);\n                start = groupedView._adjustStartDate(start, rowIdx === calendarRowsLength - 1);\n\n                html += \"</tr>\";\n            }\n\n            this._weekStartDates = weekStartDates;\n            this._endDate = kendo.date.previousDay(start);\n\n            return html;\n        },\n\n        _createRow: function(startDate, startIdx, cellsPerRow, groupIndex) {\n            var that = this;\n            var min = that._firstDayOfMonth;\n            var max = that._lastDayOfMonth;\n            var content = that.dayTemplate;\n            var classes = \"\";\n            var html = \"\";\n            var groupedView = this._groupedView;\n\n            var resources = function() {\n                return that._resourceBySlot({ groupIndex: groupIndex });\n            };\n\n            for (var cellIdx = 0; cellIdx < cellsPerRow; cellIdx++) {\n                classes = \"\";\n\n                if (kendo.date.isToday(startDate)) {\n                    classes += \"k-today\";\n                }\n\n                if (!kendo.date.isInDateRange(startDate, min, max)) {\n                    classes += \" k-other-month\";\n                }\n\n                html += \"<td \";\n\n                if (classes !== \"\") {\n                    html += 'class=\"' + classes + '\"';\n                }\n\n                html += \">\";\n                html += groupedView._getContent(content, startDate, resources, cellIdx);\n                html += \"</td>\";\n\n                that._slotIndices[getDate(startDate).getTime()] = startIdx + cellIdx;\n\n                startDate = groupedView._nextSlotStartDate(startDate);\n            }\n\n            return html;\n        },\n\n        _layout: function() {\n            var calendarInfo = this.calendarInfo();\n\n            var weekDayNames = this._isMobile() ? calendarInfo.days.namesShort.map(function(name) {\n                return name[0];\n            }) : calendarInfo.days.names;\n\n            var names = shiftArray(weekDayNames, calendarInfo.firstDay);\n            var columns = $.map(names, function(value) { return { text: value }; });\n            var resources = this.groupedResources;\n            var rows;\n            var groupedView = this._groupedView;\n\n            if (resources.length) {\n                if (this._isVerticallyGrouped()) {\n                    var inner = []; //add hidden cells in order to sync the content rows\n                    for (var idx = 0; idx < 6; idx++) {\n                        inner.push({ text: \"<div>&nbsp;</div>\", className: \"k-hidden k-slot-cell\" });\n                    }\n                    rows = groupedView._createRowsLayout(resources, inner, this.groupHeaderTemplate, columns);\n                    columns = groupedView._createVerticalColumnsLayout(resources, inner, this.groupHeaderTemplate, columns);\n\n                } else {\n                    columns = groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n                }\n            }\n\n            return {\n                columns: columns,\n                rows: rows\n            };\n        },\n\n        _createEventElement: function(event) {\n            var options = this.options;\n            var editable = options.editable;\n\n            var isMobile = this._isMobile();\n\n            event.showDelete = editable && editable.destroy !== false && !isMobile;\n            event.resizable = editable && editable.resize !== false && !isMobile;\n            event.ns = kendo.ns;\n            event.resources = this.eventResources(event);\n            event.inverseColor = false;\n            event.messages = options.messages || { destroy: \"Delete\" };\n\n            var element = $(this.eventTemplate($.extend({}, event, {\n                ariaLabel: this._formatEventAriaLabel(event.title, event.start, event.end, event.isAllDay),\n                template: this.options.eventTemplate\n            })));\n\n            kendo.applyStylesFromKendoAttributes(element, [\"background-color\", \"border-color\"]);\n\n            return element;\n        },\n\n        _isInDateSlot: function(event) {\n            if (!this.groups || this.groups.length === 0) {\n                return false;\n            }\n\n            var groups = this.groups[0];\n            var slotStart = groups.firstSlot().start;\n            var slotEnd = groups.lastSlot().end - 1;\n\n            var startTime = kendo.date.toUtcTime(event.start);\n            var endTime = kendo.date.toUtcTime(event.end);\n\n            return (isInDateRange(startTime, slotStart, slotEnd) ||\n                isInDateRange(endTime, slotStart, slotEnd) ||\n                isInDateRange(slotStart, startTime, endTime) ||\n                isInDateRange(slotEnd, startTime, endTime)) &&\n                (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay );\n        },\n\n        _slotIndex: function(date) {\n            return this._slotIndices[getDate(date).getTime()];\n        },\n\n        _positionMobileEvent: function(slotRange, element, group) {\n            var startSlot = slotRange.start,\n                tableEl = this.table.find(\".k-scheduler-content .k-scheduler-table\")[0],\n                contentEl = this.table.find(\".k-scheduler-content\")[0],\n                offsetLeft;\n\n            if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {\n               startSlot = slotRange.end;\n            }\n\n            var startIndex = slotRange.start.index;\n            var endIndex = startIndex;\n\n            var eventCount = 3;\n            var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n\n            events.push({ element: element, start: startIndex, end: endIndex });\n\n            var rows = SchedulerView.createRows(events);\n\n            var slot = slotRange.collection.at(startIndex);\n\n            var container = slot.container;\n\n            if (!container) {\n                if (this._isRtl && contentEl.clientWidth < contentEl.scrollWidth) {\n                    // RTL mobile rendering with horizontal scroll\n                    offsetLeft = startSlot.offsetLeft - (tableEl.clientWidth - contentEl.clientWidth) + \"px\";\n                } else {\n                    offsetLeft = startSlot.offsetLeft + \"px\";\n                }\n\n                container = $('<div class=\"k-events-container\"></div>').css({\n                    top: startSlot.offsetTop + startSlot.firstChildTop + startSlot.firstChildHeight + \"px\",\n                    left: offsetLeft,\n                    width: startSlot.offsetWidth + \"px\"\n                });\n\n                slot.container = container;\n\n                this.content[0].appendChild(container[0]);\n            }\n\n            if (rows.length <= eventCount) {\n                slotRange.addEvent({ element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });\n\n                group._continuousEvents.push({\n                    element: element,\n                    uid: element.attr(kendo.attr(\"uid\")),\n                    start: slotRange.start,\n                    end: slotRange.end\n                });\n\n                container[0].appendChild(element[0]);\n            }\n        },\n\n        _positionEvent: function(slotRange, element, group) {\n            var eventHeight = this.options.eventHeight;\n            var eventSpacing = this.options.eventSpacing;\n            var startSlot = slotRange.start;\n\n            if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {\n                startSlot = slotRange.end;\n            }\n\n            var startIndex = slotRange.start.index;\n            var endIndex = slotRange.end.index;\n            var eventCount = startSlot.eventCount;\n            var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n            var rightOffset = startIndex !== endIndex ? 3 : 2;\n\n            events.push({ element: element, start: startIndex, end: endIndex });\n\n            var rows = SchedulerView.createRows(events);\n\n            for (var idx = 0, length = Math.min(rows.length, eventCount); idx < length; idx++) {\n                var rowEvents = rows[idx].events;\n                var eventTop = (eventHeight === \"auto\")\n                    ? \"\"\n                    : (\n                        startSlot.offsetTop +\n                        startSlot.firstChildTop +\n                        startSlot.firstChildHeight +\n                        CELL_INNER_SPACING +\n                        idx * (eventHeight + eventSpacing) +\n                        \"px\"\n                    );\n\n                for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {\n                    rowEvents[j].element[0].style.top = eventTop;\n                    rowEvents[j].element.attr(kendo.attr(\"order\"), idx);\n                }\n            }\n\n            if (rows.length > eventCount) {\n                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n                    var collection = slotRange.collection;\n\n                    var slot = collection.at(slotIndex);\n\n                    if (slot.more) {\n                        continue;\n                    }\n\n                    slot.more = $(MORE_BUTTON_TEMPLATE()).css({\n                        width: slot.clientWidth - 2,\n                        left: slot.offsetLeft + 2,\n                        top: (eventHeight === \"auto\")\n                            ? \"\"\n                            : (\n                                slot.offsetTop +\n                                slot.firstChildTop +\n                                slot.firstChildHeight +\n                                CELL_INNER_SPACING +\n                                (eventCount * eventHeight) +\n                                ( (eventCount - 1) * eventSpacing) +\n                                CELL_INNER_SPACING\n                            )\n                    });\n\n                    this.content[0].appendChild(slot.more[0]);\n                }\n            } else {\n                slotRange.addEvent({ element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });\n\n                element[0].style.width = slotRange.innerWidth() - rightOffset + \"px\";\n                element[0].style.left = startSlot.offsetLeft + 2 + \"px\";\n                element[0].style.height = (eventHeight === \"auto\") ? \"\" : eventHeight + \"px\";\n\n                group._continuousEvents.push({\n                    element: element,\n                    uid: element.attr(kendo.attr(\"uid\")),\n                    start: slotRange.start,\n                    end: slotRange.end,\n                    order: parseInt(element.attr(kendo.attr(\"order\")), 10)\n                });\n\n                element.appendTo(this.content);\n\n                this._inverseEventColor(element);\n\n                // Add event meta to slot\n                var _collectionIndex = slotRange.start.collectionIndex;\n                var _startSlotIndex = slotRange.start.index;\n                var _startSlot = group._daySlotCollections[_collectionIndex]._slots[_startSlotIndex];\n\n                if (!_startSlot.eventMeta) {\n                    _startSlot.eventMeta = [];\n                }\n\n                _startSlot.eventMeta.push({\n                    height: (eventHeight === \"auto\") ? element.outerHeight() : eventHeight,\n                    top: 0,\n                    startIndex: _startSlotIndex,\n                    endIndex: slotRange.end.index,\n                    uid: element.attr(kendo.attr(\"uid\")),\n                    order: parseInt(element.attr(kendo.attr(\"order\")), 10)\n                });\n            }\n        },\n\n        _slotByPosition: function(x, y) {\n            var offset = this.content.offset();\n\n            x -= offset.left;\n            y -= offset.top;\n            y += this.content[0].scrollTop;\n            x += this.content[0].scrollLeft;\n\n            x = Math.ceil(x);\n            y = Math.ceil(y);\n\n            for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                var slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);\n\n                if (slot) {\n                    return slot;\n                }\n            }\n\n            return null;\n        },\n\n        _appendResizeHint: function(hint) {\n            hint.appendTo(this.content);\n\n            this._resizeHint = this._resizeHint.add(hint);\n        },\n\n        _updateResizeHint: function(event, groupIndex, startTime, endTime) {\n            this._removeResizeHint();\n\n            var group = this.groups[groupIndex];\n\n            var ranges = group.ranges(startTime, endTime, true, event.isAllDay);\n\n            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                this._groupedView._createResizeHint(ranges[rangeIndex]);\n            }\n\n            this._resizeHint.find(\".k-label-top,.k-label-bottom\").text(\"\");\n\n            this._resizeHint.first().addClass(\"k-first\").find(\".k-label-top\").text(kendo.toString(kendo.timezone.toLocalDate(startTime), \"M/dd\"));\n\n            this._resizeHint.last().addClass(\"k-last\").find(\".k-label-bottom\").text(kendo.toString(kendo.timezone.toLocalDate(endTime), \"M/dd\"));\n        },\n\n        _updateMoveHint: function(event, groupIndex, distance) {\n            var start = kendo.date.toUtcTime(event.start) + distance;\n\n            var end = start + event.duration();\n\n            var group = this.groups[groupIndex];\n\n            var ranges = group.ranges(start, end, true, event.isAllDay);\n\n            this._removeMoveHint(event.uid);\n\n            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                this._groupedView._createMoveHint(ranges[rangeIndex], event);\n            }\n        },\n\n        _appendMoveHint: function(hint) {\n            hint.appendTo(this.content);\n\n            this._moveHint = this._moveHint.add(hint);\n        },\n\n        _groups: function() {\n            var groupCount = this._groupCount();\n            var tableRows = this.content[0].getElementsByTagName(\"tr\");\n            var startDate = this.startDate();\n            this.groups = [];\n\n            for (var idx = 0; idx < groupCount; idx++) {\n                this._addResourceView(idx);\n            }\n\n            this._groupedView._addDaySlotCollections(groupCount, tableRows, startDate);\n        },\n\n\n        addDaySlot: function(collection, cell, startDate, cellCount) {\n            var start = kendo.date.addDays(startDate, cellCount);\n            var end = kendo.date.MS_PER_DAY;\n            var eventsPerDay = this.options.eventsPerDay;\n\n            if (startDate.getHours() !== start.getHours()) {\n                end += (startDate.getHours() - start.getHours()) * kendo.date.MS_PER_HOUR;\n            }\n\n            start = kendo.date.toUtcTime(start);\n            end += start;\n\n            collection.addDaySlot(cell, start, end, eventsPerDay);\n        },\n\n        render: function(events) {\n            this.content.children(\".k-event,.k-more-events,.k-events-container\").remove();\n\n            this._cachedEvents = events;\n\n            this._groups();\n\n            events = new kendo.data.Query(events)\n                .sort([{ field: \"start\", dir: \"asc\" },{ field: \"end\", dir: \"desc\" }])\n                .toArray()\n                .filter(function(event) {\n                    return this._isInDateSlot(event);\n                }.bind(this));\n\n            var resources = this.groupedResources;\n            var isMobile = this._isMobile();\n            var isGroupedByDate = this._isGroupedByDate();\n            var adaptiveSlotHeight = this.options.adaptiveSlotHeight;\n\n            this._canAdjustSlotHeight = isMobile !== true && isGroupedByDate !== true && resources.length === 0 && adaptiveSlotHeight === true;\n\n            if (resources.length) {\n                this._renderGroups(events, resources, 0, 1);\n            } else {\n                this._renderEvents(events, 0);\n            }\n\n            this.refreshLayout();\n            this._ongoingEvents(events);\n\n            this.trigger(\"activate\");\n        },\n\n        _renderEvents: function(events, groupIndex) {\n            var group = this.groups[groupIndex];\n            var view = this._groupedView._view;\n            var isMobile = view._isMobile();\n\n            if (!group) {\n                return;\n            }\n\n            if (!group._continuousEvents) {\n                group._continuousEvents = [];\n            }\n\n            if (isMobile) {\n\n                events.forEach(function(event) {\n                    var ranges = group.slotRanges(event, true);\n                    var range = ranges[0];\n                    var start = range.start.start;\n                    var end = range.end.end;\n                    var rangeStart = new Date(range.start.start);\n                    var rangeEnd = ranges[ranges.length - 1].end.end;\n                    var newStart = new Date(rangeStart);\n                    var newEnd = new Date(end);\n\n                    while (rangeStart.getTime() <= rangeEnd &&\n                        event.end >= kendo.timezone.toLocalDate(rangeStart) &&\n                        event.start <= kendo.timezone.toLocalDate(rangeEnd)) {\n                        var dateRange = group.daySlotRanges(newStart.getTime(), newEnd.getTime(), true)[0];\n                        newEnd.setDate(newEnd.getDate() + 1);\n                        newStart.setDate(newStart.getDate() + 1);\n\n                        if (dateRange) {\n                            dateRange.head = null;\n                            dateRange.middle = null;\n                            dateRange.tail = null;\n                            this._groupedView._positionMobileEvent(event, group, dateRange, 1, start, end, 0);\n                        }\n\n                        rangeStart = kendo.date.addDays(rangeStart, 1);\n                    }\n\n                }.bind(this));\n\n            } else {\n\n                events.forEach(function(event) {\n                    var range;\n                    var start = event.start;\n                    var end = event.end;\n                    var ranges = group.slotRanges(event, true);\n                    var rangeCount = ranges.length;\n\n                    for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {\n                        range = ranges[rangeIndex];\n\n                        this._groupedView._positionEvent(event, group, range, rangeCount, start, end, rangeIndex);\n                    }\n\n                }.bind(this));\n\n                if (this._canAdjustSlotHeight === true) {\n                    this._adjustSlotHeight(group);\n                }\n\n            }\n        },\n\n        _renderGroups: function(events, resources, offset, columnLevel, parentValue) {\n            var resource = resources[0];\n\n            if (resource) {\n                var view = resource.dataSource.view();\n\n                view = view.filter(function(item) {\n                    var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                    return itemParentValue === null || itemParentValue === undefined || itemParentValue === parentValue;\n                });\n\n                for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {\n                    var value = this._resourceValue(resource, view[itemIdx]);\n\n                    var tmp = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();\n\n                    if (resources.length > 1) {\n                        offset = this._renderGroups(tmp, resources.slice(1), offset++, columnLevel + 1, value);\n                    } else {\n                        this._renderEvents(tmp, offset++);\n                    }\n                }\n            }\n            return offset;\n        },\n\n        _groupCount: function() {\n            var resources = this.groupedResources;\n            var groupedView = this._groupedView;\n\n            if (resources.length) {\n                if (this._isVerticallyGrouped()) {\n                    return groupedView._verticalGroupCount(resources.length - 1);\n                } else {\n                    return groupedView._horizontalGroupCount(resources.length);\n                }\n            }\n            return 1;\n        },\n\n        _columnOffsetForResource: function(index) {\n            return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);\n        },\n\n        destroy: function() {\n            if (this.table) {\n                this.table.removeClass(\"k-scheduler-monthview\");\n            }\n\n            if (this.content) {\n                this.content.off(NS);\n            }\n\n            if (this.element) {\n                this.element.off(NS);\n            }\n\n            SchedulerView.fn.destroy.call(this);\n\n            if (this._isMobile() && this.options.editable) {\n                if (this.options.editable.create !== false) {\n                    this._addUserEvents.destroy();\n                }\n            }\n        },\n\n        events: [\"remove\", \"add\", \"edit\", \"navigate\"],\n\n        options: {\n            title: \"Month\",\n            name: \"month\",\n            eventHeight: 25,\n            moreButtonHeight: 13,\n            editable: true,\n            selectedDateFormat: \"{0:y}\",\n            selectedShortDateFormat: \"{0:y}\",\n            selectedMobileDateFormat: \"{0:MMMM}\",\n            groupHeaderTemplate: ({ text }) => text,\n            dayTemplate: DAY_TEMPLATE,\n            eventTemplate: EVENT_TEMPLATE,\n            eventsPerDay: 2,\n            adaptiveSlotHeight: false,\n            eventSpacing: 3,\n            ongoingEvents: {\n                cssClass: null,\n                enabled: true,\n                updateInterval: 60000\n            }\n        }\n    });\n\n\n    function shiftArray(array, idx) {\n        return array.slice(idx).concat(array.slice(0, idx));\n    }\n\n    function firstVisibleMonthDay(date, calendarInfo) {\n        var firstDay = calendarInfo.firstDay,\n            firstVisibleDay = new Date(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n\n        while (firstVisibleDay.getDay() != firstDay) {\n            kendo.date.setTime(firstVisibleDay, -1 * MS_PER_DAY);\n        }\n\n        return firstVisibleDay;\n    }\n\n    function isInDateRange(value, min, max) {\n        var msMin = min,\n            msMax = max,\n            msValue;\n\n        msValue = value;\n\n        return msValue >= msMin && msValue <= msMax;\n    }\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}