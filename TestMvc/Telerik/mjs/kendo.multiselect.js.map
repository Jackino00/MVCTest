{"version":3,"sources":["raw-mjs/kendo.multiselect.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","features","$","undefined$1","kendo","window","ui","List","encode","htmlEncode","html","keys","extend","A","activeElement","_activeElement","ObservableArray","data","ID","CHIP","ACCEPT","FILTER","REBIND","OPEN","CLOSE","CHANGE","SELECT","DESELECT","ARIA_DISABLED","ARIA_READONLY","ARIA_EXPANDED","ARIA_HIDDEN","ARIA_ACTIVEDESCENDANT","FOCUSEDCLASS","SELECTEDCLASS","HOVERCLASS","STATEDISABLED","NOCLICKCLASS","DISABLED","READONLY","ns","CLICK","KEYDOWN","MOUSEENTER","MOUSELEAVE","HOVEREVENTS","quotRegExp","isArray","Array","styles","MultiSelect","init","element","options","that","this","fn","call","_optionsMap","_customOptions","_wrapper","_inputValuesContainer","_tagList","_input","_textContainer","_clearButton","_arrowButton","_tabindex","input","attr","hide","placeholder","guid","_tagID","tagList","_initialOpen","label","_label","_aria","_dataSource","_ignoreCase","_popup","_tagTemplate","requireValueMapper","_initList","_reset","_enable","_placeholder","autoBind","dataSource","fetch","value","_preselect","parents","is","enable","_toggleCloseVisibility","_applyCssClasses","widget","wrapper","prefixInsertBefore","suffixInsertAfter","clearButton","_clear","find","floatingLabel","refresh","notify","tagMode","enabled","autoClose","highlightFirst","dataTextField","dataValueField","filter","ignoreCase","minLength","messages","singleTag","clear","deleteTag","noData","downArrow","enforceMinLength","delay","maxSelectedItems","height","animation","virtual","itemTemplate","tagTemplate","groupTemplate","fixedGroupTemplate","prefixOptions","separator","suffixOptions","autoWidth","popup","size","fillMode","rounded","events","setDataSource","_state","persistTagList","listView","setOptions","listOptions","_listOptions","_accessors","currentTag","candidate","_currentTag","removeClass","removeAttr","addClass","dataItems","selectedDataItems","destroy","clearTimeout","_busy","_typingTimeout","filterInput","off","_onActionSheetCreate","on","_keydown","bind","_search","role","val","trigger","ul","autocomplete","tagListId","_ariaLabel","_focused","_activateItem","visible","selectedItemChange","_selectedItemChange","selectable","template","getter","_setListValue","_initialValues","slice","_listChange","e","flatView","optionsMap","valueGetter","_value","i","added","length","dataItem","_render","_selectValue","removed","context","idx","items","children","eq","index","first","tagTextTemplate","item","_wrapperMousedown","notInput","target","nodeName","toLowerCase","closeButton","closest","removeButton","support","mobileOS","cancelable","preventDefault","toggle","open","_inputFocus","_inputFocusout","relatedTarget","close","skipUpdate","bound","isFiltered","_clearFilter","_removeTag","tag","shouldTrigger","option","state","position","customIndex","listViewChildren","_close","done","_change","_refreshTagListAria","select","selected","removeAt","_removedAddedIndexes","splice","classList","remove","_updateTagListHTML","_tagListClick","stopPropagation","currentTarget","_clearValue","_clearSingleTagValue","each","focus","_hideClear","tags","_focusHandler","active","_editable","disable","readonly","toggleClass","prop","_toggleHover","_filterSource","force","_retrieveData","_activeItem","filterValue","listViewFilter","listViewFilterValue","filters","toString","_request","_open","_focusItem","_allowOpening","isPlainObject","_hovered","altTarget","add","_floatCheck","_listBound","_renderFooter","_renderNoData","_toggleNoData","_resizePopup","_updateItemFocus","_touchScroller","reset","_hideBusy","skip","isFirstPage","focusFirst","_inputValue","inputValue","oldValue","clearFilters","_normalizeValues","_old","_valueBeforeCascade","_fetchData","ObservableObject","_setOption","hasItems","view","_fetch","read","_isBound","fields","field","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_endRequestHandler","_errorHandler","DataSource","create","formId","form","_resetHandler","setTimeout","_form","_initValue","map","a","b","compare","_click","_select","_getActiveItem","_getSelectedIndices","_selectedIndices","_selectedIndexes","activeItemIdx","key","keyCode","hasValue","isRtl","dir","handled","ENTER","_multipleSelection","DOWN","shiftKey","getElementIndex","focusNext","_selectRange","focusLast","UP","focusPrev","LEFT","RIGHT","prev","last","next","ctrlKey","altKey","hasClass","SPACEBAR","activeIndex","currentIndex","ESC","HOME","END","DELETE","BACKSPACE","PAGEDOWN","PAGEUP","direction","scrollWith","screenHeight","show","skipCaret","isActive","caretPos","_prev","caret","_option","dataValue","dataText","indexOf","replace","selectedIndex","selectedItems","values","_buildSelectedItems","custom","_selectedItemIndex","_text","valueField","textField","result","push","noDelay","_performSearch","search","_showClear","_allowSelection","max","updatePersistTagList","removedItem","addedItem","total","removeChild","append","applyStylesFromKendoAttributes","_maxTotal","_refreshFloatingLabel","renderChipList","maxTotal","currentTotal","resolved","Deferred","resolve","dataItemByIndex","isSelected","_selectIndices","indices","forEach","startIndex","endIndex","indicesToSelect","accessKey","appendTo","title","inputValuesContainer","defaultTemplate","hasDataSource","isMultiple","renderChip","themeColor","text","unselectable","removable","removableAttr","icon","iconAttr","insertAfter","arrowTitle","arrow","renderButton","_arrow","tabIndex","computedStyles","getComputedStyles","visibility","top","left","_span","css","parent","wrap","style","cssText","className","_closeHandler","_openHandler","_adjustListWidth","plugin","cssProperties","registerPrefix","registerValues","roundedValues","concat","jQuery","kendo$1"],"mappings":"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","file":"kendo.multiselect.js","sourcesContent":["import './kendo.list.js';\nimport './kendo.mobile.scroller.js';\nimport './kendo.virtuallist.js';\nimport './kendo.html.chip.js';\nimport './kendo.html.chiplist.js';\nimport './kendo.html.button.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"multiselect\",\n    name: \"MultiSelect\",\n    category: \"web\",\n    description: \"The MultiSelect widget allows the selection from pre-defined values.\",\n    depends: [\"list\", \"html.chip\", \"html.chiplist\", \"html.button\", \"prefix-suffix-containers.chunk\"],\n    features: [ {\n        id: \"mobile-scroller\",\n        name: \"Mobile scroller\",\n        description: \"Support for kinetic scrolling in mobile device\",\n        depends: [ \"mobile.scroller\" ]\n    }, {\n        id: \"virtualization\",\n        name: \"VirtualList\",\n        description: \"Support for virtualization\",\n        depends: [ \"virtuallist\" ]\n    } ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        List = ui.List,\n        encode = kendo.htmlEncode,\n        html = kendo.html,\n        keys = $.extend({ A: 65 }, kendo.keys),\n        activeElement = kendo._activeElement,\n        ObservableArray = kendo.data.ObservableArray,\n        ID = \"id\",\n        CHIP = \".k-chip\",\n        ACCEPT = \"accept\",\n        FILTER = \"filter\",\n        REBIND = \"rebind\",\n        OPEN = \"open\",\n        CLOSE = \"close\",\n        CHANGE = \"change\",\n        PROGRESS = \"progress\",\n        SELECT = \"select\",\n        DESELECT = \"deselect\",\n        ARIA_DISABLED = \"aria-disabled\",\n        ARIA_READONLY = \"aria-readonly\",\n        ARIA_EXPANDED = \"aria-expanded\",\n        ARIA_HIDDEN = \"aria-hidden\",\n        ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n        ARIA_BUSY = \"aria-busy\",\n        FOCUSEDCLASS = \"k-focus\",\n        SELECTEDCLASS = \"k-selected\",\n        HIDDENCLASS = \"k-hidden\",\n        HOVERCLASS = \"k-hover\",\n        STATEDISABLED = \"k-disabled\",\n        NOCLICKCLASS = \"k-no-click\",\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        AUTOCOMPLETEVALUE = \"off\",\n        ns = \".kendoMultiSelect\",\n        CLICK = \"click\" + ns,\n        KEYDOWN = \"keydown\" + ns,\n        MOUSEENTER = \"mouseenter\" + ns,\n        MOUSELEAVE = \"mouseleave\" + ns,\n        HOVEREVENTS = MOUSEENTER + \" \" + MOUSELEAVE,\n        quotRegExp = /\"/g,\n        isArray = Array.isArray,\n        styles = [\"font-family\",\n                  \"font-size\",\n                  \"font-stretch\",\n                  \"font-style\",\n                  \"font-weight\",\n                  \"letter-spacing\",\n                  \"text-transform\",\n                  \"line-height\"];\n\n    var MultiSelect = List.extend({\n        init: function(element, options) {\n            var that = this, id, disabled;\n\n            that.ns = ns;\n            List.fn.init.call(that, element, options);\n\n            that._optionsMap = {};\n            that._customOptions = {};\n\n            that._wrapper();\n            that._inputValuesContainer();\n            that._tagList();\n            that._input();\n            that._textContainer();\n            that._clearButton();\n            that._arrowButton();\n\n            that._tabindex(that.input);\n\n            element = that.element.attr(\"multiple\", \"multiple\").hide();\n            options = that.options;\n\n            if (!options.placeholder) {\n                options.placeholder = element.data(\"placeholder\");\n            }\n\n            id = element.attr(ID);\n\n            if (!id) {\n                id = kendo.guid();\n            }\n\n            if (id) {\n                that._tagID = id + \"_tag_active\";\n                id = id + \"_taglist\";\n                that.tagList.attr(ID, id);\n            }\n\n            that._initialOpen = true;\n\n            if (options.label) {\n                this._label();\n            }\n\n            that._aria();\n\n            that._dataSource();\n            that._ignoreCase();\n            that._popup();\n\n            that._tagTemplate();\n            that.requireValueMapper(that.options);\n            that._initList();\n\n            that._reset();\n            that._enable();\n            that._placeholder();\n\n            if (options.autoBind) {\n                that.dataSource.fetch();\n            } else if (options.value) {\n                that._preselect(options.value);\n            }\n\n            disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n                that.enable(false);\n            }\n\n            that._toggleCloseVisibility();\n            that._applyCssClasses();\n\n            addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element.find(\"k-input-values\") });\n            if (that.floatingLabel) {\n                that.floatingLabel.refresh();\n            }\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"MultiSelect\",\n            tagMode: \"multiple\",\n            enabled: true,\n            autoBind: true,\n            autoClose: true,\n            highlightFirst: true,\n            dataTextField: \"\",\n            dataValueField: \"\",\n            filter: \"startswith\",\n            ignoreCase: true,\n            minLength: 1,\n            messages: {\n                \"singleTag\": \"item(s) selected\",\n                \"clear\": \"clear\",\n                \"deleteTag\": \"delete\",\n                \"noData\": \"No data found.\",\n                \"downArrow\": \"select\"\n            },\n            enforceMinLength: false,\n            delay: 100,\n            value: null,\n            maxSelectedItems: null,\n            placeholder: \"\",\n            height: 200,\n            animation: {},\n            virtual: false,\n            itemTemplate: \"\",\n            tagTemplate: \"\",\n            groupTemplate: (data) => encode(data),\n            fixedGroupTemplate: (data) => encode(data),\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            },\n            clearButton: true,\n            autoWidth: false,\n            popup: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            label: null\n        },\n\n        events: [\n            OPEN,\n            CLOSE,\n            CHANGE,\n            SELECT,\n            DESELECT,\n            \"filtering\",\n            \"dataBinding\",\n            \"dataBound\"\n        ],\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._state = \"\";\n            this._dataSource();\n\n            this.persistTagList = false;\n            this.listView.setDataSource(this.dataSource);\n\n            if (this.options.autoBind) {\n                this.dataSource.fetch();\n            }\n        },\n\n        setOptions: function(options) {\n            var listOptions = this._listOptions(options);\n\n            List.fn.setOptions.call(this, options);\n\n            this.listView.setOptions(listOptions);\n\n\n            this._accessors();\n            this._aria();\n            this._tagTemplate();\n            this._placeholder();\n            this._clearButton();\n            this._arrowButton();\n        },\n\n        currentTag: function(candidate) {\n            var that = this;\n\n            if (candidate !== undefined$1) {\n                if (that._currentTag) {\n                    that._currentTag\n                        .removeClass(FOCUSEDCLASS)\n                        .removeAttr(ID);\n\n                    that._currentTag.find(\".k-chip-action\").attr(ARIA_HIDDEN, true);\n\n                    that.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n                }\n\n                if (candidate) {\n                    candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);\n\n                    candidate.find(\".k-chip-action\").removeAttr(ARIA_HIDDEN);\n\n                    that.input.attr(ARIA_ACTIVEDESCENDANT, that._tagID);\n                }\n\n                that._currentTag = candidate;\n            } else {\n                return that._currentTag;\n            }\n        },\n\n        dataItems: function() {\n            return this.listView.selectedDataItems();\n        },\n\n        destroy: function() {\n            var that = this,\n                ns = that.ns;\n\n            clearTimeout(that._busy);\n            clearTimeout(that._typingTimeout);\n\n            if (that.filterInput) {\n                that.filterInput.off(ns);\n            }\n\n            that.wrapper.off(ns);\n            that.tagList.off(ns);\n            that.input.off(ns);\n            that._clear.off(ns);\n\n            List.fn.destroy.call(that);\n        },\n\n        _onActionSheetCreate: function() {\n            var that = this;\n\n            that.filterInput\n                .on(\"keydown\" + ns, that._keydown.bind(that))\n                .on(\"input\" + ns, that._search.bind(that))\n                .on(\"paste\" + ns, that._search.bind(that))\n                .attr({\n                    \"role\": \"combobox\",\n                    \"aria-expanded\": false,\n                    \"aria-controls\": that.input.attr(\"aria-controls\"),\n                    \"aria-autocomplete\": that.input.attr(\"aria-autocomplete\"),\n                    \"aria-describedby\": that.input.attr(\"aria-describedby\")\n                });\n\n            that.popup.bind(\"activate\", () => {\n                that.filterInput.val(that.input.val());\n                that.filterInput.trigger(\"focus\");\n            });\n\n            that.popup.bind(\"close\", () => {\n                that.input.trigger(\"focus\");\n            });\n        },\n\n        _aria: function() {\n            var that = this,\n                id = that.ul[0].id,\n                autocomplete = this.options.filter === \"none\" ? \"none\" : \"list\",\n                tagListId = that.tagList.attr(ID);\n\n            that.input.attr({\n                \"role\": \"combobox\",\n                \"aria-expanded\": false,\n                \"aria-controls\": id,\n                \"aria-autocomplete\": autocomplete,\n                \"aria-describedby\": tagListId\n            });\n\n            that._ariaLabel(that._focused);\n        },\n\n        _activateItem: function() {\n            if (this.popup.visible()) {\n                List.fn._activateItem.call(this);\n            }\n            this.currentTag(null);\n        },\n\n        _listOptions: function(options) {\n            var that = this;\n            var listOptions = List.fn._listOptions.call(that, $.extend(options, {\n                selectedItemChange: that._selectedItemChange.bind(that),\n                selectable: \"multiple\"\n            }));\n\n            var itemTemplate = this.options.itemTemplate || this.options.template;\n            var template = listOptions.itemTemplate || itemTemplate || listOptions.template;\n\n            if (!template) {\n                template = data => encode(kendo.getter(listOptions.dataTextField)(data));\n            }\n\n            listOptions.template = template;\n\n            return listOptions;\n        },\n\n        _setListValue: function() {\n            List.fn._setListValue.call(this, this._initialValues.slice(0));\n        },\n\n        _listChange: function(e) {\n            var data = this.dataSource.flatView();\n            var optionsMap = this._optionsMap;\n            var valueGetter = this._value;\n\n            if (this._state === REBIND) {\n                this._state = \"\";\n            }\n\n            for (var i = 0; i < e.added.length; i++) {\n                if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined$1) {\n                    this._render(data); //render select element <option> tags if the item does not persist in the current data view\n                    break;\n                }\n            }\n\n            this._selectValue(e.added, e.removed);\n        },\n\n        _selectedItemChange: function(e) {\n            var items = e.items;\n            var context;\n            var idx;\n\n            for (idx = 0; idx < items.length; idx++) {\n                context = items[idx];\n                this.tagList.children(CHIP).eq(context.index).children(\"span\").first().html(this.tagTextTemplate(context.item));\n            }\n        },\n\n        _wrapperMousedown: function(e) {\n            var that = this;\n            var notInput = e.target.nodeName.toLowerCase() !== \"input\";\n            var target = $(e.target);\n            var closeButton = target.closest(\".k-input-button, .k-chip\").children(\"[class*='-i-caret-alt-down']\")[0];\n            var removeButton = target.closest(\"[class*='-i-x']\")[0];\n\n            if (notInput && !(removeButton && kendo.support.mobileOS) && e.cancelable) {\n                e.preventDefault();\n            }\n\n            if (!removeButton) {\n                if (closeButton && that.popup.visible()) {\n                    that.toggle(false);\n                } else {\n                    if (that.input[0] !== activeElement() && notInput) {\n                        that.input.trigger(\"focus\");\n                    }\n\n                    if (that.options.minLength === 1 && !that.popup.visible()) {\n                        that.open();\n                    }\n                }\n            }\n\n        },\n\n        _inputFocus: function() {\n            this._placeholder(false, true);\n            this.wrapper.addClass(FOCUSEDCLASS);\n        },\n\n        _inputFocusout: function(e) {\n            var that = this;\n\n            if (that.filterInput && e.relatedTarget === that.filterInput[0]) {\n                return;\n            }\n\n            clearTimeout(that._typingTimeout);\n\n            that.wrapper.removeClass(FOCUSEDCLASS);\n\n            that._placeholder(!that.listView.selectedDataItems()[0], true);\n            that.close();\n\n            if (that._state === FILTER) {\n                that._state = ACCEPT;\n                that.listView.skipUpdate(true);\n            }\n\n            if (that.listView.bound() && that.listView.isFiltered()) {\n                that.persistTagList = true;\n                that._clearFilter();\n            }\n\n            that.element.trigger(\"blur\");\n        },\n\n        _removeTag: function(tag, shouldTrigger) {\n            var that = this;\n            var state = that._state;\n            var position = tag.index();\n            var listView = that.listView;\n            var value = listView.value()[position];\n            var dataItem = that.listView.selectedDataItems()[position];\n            var customIndex = that._customOptions[value];\n            var listViewChildren = listView.element[0].children;\n            var option;\n            var listViewChild;\n\n            if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {\n                that._close();\n                return;\n            }\n\n            if (customIndex === undefined$1 && (state === ACCEPT || state === FILTER)) {\n                customIndex = that._optionsMap[value];\n            }\n\n            var done = function() {\n                that.currentTag(null);\n                if (shouldTrigger) {\n                    that._change();\n                }\n\n                that._refreshTagListAria();\n                that._close();\n            };\n\n            if (customIndex === undefined$1 && listView.select().length) {\n                that.persistTagList = false;\n                listView.select(listView.select()[position]).done(done);\n            } else {\n                option = that.element[0].children[customIndex];\n                if (option) {\n                    option.selected = false;\n                }\n\n                listView.removeAt(position);\n\n                if (listView._removedAddedIndexes) {\n                    listView._removedAddedIndexes.splice(position, 1);\n                }\n\n                listViewChild = listViewChildren[customIndex];\n                if (listViewChild) {\n                    listViewChildren[customIndex].classList.remove(\"k-selected\");\n                }\n                if (that.options.tagMode !== \"single\") {\n                    tag.remove();\n                } else {\n                    that._updateTagListHTML();\n                }\n                done();\n            }\n        },\n\n        _tagListClick: function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            var target = $(e.currentTarget);\n\n            if (target.is(\"[class*='-i-x-circle']\")) {\n                this._removeTag(target.closest(CHIP), true);\n            }\n        },\n\n        _clearValue: function() {\n            var that = this;\n\n            if (that.options.tagMode === \"single\") {\n                that._clearSingleTagValue();\n            } else {\n                that.tagList.children(CHIP).each(function(index, tag) {\n                    that._removeTag($(tag), false);\n                });\n            }\n\n            that.input.val(\"\");\n            that._search(true);\n            that._change();\n            that.focus();\n            that._hideClear();\n\n            if (that._state === FILTER) {\n                that._state = ACCEPT;\n            }\n        },\n\n        _clearSingleTagValue: function() {\n            var that = this;\n            var items = that.dataItems();\n            var tags = that.tagList.children(CHIP);\n            var persistTagList = that.persistTagList;\n\n            for (var i = 0; i < items.length; i += 1) {\n                if (that.trigger(DESELECT, { dataItem: items[i], item: tags.first() })) {\n                    that._close();\n                    return;\n                }\n            }\n\n            if (persistTagList) {\n                that.persistTagList = false;\n            }\n\n            that.listView.value([]);\n            that.persistTagList = persistTagList;\n        },\n\n        _focusHandler: function() {\n            var input = this.input;\n            var active = activeElement();\n            var isActive = input[0] === active;\n\n            if (!isActive) {\n                this.input.trigger(\"focus\");\n            }\n        },\n\n        _editable: function(options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                wrapper = that.wrapper.off(ns),\n                tagList = that.tagList.off(ns),\n                input = that.input.off(ns);\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .removeClass(NOCLICKCLASS)\n                    .on(HOVEREVENTS, that._toggleHover)\n                    .on(\"mousedown\" + ns + \" touchend\" + ns, that._wrapperMousedown.bind(that))\n                    .on(CLICK, that._focusHandler.bind(that));\n\n                that.input.on(KEYDOWN, that._keydown.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"focus\" + ns, that._inputFocus.bind(that))\n                    .on(\"focusout\" + ns, that._inputFocusout.bind(that));\n\n                that._clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n\n                input.prop(DISABLED, false)\n                     .prop(READONLY, false)\n                     .attr(ARIA_DISABLED, false)\n                     .attr(ARIA_READONLY, false);\n\n                that.element.prop(DISABLED, false);\n\n                tagList\n                    .on(MOUSEENTER, CHIP, function() { $(this).addClass(HOVERCLASS); })\n                    .on(MOUSELEAVE, CHIP, function() { $(this).removeClass(HOVERCLASS); })\n                    .on(CLICK + \" touchend\" + ns, \".k-chip .k-icon,.k-chip .k-svg-icon\", that._tagListClick.bind(that));\n            } else {\n\n                wrapper.toggleClass(STATEDISABLED, disable)\n                       .toggleClass(NOCLICKCLASS, readonly);\n\n                input.attr(DISABLED, disable)\n                     .attr(READONLY, readonly)\n                     .attr(ARIA_DISABLED, disable)\n                     .attr(ARIA_READONLY, readonly);\n\n                that.element.prop(DISABLED, disable);\n            }\n        },\n\n        _close: function() {\n            var that = this;\n            if (that.options.autoClose) {\n                that.close();\n            } else {\n                that.popup.position();\n            }\n        },\n\n        _filterSource: function(filter, force) {\n            if (!force) {\n                force = this._retrieveData;\n            }\n            this._retrieveData = false;\n            List.fn._filterSource.call(this, filter, force);\n        },\n\n        close: function() {\n            this._activeItem = null;\n            this.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n\n            this.popup.close();\n        },\n\n        open: function() {\n            var that = this,\n                filterValue = that.input.val().toLowerCase(),\n                listViewFilter = that.listView.dataSource.filter(),\n                listViewFilterValue = \"\";\n\n            if (listViewFilter && listViewFilter.filters.length > 0) {\n                listViewFilterValue = (listViewFilter.filters[0].value || \"\").toString().toLowerCase();\n            }\n\n            if (that._request) {\n                that._retrieveData = false;\n            }\n\n            if (that._retrieveData || !that.listView.bound() || (that._state === ACCEPT && filterValue !== listViewFilterValue)) {\n                that._open = true;\n                that._state = REBIND;\n\n                that.listView.skipUpdate(true);\n\n                that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;\n                that._filterSource();\n                that._focusItem();\n            } else if (that._allowOpening()) {\n\n                //selects values in autoBind false and non virtual scenario on initial load\n                if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])) {\n                    that.value(that.value() || that._initialValues);\n                }\n\n                // In some cases when the popup is opened resize is triggered which will cause it to close\n                // Setting the below flag will prevent this from happening\n                that.popup._hovered = true;\n                that._initialOpen = false;\n                that.popup.open({ altTarget: that.wrapper.add(that.element).add(that.input) });\n                that._focusItem();\n            }\n        },\n\n        toggle: function(toggle) {\n            toggle = toggle !== undefined$1 ? toggle : !this.popup.visible();\n\n            this[toggle ? OPEN : CLOSE]();\n        },\n\n        refresh: function() {\n            this.listView.refresh();\n        },\n\n        _floatCheck: function() {\n            if (this.listView) {\n                var hasValue = (this.value() && this.value().length);\n                return !hasValue && !this.popup.visible();\n            }\n\n            return true;\n        },\n\n        _listBound: function() {\n            var that = this;\n            var data = that.dataSource.flatView();\n\n            that._render(data);\n            that._renderFooter();\n            that._renderNoData();\n            that._toggleNoData(!data.length);\n            that._resizePopup();\n\n            if (that._open) {\n                that._open = false;\n                that.toggle(that._allowOpening());\n            }\n\n            that.popup.position();\n            that._updateItemFocus();\n\n            if (that._touchScroller) {\n                that._touchScroller.reset();\n            }\n\n            that._hideBusy();\n\n            that.trigger(\"dataBound\");\n        },\n\n        _updateItemFocus: function() {\n            var that = this,\n                data = that.dataSource.flatView(),\n                skip = that.listView.skip(),\n                isFirstPage = skip === undefined$1 || skip === 0;\n\n            if (data.length && isFirstPage) {\n                if (!that.options.highlightFirst) {\n                    that.listView.focus(-1);\n                } else {\n                    that.listView.focusFirst();\n                }\n            }\n        },\n\n        _inputValue: function() {\n            var that = this;\n            var inputValue = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput.val() : that.input.val();\n\n            if (that.options.placeholder === inputValue) {\n                inputValue = \"\";\n            }\n            return inputValue;\n        },\n\n        value: function(value) {\n            var that = this;\n            var listView = that.listView;\n            var oldValue = listView.value().slice();\n            var maxSelectedItems = that.options.maxSelectedItems;\n            var clearFilters = listView.bound() && listView.isFiltered();\n\n            if (value === undefined$1) {\n                return oldValue;\n            }\n\n            that.persistTagList = false;\n            that.requireValueMapper(that.options, value);\n\n            value = that._normalizeValues(value);\n\n            if (maxSelectedItems !== null && value.length > maxSelectedItems) {\n                value = value.slice(0, maxSelectedItems);\n            }\n\n            if (clearFilters) {\n                that._clearFilter();\n            }\n\n            listView.value(value);\n            that._old = that._valueBeforeCascade = value.slice(); //get a new array reference\n\n            if (!clearFilters) {\n                that._fetchData();\n            }\n\n            that._toggleCloseVisibility();\n        },\n\n        _preselect: function(data, value) {\n            var that = this;\n\n            if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n                data = [data];\n            }\n\n            if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {\n                that.dataSource.data(data);\n                that.value(value || that._initialValues);\n                that._retrieveData = true;\n            }\n        },\n\n        _setOption: function(value, selected) {\n            var option = this.element[0].children[this._optionsMap[value]];\n\n            if (option) {\n                option.selected = selected;\n            }\n        },\n\n        _fetchData: function() {\n            var that = this;\n            var hasItems = !!that.dataSource.view().length;\n            var isEmptyArray = that.listView.value().length === 0;\n\n            if (isEmptyArray || that._request) {\n                return;\n            }\n\n            if (that._retrieveData || (!that._fetch && !hasItems)) {\n                that._fetch = true;\n                that._retrieveData = false;\n                that.dataSource.read().done(function() {\n                    that._fetch = false;\n                });\n            }\n        },\n\n        _isBound: function() {\n            return this.listView.bound() && !this._retrieveData;\n        },\n\n        _dataSource: function() {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                dataSource = options.dataSource || {};\n\n            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n            dataSource.select = element;\n            dataSource.fields = [{ field: options.dataTextField },\n                                 { field: options.dataValueField }];\n\n            if (that.dataSource && that._refreshHandler) {\n                that._unbindDataSource();\n            } else {\n                that._progressHandler = that._showBusy;\n                that._endRequestHandler = that._hideBusy;\n                that._errorHandler = function() {\n                    that._hideBusy();\n                };\n            }\n\n            that.dataSource = kendo.data.DataSource.create(dataSource)\n                                   .bind(PROGRESS, that._progressHandler)\n                                   .bind(\"requestEnd\", that._endRequestHandler)\n                                   .bind(\"error\", that._errorHandler);\n        },\n\n        _reset: function() {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n                that._resetHandler = function() {\n                    setTimeout(function() {\n                        that.value(that._initialValues);\n                        that._placeholder();\n                    });\n                };\n\n                that._form = form.on(\"reset\", that._resetHandler);\n            }\n        },\n\n        _initValue: function() {\n            var value = this.options.value || this.element.val();\n\n            this._old = this._initialValues = this._normalizeValues(value);\n        },\n\n        _normalizeValues: function(value) {\n            var that = this;\n\n            if (value === null) {\n                value = [];\n            } else if (value && $.isPlainObject(value)) {\n                value = [that._value(value)];\n            } else if (value && $.isPlainObject(value[0])) {\n                value = $.map(value, function(dataItem) { return that._value(dataItem); });\n            } else if (!isArray(value) && !(value instanceof ObservableArray)) {\n                value = [value];\n            } else if (isArray(value)) {\n                value = value.slice();\n            }\n\n            return value;\n        },\n\n        _change: function() {\n            var that = this,\n                value = that.value();\n\n            if (!compare(value, that._old)) {\n                that._old = value.slice();\n\n                that.trigger(CHANGE);\n\n                // trigger the DOM change event so any subscriber gets notified\n                that.element.trigger(CHANGE);\n            }\n            that.popup.position();\n\n            that._toggleCloseVisibility();\n        },\n\n        _click: function(e) {\n            var that = this;\n            var item = e.item;\n\n            e.preventDefault();\n\n            that._select(item).done(function() {\n                that._activeItem = item;\n                that._change();\n                that._close();\n            });\n        },\n\n        _getActiveItem: function() {\n            return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();\n        },\n\n        _getSelectedIndices: function() {\n            return this.listView._selectedIndices || this.listView._selectedIndexes;\n        },\n\n        _keydown: function(e) {\n            var that = this;\n            var key = e.keyCode;\n            var tag = that._currentTag;\n            var listView = that.listView;\n            var hasValue = that.input.val();\n            var isRtl = kendo.support.isRtl(that.wrapper);\n            var visible = that.popup.visible();\n            var dir = 0;\n            var activeItemIdx;\n            var handled = false;\n\n            if (key !== keys.ENTER) {\n                this._multipleSelection = false;\n            }\n\n            if (key === keys.DOWN) {\n                e.preventDefault();\n\n                if (!visible) {\n                    that.open();\n\n                    if (!listView.focus()) {\n                        listView.focusFirst();\n                    }\n                    e.stopPropagation();\n                    return;\n                }\n\n                if (listView.focus()) {\n                    if (!that._activeItem && e.shiftKey) {\n                        that._activeItem = listView.focus();\n                        dir = -1;\n                    }\n                    activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n\n                    listView.focusNext();\n                    if (!listView.focus()) {\n                        listView.focusLast();\n                    } else {\n                        if (e.shiftKey && !that.options.virtual) {\n                            this._multipleSelection = true;\n                            that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                        }\n                    }\n                } else {\n                    listView.focusFirst();\n                }\n                handled = true;\n\n            } else if (key === keys.UP) {\n                if (visible) {\n                    if (!that._activeItem && e.shiftKey) {\n                        that._activeItem = listView.focus();\n                        dir = 1;\n                    }\n                    activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n                    listView.focusPrev();\n                    if (!listView.focus()) {\n                        that.close();\n                    } else {\n                        if (e.shiftKey && !that.options.virtual) {\n                            this._multipleSelection = true;\n                            that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                        }\n                    }\n                }\n                handled = true;\n                e.preventDefault();\n            } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {\n                if (!hasValue) {\n                    tag = tag ? tag.prev(CHIP) : that.tagList.children(CHIP).last();\n                    if (tag[0]) {\n                        that.currentTag(tag);\n                    }\n                }\n                handled = true;\n            } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {\n                if (!hasValue && tag) {\n                    tag = tag.next(CHIP);\n                    that.currentTag(tag[0] ? tag : null);\n                }\n                handled = true;\n            } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {\n                this._multipleSelection = true;\n                if (this._getSelectedIndices().length === listView.items().length) {\n                    that._activeItem = null;\n                }\n\n                if (listView.items().length) {\n                    that._selectRange(0, listView.items().length - 1);\n                }\n                handled = true;\n            } else if (key === keys.ENTER && visible) {\n                if (!listView.focus()) {\n                    e.stopPropagation();\n                    return;\n                }\n\n                e.preventDefault();\n\n                if (this._multipleSelection) {\n                    this._multipleSelection = false;\n                     if (listView.focus().hasClass(SELECTEDCLASS)) {\n                        that._close();\n                        e.stopPropagation();\n                        return;\n                    }\n                }\n\n                that._select(listView.focus()).done(function() {\n                    that._change();\n                    that._close();\n                });\n                handled = true;\n            } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {\n                if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {\n                    that._activeItem = null;\n                }\n                if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {\n                    that._activeItem = listView.focus();\n                }\n                that._select(listView.focus()).done(function() {\n                    that._change();\n                });\n                handled = true;\n                e.preventDefault();\n            } else if (key === keys.SPACEBAR && e.shiftKey && visible && !that.options.virtual) {\n                var activeIndex = listView.getElementIndex(that._getActiveItem());\n                var currentIndex = listView.getElementIndex(listView.focus());\n\n                if (activeIndex !== undefined$1 && currentIndex !== undefined$1) {\n                    that._selectRange(activeIndex, currentIndex);\n                }\n                handled = true;\n                e.preventDefault();\n            } else if (key === keys.ESC) {\n                if (visible) {\n                    e.preventDefault();\n                } else {\n                    that.tagList.children(CHIP).each(function(index, tag) {\n                        that._removeTag($(tag), false);\n                    });\n                    that._change();\n                }\n\n                that.close();\n                handled = true;\n            } else if (key === keys.HOME) {\n                if (visible) {\n                    if (!listView.focus()) {\n                        that.close();\n                    } else {\n                        if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                            that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);\n                        }\n                        listView.focusFirst();\n                    }\n                } else if (!hasValue) {\n                    tag = that.tagList.children(CHIP).first()[0];\n\n                    if (tag) {\n                        that.currentTag($(tag));\n                    }\n                }\n                handled = true;\n            } else if (key === keys.END) {\n                if (visible) {\n                    if (!listView.focus()) {\n                        that.close();\n                    } else {\n                        if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                            that._selectRange(\n                                listView.getElementIndex(listView.focus()[0]),\n                                listView.element.children().length - 1\n                            );\n                        }\n                        listView.focusLast();\n                    }\n                } else if (!hasValue) {\n                    tag = that.tagList.children(CHIP).last()[0];\n\n                    if (tag) {\n                        that.currentTag($(tag));\n                    }\n                }\n                handled = true;\n            } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {\n                that._state = ACCEPT;\n\n                if (that.options.tagMode === \"single\") {\n                    that._clearSingleTagValue();\n\n                    that._change();\n                    that._close();\n                    e.stopPropagation();\n                    return;\n                }\n\n                if (key === keys.BACKSPACE && !tag) {\n                    tag = that.tagList.children(CHIP).last();\n                }\n\n                if (tag && tag[0]) {\n                    that._removeTag(tag, true);\n                }\n                handled = true;\n            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                e.preventDefault();\n\n                var direction = key === keys.PAGEDOWN ? 1 : -1;\n                listView.scrollWith(direction * listView.screenHeight());\n                handled = true;\n            } else {\n                clearTimeout(that._typingTimeout);\n                that._search();\n                handled = true;\n            }\n\n            if (handled) {\n                e.stopPropagation();\n            }\n        },\n\n        _placeholder: function(show, skipCaret) {\n            var that = this;\n            var input = that.input;\n            var active = activeElement();\n            var placeholder = that.options.placeholder;\n            var inputValue = input.val();\n            var isActive = input[0] === active;\n            var caretPos = inputValue.length;\n\n            if (!isActive || that.options.autoClose || inputValue === placeholder) {\n                caretPos = 0;\n                inputValue = \"\";\n            }\n\n            if (show === undefined$1) {\n                show = false;\n                if (input[0] !== active) {\n                    show = !that.listView.selectedDataItems()[0];\n                }\n            }\n\n            that._prev = inputValue;\n            input.toggleClass(\"k-readonly\", show).val(show ? placeholder : inputValue);\n\n            if (isActive && !skipCaret) {\n                kendo.caret(input[0], caretPos, caretPos);\n            }\n        },\n\n        _option: function(dataValue, dataText, selected) {\n            var option = \"<option\";\n\n            if (dataValue !== undefined$1) {\n                dataValue += \"\";\n\n                if (dataValue.indexOf('\"') !== -1) {\n                    dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n                }\n\n                option += ' value=\"' + dataValue + '\"';\n            }\n\n            if (selected) {\n                option += ' selected';\n            }\n\n            option += \">\";\n\n            if (dataText !== undefined$1) {\n                option += kendo.htmlEncode(dataText);\n            }\n\n            return option += \"</option>\";\n        },\n\n        _render: function(data) {\n            var selectedItems = this.listView.selectedDataItems();\n            var values = this.listView.value();\n            var length = data.length;\n            var selectedIndex;\n            var options = \"\";\n            var dataItem;\n            var value;\n            var idx;\n\n            if (values.length !== selectedItems.length) {\n                selectedItems = this._buildSelectedItems(values);\n            }\n\n            var custom = {};\n            var optionsMap = {};\n\n            for (idx = 0; idx < length; idx++) {\n                dataItem = data[idx];\n                value = this._value(dataItem);\n\n                selectedIndex = this._selectedItemIndex(value, selectedItems);\n                if (selectedIndex !== -1) {\n                    selectedItems.splice(selectedIndex, 1);\n                }\n\n                optionsMap[value] = idx;\n                options += this._option(value, this._text(dataItem), selectedIndex !== -1);\n            }\n\n            if (selectedItems.length) {\n                for (idx = 0; idx < selectedItems.length; idx++) {\n                    dataItem = selectedItems[idx];\n\n                    value = this._value(dataItem);\n                    custom[value] = length;\n                    optionsMap[value] = length;\n\n                    length += 1;\n                    options += this._option(value, this._text(dataItem), true);\n                }\n            }\n\n            this._customOptions = custom;\n            this._optionsMap = optionsMap;\n\n            this.element.html(options);\n        },\n\n        _buildSelectedItems: function(values) {\n            var valueField = this.options.dataValueField;\n            var textField = this.options.dataTextField;\n            var result = [];\n            var item;\n\n            for (var idx = 0; idx < values.length; idx++) {\n                item = {};\n                item[valueField] = values[idx];\n                item[textField] = values[idx];\n\n                result.push(item);\n            }\n\n            return result;\n        },\n\n        _selectedItemIndex: function(value, selectedItems) {\n            var valueGetter = this._value;\n            var idx = 0;\n\n            for (; idx < selectedItems.length; idx++) {\n                if (value === valueGetter(selectedItems[idx])) {\n                    return idx;\n                }\n            }\n\n            return -1;\n        },\n\n        _search: function(noDelay) {\n            let that = this;\n\n            // noDelay may come as an even object, that is why an explicit === true check is needed.\n            if (noDelay === true) {\n                that._performSearch();\n                return;\n            }\n\n            clearTimeout(that._typingTimeout);\n\n            that._typingTimeout = setTimeout(function() {\n                that._performSearch();\n            }, that.options.delay);\n        },\n\n        _performSearch: function() {\n            var that = this,\n                value = that._inputValue();\n\n            if (that._prev !== value) {\n                that._prev = value;\n                that.search(value);\n                that._toggleCloseVisibility();\n            }\n        },\n\n        _toggleCloseVisibility: function() {\n            if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {\n                this._showClear();\n            } else {\n                this._hideClear();\n            }\n        },\n\n        _allowOpening: function() {\n            return this._allowSelection() && List.fn._allowOpening.call(this);\n        },\n\n        _allowSelection: function() {\n            var max = this.options.maxSelectedItems;\n            return max === null || max > this.listView.value().length;\n        },\n\n        updatePersistTagList: function(added, removed) {\n            if (this.persistTagList.added &&\n                this.persistTagList.added.length === removed.length &&\n                this.persistTagList.removed &&\n                this.persistTagList.removed.length === added.length) {\n                    this.persistTagList = false;\n             } else {\n                 this.listView._removedAddedIndexes = this._old.slice();\n                 this.persistTagList = {\n                     added: added,\n                     removed: removed\n                 };\n             }\n        },\n\n        _selectValue: function(added, removed) {\n            var that = this;\n            var total = that.dataSource.total();\n            var tagList = that.tagList;\n            var getter = that._value;\n            var removedItem;\n            var addedItem;\n            var idx;\n\n            if (this.persistTagList) {\n                this.updatePersistTagList(added, removed);\n                that._refreshTagListAria();\n\n                return;\n            }\n\n            if (that.options.tagMode === \"multiple\") {\n                for (idx = removed.length - 1; idx > -1; idx--) {\n                    removedItem = removed[idx];\n\n                    if (tagList.children(CHIP).length) {\n                        tagList[0].removeChild(tagList[0].children[removedItem.position]);\n                        that._setOption(getter(removedItem.dataItem), false);\n                    }\n                }\n\n                for (idx = 0; idx < added.length; idx++) {\n                    addedItem = added[idx];\n\n                    that.tagList.append(that.tagTemplate(addedItem.dataItem));\n\n                    that._setOption(getter(addedItem.dataItem), true);\n                }\n\n                kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n            } else {\n                if (!that._maxTotal || that._maxTotal < total) {\n                    that._maxTotal = total;\n                }\n\n                this._updateTagListHTML();\n\n                for (idx = removed.length - 1; idx > -1; idx--) {\n                    that._setOption(getter(removed[idx].dataItem), false);\n                }\n\n                for (idx = 0; idx < added.length; idx++) {\n                    that._setOption(getter(added[idx].dataItem), true);\n                }\n            }\n\n            that._refreshTagListAria();\n            that._refreshFloatingLabel();\n\n            that._placeholder();\n        },\n\n        _refreshTagListAria: function() {\n            var that = this;\n            html.renderChipList(that.tagList, $.extend({ selectable: that.value().length === 0 ? \"none\" : \"multiple\" }, that.options));\n        },\n\n        _updateTagListHTML: function() {\n            var that = this;\n            var values = that.value();\n            var total = that.dataSource.total();\n            var tagList = that.tagList;\n\n            tagList.children(CHIP).each(function(index, tag) {\n                $(tag).remove();\n            });\n\n            if (values.length) {\n                that.tagList.append(that.tagTemplate({\n                    values: values,\n                    dataItems: that.dataItems(),\n                    maxTotal: that._maxTotal,\n                    currentTotal: total\n                }));\n\n                kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n            }\n\n            that._refreshTagListAria();\n        },\n\n        _select: function(candidate) {\n            var resolved = $.Deferred().resolve();\n\n            if (!candidate) {\n                return resolved;\n            }\n\n            var that = this;\n            var listView = that.listView;\n            var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));\n            var isSelected = candidate.hasClass(\"k-selected\");\n\n            if (that._state === REBIND) {\n                that._state = \"\";\n            }\n\n            if (!that._allowSelection() && !isSelected) {\n                return resolved;\n            }\n\n            if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {\n                that._close();\n                return resolved;\n            }\n\n            that.persistTagList = false;\n            return listView.select(candidate).done(function() {\n                that._placeholder();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                    listView.skipUpdate(true);\n                }\n            });\n        },\n\n        _selectIndices: function(indices) {\n            let listView = this.listView;\n            let that = this;\n\n            listView.select(indices).done(function() {\n                indices.forEach(function(index) {\n                    var dataItem = listView.dataItemByIndex(index);\n                    var candidate = listView.element.children()[index];\n                    var isSelected = $(candidate).hasClass(\"k-selected\");\n\n                    that.trigger(isSelected ? SELECT : DESELECT, { dataItem: dataItem, item: $(candidate) });\n                });\n                that._change();\n            });\n        },\n\n        _selectRange: function(startIndex, endIndex) {\n            var that = this;\n            var maxSelectedItems = this.options.maxSelectedItems;\n            var indices = this._getSelectedIndices().slice();\n            var indicesToSelect = [];\n            var i;\n\n            if (indices.length - 1 === endIndex - startIndex) {\n                return that._selectIndices(indices);\n            }\n\n            if (startIndex < endIndex) {\n                for (i = startIndex; i <= endIndex; i++) {\n                    indicesToSelect.push(i);\n                }\n            } else {\n                for (i = startIndex; i >= endIndex; i--) {\n                    indicesToSelect.push(i);\n                }\n            }\n\n            if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {\n                indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);\n            }\n\n            for (i = 0; i < indicesToSelect.length; i++) {\n                var index = indicesToSelect[i];\n\n                if (this._getSelectedIndices().indexOf(index) == -1) {\n                    indices.push(index);\n                } else {\n                    indices.splice(indices.indexOf(index), 1);\n                }\n            }\n\n            if (!indices.length) {\n                return;\n            }\n\n            that.persistTagList = false;\n            return that._selectIndices(indices);\n        },\n\n        _input: function() {\n            var that = this;\n            var element = that.element;\n            var accessKey = element[0].accessKey;\n            var input = that._inputValuesContainer.children(\"input.k-input-inner\");\n\n            if (!input[0]) {\n                input = $('<input class=\"k-input-inner\" />').appendTo(that._inputValuesContainer);\n            }\n\n            element.removeAttr(\"accesskey\");\n            input.attr(\"data-validate\", \"false\");\n\n            that._focused = that.input = input.attr({\n                \"autocomplete\": AUTOCOMPLETEVALUE,\n                \"title\": element[0].title\n            });\n\n            if (accessKey) {\n                that._focused.attr(\"accesskey\", accessKey);\n            }\n        },\n\n        _inputValuesContainer: function() {\n            var that = this,\n                inputValuesContainer = that.wrapper.children(\".k-input-values\");\n\n            if (!inputValuesContainer[0]) {\n                inputValuesContainer = $('<div class=\"k-input-values\"></div>').appendTo(that.wrapper);\n            }\n\n            that._inputValuesContainer = inputValuesContainer;\n        },\n\n        _tagList: function() {\n            var that = this,\n                options = that.options,\n                tagList = that._inputValuesContainer.children(\".k-chip-list\");\n\n            if (!tagList[0]) {\n                tagList = $(html.renderChipList('<div unselectable=\"on\" class=\"k-selection-multiple\" />', $.extend({ selectable: \"none\" }, options))).appendTo(that._inputValuesContainer);\n            }\n\n            that.tagList = tagList;\n        },\n\n        _tagTemplate: function() {\n            var that = this;\n            var options = that.options;\n            var tagTemplate = options.tagTemplate;\n            var hasDataSource = options.dataSource;\n            var isMultiple = options.tagMode === \"multiple\";\n            var singleTag = options.messages.singleTag;\n            var defaultTemplate;\n            var multipleTemplateFunc;\n            var singleTemplateFunc;\n\n            if (that.element[0].length && !hasDataSource) {\n                options.dataTextField = options.dataTextField || \"text\";\n                options.dataValueField = options.dataValueField || \"value\";\n            }\n\n            multipleTemplateFunc = data => encode(kendo.getter(options.dataTextField)(data));\n            singleTemplateFunc = ({ values }) => `${values.length} ${encode(singleTag)}`;\n\n            defaultTemplate = isMultiple ? multipleTemplateFunc : singleTemplateFunc;\n\n            that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;\n\n            that.tagTemplate = function(data) {\n                return html.renderChip('<span unselectable=\"on\">' +\n                '</span>', $.extend({}, options, {\n                        fillMode: \"solid\",\n                        rounded: \"medium\",\n                        enabled: true,\n                        themeColor: \"base\",\n                        text: tagTemplate(data),\n                        attr: {\n                            unselectable: \"on\",\n                            \"aria-selected\": true,\n                            role: \"option\",\n                            \"aria-keyshortcuts\": isMultiple ? \"Enter Delete\" : \"Enter\"\n                        },\n                        removable: isMultiple,\n                        removableAttr: {\n                            unselectable: \"on\",\n                            \"aria-hidden\": true,\n                            \"aria-label\": that.options.messages.deleteTag,\n                            title: that.options.messages.deleteTag\n                        },\n                        icon: !isMultiple ? \"caret-alt-down\" : \"\",\n                        iconAttr: {\n                            unselectable: \"on\",\n                            \"aria-hidden\": true,\n                            \"aria-label\": 'open'\n                        }\n                    })\n                );\n            };\n        },\n\n        _popup: function() {\n            List.fn._popup.call(this);\n            this.popup.element.addClass(\"k-multiselect-popup\");\n        },\n\n        _clearButton: function() {\n            List.fn._clearButton.call(this);\n\n            if (this.options.clearButton) {\n                this._clear.insertAfter(this._inputValuesContainer);\n            }\n        },\n\n        _arrowButton: function() {\n            var arrowTitle = encode(this.options.messages.downArrow),\n                arrow = $(html.renderButton('<button type=\"button\" aria-label=\"' + arrowTitle + '\" class=\"k-input-button\"></button>', $.extend({}, this.options, {\n                    icon: \"caret-alt-down\",\n                    rounded: null\n                })));\n\n            if (this._arrow) {\n                this._arrow.remove();\n                this._arrow = null;\n            }\n\n            if (this.options.downArrow) {\n                this._arrow = arrow.attr({\n                    \"tabIndex\": -1\n                });\n\n                this._arrow.appendTo(this.wrapper);\n            }\n        },\n\n        _textContainer: function() {\n            var computedStyles = kendo.getComputedStyles(this.input[0], styles);\n\n            computedStyles.position = \"absolute\";\n            computedStyles.visibility = \"hidden\";\n            computedStyles.top = -3333;\n            computedStyles.left = -3333;\n\n            this._span = $(\"<span/>\").css(computedStyles).appendTo(this.wrapper);\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                wrapper = element.parent(\"span.k-multiselect\");\n\n            if (!wrapper[0]) {\n                wrapper = element.wrap('<span class=\"k-multiselect k-input\" unselectable=\"on\" />').parent();\n                wrapper[0].style.cssText = element[0].style.cssText;\n            }\n\n            that.wrapper = wrapper\n                            .addClass(element[0].className)\n                            .removeClass('input-validation-error').css(\"display\", \"\");\n        },\n\n        _closeHandler: function(e) {\n            if (this.trigger(CLOSE)) {\n                e.preventDefault();\n            } else {\n                this.input.attr(ARIA_EXPANDED, false);\n                this.ul.attr(ARIA_HIDDEN, true);\n            }\n        },\n\n        _openHandler: function(e) {\n            this._adjustListWidth();\n\n            if (this.trigger(OPEN)) {\n                e.preventDefault();\n            } else {\n                this.input.attr(ARIA_EXPANDED, true);\n                this.ul.attr(ARIA_HIDDEN, false);\n            }\n        }\n    });\n\n    function compare(a, b) {\n        var length;\n\n        if ((a === null && b !== null) || (a !== null && b === null)) {\n            return false;\n        }\n\n        length = a.length;\n        if (length !== b.length) {\n            return false;\n        }\n\n        while (length--) {\n            if (a[length] !== b[length]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    ui.plugin(MultiSelect);\n\n    kendo.cssProperties.registerPrefix(\"MultiSelect\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"MultiSelect\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}