{"version":3,"sources":["raw-mjs/kendo.dateinput.js"],"names":["DateInput","__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","ui","Widget","ns","objectToString","toString","isPlainObject","FOCUSED","STATEDISABLED","STATEINVALID","DISABLED","READONLY","CHANGE","IntlService","Class","extend","init","options","info","culture","getCulture","this","messages","cldr","calendar","numbers","numberFormat","parseDate","value","format","formatDate","date","splitDateFormat","dateFormatNames","locale","dateFieldName","type","buildKeys","cultureInfo","keys","push","calendars","standard","getCultureFormat","patterns","DateInput$1","element","that","fn","call","_extractFormat","d","min","attr","max","wrapperClass","parent","skipStyling","indexOf","initialValue","val","wrapper","wrap","addClass","className","removeClass","style","cssText","css","height","_validationIcon","icon","iconClass","insertAfter","_form","dateInputInstance","autoCorrectParts","autoSwitchKeys","length","enableMouseWheel","twoDigitYearMax","steps","formatPlaceholder","events","inputEnd","e","error","_blinkInvalidState","keydown","event","keyCode","UP","DOWN","setTimeout","trigger","preventDefault","blur","_change","intlService","autoSwitchParts","autoFill","_emptyMask","on","setAttribute","is","parents","enable","readonly","_applyCssClasses","label","_label","removeAttr","notify","autoAdjust","Date","year","month","day","weekday","hour","minute","second","milliseconds","dayperiod","size","millisecond","fillMode","rounded","setOptions","destroy","off","_formElement","_resetHandler","remove","getTime","writeValue","_oldValue","floatingLabel","refresh","_hasDateInput","_editable","disable","labelOptions","content","Label","widget","floatCheck","document","activeElement","_inputLabel","_bindInput","bindEvents","_unbindInput","unbindEvents","removeAttribute","oldValue","_addInvalidState","clearTimeout","_invalidStateTimeout","_removeInvalidState","bind","formId","form","closest","_paste","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":";;;;;;;;MAAA,wBACA,yBACA,+BACAA,cAAA,yCAEA,MAAAC,SAAA,CACAC,GAAA,YACAC,KAAA,YACAC,SAAA,MACAC,YAAA,sDACAC,QAAA,CAAA,OAAA,QAAA,iCAGA,SAAAC,EAAAC,GACA,IACAC,EADAC,OACAD,MACAE,EAAAF,EAAAE,GACAC,EAAAD,EAAAC,OACAC,EAAA,kBACAC,EAAA,CAAA,EAAAC,SACAC,EAAAT,EAAAS,cAGAC,EAAA,UACAC,EAAA,aACAC,EAAA,YAEAC,EAAA,WACAC,EAAA,WACAC,EAAA,SAEAC,EAAAd,EAAAe,MAAAC,OAAA,CACAC,KAAA,SAAAC,GACA,MAAAC,EAAAD,EAAAE,QAAApB,EAAAqB,WAAAH,EAAAE,SAAApB,EAAAoB,UACAE,KAAAC,SAAAL,EAAAK,SACAD,KAAAE,KAAA,CAAA,EACAF,KAAAE,KAAAL,EAAAzB,MAAA,CACAA,KAAAyB,EAAAzB,KACA+B,SAAAN,EAAAM,UAAA,CAAA,EACAC,QAAAP,EAAAQ,aAEA,EAEAC,UAAA,SAAAC,EAAAC,EAAAV,GACA,OAAApB,EAAA4B,UAAAC,EAAAC,EAAAV,GAAA,EACA,EAEAW,WAAA,SAAAC,EAAAF,EAAAV,GACA,OAAApB,EAAAM,SAAA0B,EAAAF,EAAAV,EACA,EAEAa,gBAAA,SAAAH,GACA,OAAA9B,EAAAgC,KAAAC,gBAAAH,EACA,EAEAI,gBAAA,SAAAC,EAAAjB,GACA,OAAAlB,EAAAgC,KAAAE,gBAAAhB,EACA,EAEAkB,cAAA,SAAAlB,GACA,OAAAI,KAAAC,SAAAL,EAAAmB,OAAA,CAAA,CACA,IAGA,SAAAC,IACA,MAAAC,EAAAvC,EAAAoB,UACA,IAAAoB,EAAA,GAKA,OAHAA,EAAAC,KAAAF,EAAAG,UAAAC,SAAA,MACAH,EAAAC,KAAAF,EAAAG,UAAAC,SAAA,MAEAH,CACA,CAEA,SAAAI,EAAAxB,EAAAU,GACA,IAAAV,EACA,OAAAU,EAGA,OADA9B,EAAAqB,WAAAD,GACAsB,UAAAC,SAAAE,SAAAf,IAAAA,CACA,CAEA,IAAAgB,EAAA3C,EAAAa,OAAA,CACAC,KAAA,SAAA8B,EAAA7B,GACA,IAAA8B,EAAA1B,KAEAnB,EAAA8C,GAAAhC,KAAAiC,KAAAF,EAAAD,EAAA7B,GACA6B,EAAAC,EAAAD,SAEA7B,EAAA8B,EAAA9B,SACAY,OAAA9B,EAAAmD,eAAAjC,EAAAY,QAAA9B,EAAAqB,WAAAH,EAAAE,SAAAsB,UAAAC,SAAAE,SAAAO,GACAlC,EAAAmC,IAAArD,EAAA4B,UAAAmB,EAAAO,KAAA,SAAAtD,EAAA4B,UAAAV,EAAAmC,KACAnC,EAAAqC,IAAAvD,EAAA4B,UAAAmB,EAAAO,KAAA,SAAAtD,EAAA4B,UAAAV,EAAAqC,KAEA,IAAAC,EAAAT,EAAAU,SAAAH,KAAA,UAAA,GACAI,EAAAF,EAAAG,QAAA,WAAA,GAAAH,EAAAG,QAAA,eAAA,EACAC,EAAAZ,EAAA9B,QAAAW,OAAAkB,EAAAc,MAEAH,EACAV,EAAAc,QAAAd,EAAAD,QAAAU,UAEAT,EAAAc,QAAAf,EAAAgB,KAAA,6CAAAN,SACAT,EAAAc,QAAAE,SAAAjB,EAAA,GAAAkB,WAAAC,YAAA,2BAEAlB,EAAAc,QAAA,GAAAK,MAAAC,QAAArB,EAAA,GAAAoB,MAAAC,QACArB,EAAAsB,IAAA,CACAC,OAAAvB,EAAA,GAAAoB,MAAAG,SAIAtB,EAAAuB,gBAAAzE,EAAAE,EAAAE,GAAAsE,KAAA,CAAAA,KAAA,qBAAAC,UAAA,sCAAAC,YAAA3B,GAEAC,EAAA2B,QAEA3B,EAAA4B,kBAAA,IAAArF,UAAAwD,EAAA,GAAA,CACAjB,OAAAc,EAAA1B,EAAAE,QAAAF,EAAAY,QACA+C,iBAAA3D,EAAA2D,iBACAC,eAAA5D,EAAA4D,eAAAC,OAAA7D,EAAA4D,eAAAxC,IACA0C,iBAAA9D,EAAA8D,iBACAC,gBAAA/D,EAAA+D,gBACAC,MAAAhE,EAAAgE,MACAC,kBAAAjE,EAAAK,SACA6D,OAAA,CACAC,SAAA,SAAAC,GACAA,EAAAC,OACAvC,EAAAwC,oBAEA,EACAC,QAAA,SAAAH,GACAA,EAAAI,MAAAC,QAIAL,EAAAI,MAAAC,SAAA3F,EAAAwC,KAAAoD,IAAAN,EAAAI,MAAAC,SAAA3F,EAAAwC,KAAAqD,MACAC,YAAA,WACA9C,EAAAD,QAAAgD,QAAAlF,EACA,IANAyE,EAAAU,gBAQA,EACAC,KAAA,SAAAX,GACAtC,EAAAkD,UACAZ,EAAAU,gBACA,GAEAG,YAAA,IAAArF,EAAA,CACAM,QAAAF,EAAAE,QACAG,SAAAyB,EAAA9B,QAAAK,WAEA6E,gBAAAlF,EAAAkF,gBACAC,SAAAnF,EAAAmF,WAGArD,EAAAsD,WAAAhF,KAAAyB,QAAAc,MACA3C,EAAAW,OACAmB,EAAAnB,MAAAX,EAAAW,OAGAmB,EAAAD,QACAiB,SAAA,iBACAV,KAAA,eAAA,OACAiD,GAAA,QAAAnG,GAAA,WACA4C,EAAAc,QAAAE,SAAAxD,EACA,IACA+F,GAAA,WAAAnG,GAAA,WACA4C,EAAAc,QAAAI,YAAA1D,EACA,IAEA,IACAuC,EAAA,GAAAyD,aAAA,OAAA,OACA,CAAA,MAAAlB,GACAvC,EAAA,GAAAV,KAAA,MACA,CAEAU,EAAA0D,GAAA,eAAA3G,EAAAkD,EAAAD,SAAA2D,QAAA,YAAAD,GAAA,aAGAzD,EAAA2D,QAAA,GAEA3D,EAAA4D,SAAA7D,EAAA0D,GAAA,eAEAzD,EAAAnB,MAAA+B,GACAF,GACAV,EAAA6D,mBAGA3F,EAAA4F,OACA9D,EAAA+D,SAEA/D,EAAAD,QAAAiE,WAAA,SACAhH,EAAAiH,OAAAjE,EACA,EAEA9B,QAAA,CACAxB,KAAA,YACAwH,YAAA,EACArC,kBAAA,EACAC,eAAA,GACAsB,iBAAA,EACApB,kBAAA,EACA5D,QAAA,GACAS,MAAA,GACAC,OAAA,GACAuB,IAAA,IAAA8D,KAAA,KAAA,EAAA,GACA5D,IAAA,IAAA4D,KAAA,KAAA,GAAA,IACA5F,SAAA,CACA6F,KAAA,OACAC,MAAA,QACAC,IAAA,MACAC,QAAA,kBACAC,KAAA,QACAC,OAAA,UACAC,OAAA,UACAC,aAAA,eACAC,UAAA,SAEAC,KAAA,SACA3C,MAAA,CACAkC,KAAA,EACAC,MAAA,EACAC,IAAA,EACAE,KAAA,EACAC,OAAA,EACAC,OAAA,EACAI,YAAA,GAEAC,SAAA,QACAC,QAAA,SACAlB,MAAA,KACAT,UAAA,GAGAjB,OAAA,CACAvE,GAGAwC,IAAA,SAAAxB,GACA,GAAAA,IAAA9B,EAGA,OAAAuB,KAAAJ,QAAAmC,IAFA/B,KAAAJ,QAAAmC,IAAAxB,CAIA,EAEA0B,IAAA,SAAA1B,GACA,GAAAA,IAAA9B,EAGA,OAAAuB,KAAAJ,QAAAqC,IAFAjC,KAAAJ,QAAAqC,IAAA1B,CAIA,EAEAoG,WAAA,SAAA/G,GACA,IAAA8B,EAAA1B,KACAnB,EAAA8C,GAAAgF,WAAA/E,KAAAF,EAAA9B,GACA8B,EAAA4B,kBAAAsD,UACAlF,EAAA4B,kBAAA,KAEA5B,EAAA4B,kBAAA,IAAArF,UAAA+B,KAAAyB,QAAA,GAAA,CACAjB,OAAAc,EAAAI,EAAA9B,QAAAE,QAAA4B,EAAA9B,QAAAY,QACAgD,eAAA9B,EAAA9B,QAAA4D,eAAAC,OAAA/B,EAAA9B,QAAA4D,eAAAxC,IACAuC,iBAAA7B,EAAA9B,QAAA2D,iBACAG,iBAAAhC,EAAA9B,QAAA8D,iBACAE,MAAAlC,EAAA9B,QAAAgE,MACAD,gBAAAjC,EAAA9B,QAAA+D,gBACAE,kBAAAnC,EAAA9B,QAAAK,SACA6D,OAAA,CACAC,SAAA,SAAAC,GACAA,EAAAC,OACAvC,EAAAwC,oBAEA,EACAC,QAAA,SAAAH,GACAA,EAAAI,MAAAC,SAAA3F,EAAAwC,KAAAoD,IAAAN,EAAAI,MAAAC,SAAA3F,EAAAwC,KAAAqD,MACAC,YAAA,WACA9C,EAAAD,QAAAgD,QAAAlF,EACA,GAEA,EACAoF,KAAA,SAAAX,GACAtC,EAAAkD,UACAZ,EAAAU,gBACA,GAEAG,YAAA,IAAArF,EAAA,CACAM,QAAA4B,EAAA9B,QAAAE,QACAG,SAAAyB,EAAA9B,QAAAK,WAEA6E,gBAAApD,EAAA9B,QAAAkF,gBACAC,SAAArD,EAAA9B,QAAAmF,UAEA,EAEA6B,QAAA,WACA,IAAAlF,EAAA1B,KACA0B,EAAAD,QAAAoF,IAAA/H,GACA4C,EAAA4B,kBAAAsD,UAEAlF,EAAAoF,cACApF,EAAAoF,aAAAD,IAAA,QAAAnF,EAAAqF,eAGArF,EAAA8D,OACA9D,EAAA8D,MAAAoB,UAGAlF,EAAAuB,iBACAvB,EAAAuB,gBAAA+D,SAGAnI,EAAA8C,GAAAiF,QAAAhF,KAAAF,EACA,EAEAnB,MAAA,SAAAA,GACA,GAAAA,IAAA9B,EACA,OAAAuB,KAAAsD,kBAAA/C,MAGA,OAAAA,IACAA,EAAA,IAGA,kBAAAxB,EAAA6C,KAAArB,KACAA,EAAA7B,EAAA4B,UAAAC,EAAAP,KAAAJ,QAAAY,OAAAR,KAAAJ,QAAAE,UAGAS,IAAAA,EAAA0G,YACA1G,EAAA,MAGAP,KAAAsD,kBAAA4D,WAAA3G,GAEAP,KAAAmH,UAAA5G,EAEAP,KAAAwF,OAAAxF,KAAAwF,MAAA4B,eACApH,KAAAwF,MAAA4B,cAAAC,SAEA,EAEAC,cAAA,WAEA,OAAAtH,KAAAgF,aAAAhF,KAAAyB,QAAAc,KACA,EAEA+C,SAAA,SAAAA,GACAtF,KAAAuH,UAAA,CACAjC,SAAAA,IAAA7G,GAAA6G,EACAkC,SAAA,IAGAxH,KAAAwF,OAAAxF,KAAAwF,MAAA4B,eACApH,KAAAwF,MAAA4B,cAAA9B,SAAAA,IAAA7G,GAAA6G,EAEA,EAEAD,OAAA,SAAAA,GACArF,KAAAuH,UAAA,CACAjC,UAAA,EACAkC,UAAAnC,EAAAA,IAAA5G,GAAA4G,KAGArF,KAAAwF,OAAAxF,KAAAwF,MAAA4B,eACApH,KAAAwF,MAAA4B,cAAA/B,OAAAA,EAAAA,IAAA5G,GAAA4G,EAEA,EAEAI,OAAA,WACA,IAAA/D,EAAA1B,KACAJ,EAAA8B,EAAA9B,QACA6H,EAAAxI,EAAAW,EAAA4F,OAAA5F,EAAA4F,MAAA,CACAkC,QAAA9H,EAAA4F,OAGA9D,EAAA8D,MAAA,IAAA9G,EAAAE,GAAA+I,MAAA,KAAAnJ,EAAAkB,OAAA,CAAA,EAAA+H,EAAA,CACAG,OAAAlG,EACAmG,WAAA,MACAnG,EAAAnB,SAAAmB,EAAA4F,iBAAA,KAAA5F,EAAAD,QAAAc,OAAAuF,SAAAC,gBAAArG,EAAAD,QAAA,MACAzB,KAAAyB,QAAAc,IAAA,KACA,MAOAb,EAAAsG,YAAAtG,EAAA8D,MAAA/D,OACA,EAEAwG,WAAA,WACA,IAAAvG,EAAA1B,KACA0B,EAAAD,QACAwD,GAAA,QAAAnG,GAAA,WACA4C,EAAAc,QAAAE,SAAAxD,EACA,IACA+F,GAAA,WAAAnG,GAAA,WACA4C,EAAAc,QAAAI,YAAA1D,EACA,IAEAc,KAAAsD,mBACAtD,KAAAsD,kBAAA4E,YAEA,EAEAC,aAAA,WACAnI,KAAAyB,QACAoF,IAAA,QAAA/H,GACA+H,IAAA,WAAA/H,GAEAkB,KAAAsD,mBACAtD,KAAAsD,kBAAA8E,cAEA,EAEAb,UAAA,SAAA3H,GACA,IAAA8B,EAAA1B,KACAyB,EAAAC,EAAAD,QACA+F,EAAA5H,EAAA4H,QACAlC,EAAA1F,EAAA0F,SACA9C,EAAAd,EAAAc,QAEAd,EAAAyG,eAEA7C,GAAAkC,GASAA,IACAhF,EAAAE,SAAAvD,GACAsC,EAAAO,KAAA3C,EAAAmI,GACA/F,GAAAA,EAAAgC,QACAhC,EAAA,GAAA4G,gBAAA/I,IAGAgG,GACA7D,EAAAO,KAAA1C,EAAAgG,KAhBA9C,EAAAI,YAAAzD,GACAsC,GAAAA,EAAAgC,SACAhC,EAAA,GAAA4G,gBAAAhJ,GACAoC,EAAA,GAAA4G,gBAAA/I,IAGAoC,EAAAuG,aAaA,EAEArD,QAAA,WACA,IAAAlD,EAAA1B,KACAsI,EAAA5G,EAAAyF,UACA5G,EAAAmB,EAAAnB,QACAqF,EAAAlE,EAAA9B,QAAAgG,WAEAA,GAAArF,GAAAmB,EAAAK,OAAAxB,EAAAmB,EAAAK,QACAL,EAAAnB,MAAAmB,EAAAK,OACAxB,EAAAmB,EAAAnB,SAEAqF,GAAArF,GAAAmB,EAAAO,OAAA1B,EAAAmB,EAAAO,QACAP,EAAAnB,MAAAmB,EAAAO,OACA1B,EAAAmB,EAAAnB,UAGA+H,GAAA/H,GAAAA,EAAA0G,YAAAqB,EAAArB,WACAqB,IAAA/H,IACA+H,GAAA/H,KAEAmB,EAAAyF,UAAA5G,EACAmB,EAAA+C,QAAAlF,EAAA,CAAAoF,MAAA,IACAjD,EAAAD,QAAAgD,QAAAlF,GAEA,EAGA2E,mBAAA,WACA,IAAAxC,EAAA1B,KAEA0B,EAAA6G,mBACAC,aAAA9G,EAAA+G,sBACA/G,EAAA+G,qBAAAjE,WAAA9C,EAAAgH,oBAAAC,KAAAjH,GAAA,IACA,EAEA6G,iBAAA,WACAvI,KAEAwC,QAAAE,SAAAtD,GAFAY,KAGAiD,gBAAAL,YAAA,WACA,EAEA8F,oBAAA,WACA,IAAAhH,EAAA1B,KAEA0B,EAAAc,QAAAI,YAAAxD,GACAsC,EAAAuB,gBAAAP,SAAA,YACAhB,EAAA+G,qBAAA,IACA,EAGApF,MAAA,WACA,IAAA3B,EAAA1B,KACAyB,EAAAC,EAAAD,QACAmH,EAAAnH,EAAAO,KAAA,QACA6G,EAAAD,EAAApK,EAAA,IAAAoK,GAAAnH,EAAAqH,QAAA,QACAxG,EAAAb,EAAA,GAAAlB,OAEA+B,GAAAZ,EAAA9B,QAAAW,QACA+B,EAAAZ,EAAA9B,QAAAW,OAGAsI,EAAA,KACAnH,EAAAqF,cAAA,WACAvC,YAAA,WACA9C,EAAAnB,MAAA+B,EACA,GACA,EAEAZ,EAAAoF,aAAA+B,EAAA5D,GAAA,QAAAvD,EAAAqF,eAEA,EAEAgC,OAAA,SAAA/E,GACAA,EAAAU,gBACA,IAKAhG,EAAAsK,cAAAC,eAAA,YAAA,YAEAvK,EAAAsK,cAAAE,eAAA,YAAA,CAAA,CACAC,KAAA,UACAC,OAAA1K,EAAAsK,cAAAK,cAAAC,OAAA,CAAA,CAAA,OAAA,aAGA1K,EAAA2K,OAAA/H,EAEA,CAtgBA,CAsgBA7C,OAAAD,MAAA8K,QACA,IAAAC,QAAA/K,aAEAR,SAAAuL","file":"kendo.dateinput.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.label.js';\nimport './kendo.icons.js';\nimport { D as DateInput } from './kendo.dateinputs-common.cmn.chunk.js';\n\nconst __meta__ = {\n    id: \"dateinput\",\n    name: \"DateInput\",\n    category: \"web\",\n    description: \"The DateInput widget allows to edit date by typing.\",\n    depends: [\"core\", \"label\", \"dateinputs-common.cmn.chunk\"]\n};\n\n(function($, undefined$1) {\n    var global = window;\n    var kendo = global.kendo;\n    var ui = kendo.ui;\n    var Widget = ui.Widget;\n    var ns = \".kendoDateInput\";\n    var objectToString = {}.toString;\n    var isPlainObject = $.isPlainObject;\n\n\n    var FOCUSED = \"k-focus\";\n    var STATEDISABLED = \"k-disabled\";\n    var STATEINVALID = \"k-invalid\";\n\n    var DISABLED = \"disabled\";\n    var READONLY = \"readonly\";\n    var CHANGE = \"change\";\n\n    var IntlService = kendo.Class.extend({\n        init: function(options) {\n            const info = options.culture ? kendo.getCulture(options.culture) : kendo.culture();\n            this.messages = options.messages;\n            this.cldr = { };\n            this.cldr[info.name] = {\n                name: info.name,\n                calendar: info.calendar || {},\n                numbers: info.numberFormat\n            };\n        },\n\n        parseDate: function(value, format, culture) {\n            return kendo.parseDate(value, format, culture, true);\n        },\n\n        formatDate: function(date, format, culture) {\n            return kendo.toString(date, format, culture);\n        },\n\n        splitDateFormat: function(format) {\n            return kendo.date.splitDateFormat(format);\n        },\n\n        dateFormatNames: function(locale, options) {\n            return kendo.date.dateFormatNames(options);\n        },\n\n        dateFieldName: function(options) {\n            return this.messages[options.type] || {};\n        }\n    });\n\n    function buildKeys() {\n        const cultureInfo = kendo.culture();\n        let keys = [];\n\n        keys.push(cultureInfo.calendars.standard[\"/\"]);\n        keys.push(cultureInfo.calendars.standard[\":\"]);\n\n        return keys;\n    }\n\n    function getCultureFormat(culture, format) {\n        if (!culture) {\n            return format;\n        }\n        const cultureInfo = kendo.getCulture(culture);\n        return cultureInfo.calendars.standard.patterns[format] || format;\n    }\n\n    var DateInput$1 = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            Widget.fn.init.call(that, element, options);\n            element = that.element;\n\n            options = that.options;\n            options.format = kendo._extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.d);\n            options.min = kendo.parseDate(element.attr(\"min\")) || kendo.parseDate(options.min);\n            options.max = kendo.parseDate(element.attr(\"max\")) || kendo.parseDate(options.max);\n\n            var wrapperClass = (element.parent().attr(\"class\") || \"\");\n            var skipStyling = wrapperClass.indexOf(\"picker\") >= 0 && wrapperClass.indexOf(\"rangepicker\") < 0;\n            var initialValue = that.options.value || element.val();\n\n            if (skipStyling) {\n                that.wrapper = that.element.parent();\n            } else {\n                that.wrapper = element.wrap(\"<span class='k-dateinput k-input'></span>\").parent();\n                that.wrapper.addClass(element[0].className).removeClass('input-validation-error');\n            }\n            that.wrapper[0].style.cssText = element[0].style.cssText;\n            element.css({\n                height: element[0].style.height\n            });\n\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n            that._form();\n\n            that.dateInputInstance = new DateInput(element[0], {\n                format: getCultureFormat(options.culture, options.format),\n                autoCorrectParts: options.autoCorrectParts,\n                autoSwitchKeys: options.autoSwitchKeys.length ? options.autoSwitchKeys : buildKeys(),\n                enableMouseWheel: options.enableMouseWheel,\n                twoDigitYearMax: options.twoDigitYearMax,\n                steps: options.steps,\n                formatPlaceholder: options.messages,\n                events: {\n                    inputEnd: function(e) {\n                        if (e.error) {\n                            that._blinkInvalidState();\n                        }\n                    },\n                    keydown: function(e) {\n                        if (!e.event.keyCode) {\n                            e.preventDefault();\n                            return;\n                        }\n                        if (e.event.keyCode == kendo.keys.UP || e.event.keyCode == kendo.keys.DOWN) {\n                            setTimeout(function() {\n                                that.element.trigger(CHANGE);\n                            });\n                        }\n                    },\n                    blur: function(e) {\n                        that._change();\n                        e.preventDefault();\n                    },\n                },\n                intlService: new IntlService({\n                    culture: options.culture,\n                    messages: that.options.messages\n                }),\n                autoSwitchParts: options.autoSwitchParts,\n                autoFill: options.autoFill\n            });\n\n            that._emptyMask = this.element.val();\n            if (options.value) {\n                that.value(options.value);\n            }\n\n            that.element\n                .addClass(\"k-input-inner\")\n                .attr(\"autocomplete\", \"off\")\n                .on(\"focus\" + ns, function() {\n                    that.wrapper.addClass(FOCUSED);\n                })\n                .on(\"focusout\" + ns, function() {\n                    that.wrapper.removeClass(FOCUSED);\n                });\n\n            try {\n                element[0].setAttribute(\"type\", \"text\");\n            } catch (e) {\n                element[0].type = \"text\";\n            }\n\n            var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n                that.enable(false);\n            } else {\n                that.readonly(element.is(\"[readonly]\"));\n            }\n            that.value(initialValue);\n            if (!skipStyling) {\n                that._applyCssClasses();\n            }\n\n            if (options.label) {\n                that._label();\n            }\n            that.element.removeAttr(\"style\");\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"DateInput\",\n            autoAdjust: true,\n            autoCorrectParts: true,\n            autoSwitchKeys: [],\n            autoSwitchParts: false,\n            enableMouseWheel: true,\n            culture: \"\",\n            value: \"\",\n            format: \"\",\n            min: new Date(1900, 0, 1),\n            max: new Date(2099, 11, 31),\n            messages: {\n                \"year\": \"year\",\n                \"month\": \"month\",\n                \"day\": \"day\",\n                \"weekday\": \"day of the week\",\n                \"hour\": \"hours\",\n                \"minute\": \"minutes\",\n                \"second\": \"seconds\",\n                \"milliseconds\": \"milliseconds\",\n                \"dayperiod\": \"AM/PM\"\n            },\n            size: \"medium\",\n            steps: {\n                year: 1,\n                month: 1,\n                day: 1,\n                hour: 1,\n                minute: 1,\n                second: 1,\n                millisecond: 1,\n            },\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            label: null,\n            autoFill: false\n        },\n\n        events: [\n            CHANGE\n        ],\n\n        min: function(value) {\n            if (value !== undefined$1) {\n                this.options.min = value;\n            } else {\n                return this.options.min;\n            }\n        },\n\n        max: function(value) {\n            if (value !== undefined$1) {\n                this.options.max = value;\n            } else {\n                return this.options.max;\n            }\n        },\n\n        setOptions: function(options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n            that.dateInputInstance.destroy();\n            that.dateInputInstance = null;\n\n            that.dateInputInstance = new DateInput(this.element[0], {\n                format: getCultureFormat(that.options.culture, that.options.format),\n                autoSwitchKeys: that.options.autoSwitchKeys.length ? that.options.autoSwitchKeys : buildKeys(),\n                autoCorrectParts: that.options.autoCorrectParts,\n                enableMouseWheel: that.options.enableMouseWheel,\n                steps: that.options.steps,\n                twoDigitYearMax: that.options.twoDigitYearMax,\n                formatPlaceholder: that.options.messages,\n                events: {\n                    inputEnd: function(e) {\n                        if (e.error) {\n                            that._blinkInvalidState();\n                        }\n                    },\n                    keydown: function(e) {\n                        if (e.event.keyCode == kendo.keys.UP || e.event.keyCode == kendo.keys.DOWN) {\n                            setTimeout(function() {\n                                that.element.trigger(CHANGE);\n                            });\n                        }\n                    },\n                    blur: function(e) {\n                        that._change();\n                        e.preventDefault();\n                    },\n                },\n                intlService: new IntlService({\n                    culture: that.options.culture,\n                    messages: that.options.messages\n                }),\n                autoSwitchParts: that.options.autoSwitchParts,\n                autoFill: that.options.autoFill\n            });\n        },\n\n        destroy: function() {\n            var that = this;\n            that.element.off(ns);\n            that.dateInputInstance.destroy();\n\n            if (that._formElement) {\n                that._formElement.off(\"reset\", that._resetHandler);\n            }\n\n            if (that.label) {\n                that.label.destroy();\n            }\n\n            if (that._validationIcon) {\n                that._validationIcon.remove();\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        value: function(value) {\n            if (value === undefined$1) {\n                return this.dateInputInstance.value;\n            }\n\n            if (value === null) {\n                value = \"\";\n            }\n\n            if (objectToString.call(value) !== \"[object Date]\") {\n                value = kendo.parseDate(value, this.options.format, this.options.culture);\n            }\n\n            if (value && !value.getTime()) {\n                value = null;\n            }\n\n            this.dateInputInstance.writeValue(value);\n\n            this._oldValue = value;\n\n            if (this.label && this.label.floatingLabel) {\n                this.label.floatingLabel.refresh();\n            }\n        },\n\n        _hasDateInput: function() {\n\n            return this._emptyMask !== this.element.val();\n        },\n\n        readonly: function(readonly) {\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n\n            if (this.label && this.label.floatingLabel) {\n                this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n            }\n        },\n\n        enable: function(enable) {\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n\n            if (this.label && this.label.floatingLabel) {\n                this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n            }\n        },\n\n        _label: function() {\n            var that = this;\n            var options = that.options;\n            var labelOptions = isPlainObject(options.label) ? options.label : {\n                content: options.label\n            };\n\n            that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {\n                widget: that,\n                floatCheck: () => {\n                    if (!that.value() && (!that._hasDateInput() || that.element.val() === \"\") && document.activeElement !== that.element[0]) {\n                        this.element.val(\"\");\n                        return true;\n                    }\n\n                    return false;\n                }\n            }));\n\n            that._inputLabel = that.label.element;\n        },\n\n        _bindInput: function() {\n            var that = this;\n            that.element\n                .on(\"focus\" + ns, function() {\n                    that.wrapper.addClass(FOCUSED);\n                })\n                .on(\"focusout\" + ns, function() {\n                    that.wrapper.removeClass(FOCUSED);\n                });\n\n            if (this.dateInputInstance) {\n                this.dateInputInstance.bindEvents();\n            }\n        },\n\n        _unbindInput: function() {\n            this.element\n                .off(\"focus\" + ns)\n                .off(\"focusout\" + ns);\n\n            if (this.dateInputInstance) {\n                this.dateInputInstance.unbindEvents();\n            }\n        },\n\n        _editable: function(options) {\n            var that = this;\n            var element = that.element;\n            var disable = options.disable;\n            var readonly = options.readonly;\n            var wrapper = that.wrapper;\n\n            that._unbindInput();\n\n            if (!readonly && !disable) {\n                wrapper.removeClass(STATEDISABLED);\n                if (element && element.length) {\n                    element[0].removeAttribute(DISABLED);\n                    element[0].removeAttribute(READONLY);\n                }\n\n                that._bindInput();\n            } else {\n                if (disable) {\n                    wrapper.addClass(STATEDISABLED);\n                    element.attr(DISABLED, disable);\n                    if (element && element.length) {\n                        element[0].removeAttribute(READONLY);\n                    }\n                }\n                if (readonly) {\n                    element.attr(READONLY, readonly);\n                }\n            }\n        },\n\n        _change: function() {\n            let that = this,\n                oldValue = that._oldValue,\n                value = that.value(),\n                autoAdjust = that.options.autoAdjust;\n\n            if (autoAdjust && value && that.min() && value < that.min()) {\n                that.value(that.min());\n                value = that.value();\n            }\n            if (autoAdjust && value && that.max() && value > that.max()) {\n                that.value(that.max());\n                value = that.value();\n            }\n\n            if (oldValue && value && value.getTime() !== oldValue.getTime() ||\n                oldValue && !value ||\n                !oldValue && value\n            ) {\n                that._oldValue = value;\n                that.trigger(CHANGE, { blur: true });\n                that.element.trigger(CHANGE);\n            }\n        },\n\n\n        _blinkInvalidState: function() {\n            var that = this;\n\n            that._addInvalidState();\n            clearTimeout(that._invalidStateTimeout);\n            that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n        },\n\n        _addInvalidState: function() {\n            var that = this;\n\n            that.wrapper.addClass(STATEINVALID);\n            that._validationIcon.removeClass(\"k-hidden\");\n        },\n\n        _removeInvalidState: function() {\n            var that = this;\n\n            that.wrapper.removeClass(STATEINVALID);\n            that._validationIcon.addClass(\"k-hidden\");\n            that._invalidStateTimeout = null;\n        },\n\n\n        _form: function() {\n            var that = this;\n            var element = that.element;\n            var formId = element.attr(\"form\");\n            var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n            var initialValue = element[0].value;\n\n            if (!initialValue && that.options.value) {\n                initialValue = that.options.value;\n            }\n\n            if (form[0]) {\n                that._resetHandler = function() {\n                    setTimeout(function() {\n                        that.value(initialValue);\n                    });\n                };\n\n                that._formElement = form.on(\"reset\", that._resetHandler);\n            }\n        },\n\n        _paste: function(e) {\n            e.preventDefault();\n        },\n\n\n    });\n\n    kendo.cssProperties.registerPrefix(\"DateInput\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"DateInput\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    ui.plugin(DateInput$1);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}