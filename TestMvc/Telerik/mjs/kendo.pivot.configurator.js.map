{"version":3,"sources":["raw-mjs/kendo.pivot.configurator.js"],"names":["ConfiguratorNavigation","PIVOT_CONFIGURATOR_ACTION","configuratorReducer","fetchDiscover","__meta__","id","name","category","depends","hidden","$","kendo","window","ui","encode","htmlEncode","Widget","ns","HOVER_EVENTS","SETTING_CONTAINER_TEMPLATE","addKPI","data","found","idx","length","type","splice","caption","defaultHierarchy","uniqueName","kpiNode","node","normalizeKPIs","settingTargetFromNode","target","closest","PivotConfiguratorV2","extend","init","element","options","fn","call","this","_ariaId","attr","guid","addClass","role","_dataSource","navigatable","_initPivotGridConfiguratorNavigation","_layout","refresh","height","notify","events","orientation","filterable","sortable","messages","title","cancelButtonText","applyButtonText","measures","columns","rows","setDataSource","dataSource","that","configuratorNavigation","tabIndex","start","firstCell","first","setAttribute","_refreshHandler","unbind","_errorHandler","_progressHandler","_error","bind","_requestStart","PivotDataSourceV2","create","horizontal","panel","append","headerTextId","SETTINGS_TEMPLATE","appendTo","formClass","ariaId","CONTENT_TEMPLATE","find","each","index","elm","html","renderChipList","_fields","cancelText","applyText","ACTIONS_TEMPLATE","_targets","on","_actions","e","preventDefault","currentTarget","_applyState","read","_cancelChanges","treeView","last","targetItemTemplate","menuenabled","chip","renderChip","TARGET_ITEM_TEMPLATE","fillMode","themeColor","rounded","removable","removeIcon","actions","icon","_createTarget","template","connectWith","empty","fieldMenu","setting","forEach","x","PivotSettingTargetV2","hint","clone","remove","item","wrapper","dataItem","getByUid","checked","container","kendoTreeView","checkboxes","checkChildren","result","hasChildren","aggregator","local","uid","dataTextField","autoBind","check","sender","action","toggleSelection","payload","state","columnAxes","_state","rowAxes","measureAxes","cubeSchema","restoreMeasure","items","_checkMembers","trigger","_redraw","_treeViewDataSource","off","_clickHandler","HierarchicalDataSource","schema","model","transport","fields","dsMeasures","catalog","cube","fetchOptions","url","members","concat","isEmptyObject","dimensions","success","connection","restrictions","catalogName","cubeName","command","then","newFields","get","_getKPIOptions","buildKPImeasures","_loadFieldsCommand","newData","hash","field","dimensionUniqueName","hierarchyUniqueName","_progress","toggle","progress","destroy","fetch","plugin","PivotConfigurator","outerHeight","measuresLabel","columnsLabel","rowsLabel","fieldsLabel","PivotDataSource","kpi","schemaDimensions","done","cubeBuilder","fail","error","schemaKPIs","schemaMeasures","schemaLevels","schemaHierarchies","form","dragAndDrop","dragstart","sourceNode","measure","drag","status","dropTarget","validate","setStatusClass","drop","push","add","sortIcon","getIcons","PivotSettingTarget","emptyTemplate","columnsContainer","rowsContainer","measuresContainer","_toggleHover","toggleClass","_resize","_cube","_catalog","kpiMeasure","value","goal","trend","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","jQuery","kendo$1"],"mappings":";;;;;;;;MAAA,uBACA,6BACA,iCACA,4BACA,wCACA,+BACAA,4BAAAC,+BAAAC,yBAAAC,kBAAA,wCAEA,MAAAC,SAAA,CACAC,GAAA,qBACAC,KAAA,oBACAC,SAAA,MACAC,QAAA,CAAA,eAAA,WAAA,uBAAA,kBAAA,YAAA,gBAAA,QAAA,8BACAC,QAAA,IAIA,SAAAC,GACA,IAAAC,EAAAC,OAAAD,MACAE,EAAAF,EAAAE,GACAC,EAAAH,EAAAI,WACAC,EAAAH,EAAAG,OACAC,EAAA,0BACAC,EAAA,aAAAD,EAAA,cAAAA,EA0CAE,EAAA,EAAAb,UAAA,4EAAAQ,EAAAR,yDAEA,SAAAc,EAAAC,GAKA,IAJA,IAAAC,EACAC,EAAA,EACAC,EAAAH,EAAAG,OAEAD,EAAAC,EAAAD,IACA,GAAA,GAAAF,EAAAE,GAAAE,KAAA,CACAH,GAAA,EACA,KACA,CAGAA,GACAD,EAAAK,OAAAH,EAAA,EAAA,EAAA,CACAI,QAAA,OACAC,iBAAA,SACAtB,KAAA,OACAuB,WAAA,UAGA,CAEA,SAAAC,EAAAC,GACA,MAAA,CACAzB,KAAAyB,EAAAF,WACAJ,KAAAM,EAAAN,KAEA,CAEA,SAAAO,EAAAX,GACA,IAAA,IAAAE,EAAA,EAAAC,EAAAH,EAAAG,OAAAD,EAAAC,EAAAD,IACAF,EAAAE,GAAAM,WAAAR,EAAAE,GAAAjB,KACAe,EAAAE,GAAAE,KAAA,MAGA,OAAAJ,CACA,CAEA,SAAAY,EAAAF,GACA,IAAAG,EAAAxB,EAAAqB,GAAAI,QAAA,oBAEA,OAAAD,EAAAV,OACAU,EAAAb,KAAA,2BAEA,IACA,CAmBA,IAAAe,EAAApB,EAAAqB,OAAA,CACAC,KAAA,SAAAC,EAAAC,GACAxB,EAAAyB,GAAAH,KAAAI,KAAAC,KAAAJ,EAAAC,GAEAG,KAAAC,QAAAD,KAAAJ,QAAAM,KAAA,OAAAlC,EAAAmC,OACAH,KAAAJ,QAAAQ,SAAA,4BACAJ,KAAAJ,QAAAM,KAAA,CACAG,KAAA,SACA,eAAA,EACA,kBAAA,GAAAL,KAAAC,gCAGAD,KAAAM,cAEAN,KAAAH,QAAAU,aACAP,KAAAQ,uCAGAR,KAAAS,UAEAT,KAAAU,UAEAb,EAAAc,QACAX,KAAAJ,QAAAe,OAAAd,EAAAc,QAGA3C,EAAA4C,OAAAZ,KACA,EAEAa,OAAA,GAEAhB,QAAA,CACAlC,KAAA,sBACAmD,YAAA,WACAC,YAAA,EACAC,UAAA,EACAC,SAAA,CACAC,MAAA,WACAC,iBAAA,SACAC,gBAAA,QACAC,SAAA,oCACAC,QAAA,oCACAC,KAAA,sCAIAC,cAAA,SAAAC,GACAzB,KAAAH,QAAA4B,WAAAA,EAEAzB,KAAAM,cAEAN,KAAAqB,UACArB,KAAAqB,SAAAG,cAAAC,GAGAzB,KAAAuB,MACAvB,KAAAuB,KAAAC,cAAAC,GAGAzB,KAAAsB,SACAtB,KAAAsB,QAAAE,cAAAC,GAGAzB,KAAAU,SACA,EAEAF,qCAAA,WACA,IAAAkB,EAAA1B,KACA0B,EAAAC,uBAAA,IAAAtE,uBAAA,CAAAuE,SAAA,IACAF,EAAAC,uBAAAE,MAAAH,EAAA9B,QAAA,IAEA,MAAAkC,EAAAJ,EAAAC,uBAAAI,MAEAD,GACAA,EAAAE,aAAA,WAAA,IAEA,EAEA1B,YAAA,WACA,IAAAoB,EAAA1B,KAEA0B,EAAAD,YAAAC,EAAAO,gBACAP,EAAAD,WAAAS,OAAA,SAAAR,EAAAO,iBACAC,OAAA,QAAAR,EAAAS,eACAD,OAAA,WAAAR,EAAAU,mBAEAV,EAAAS,cAAAT,EAAAW,OAAAC,KAAAZ,GACAA,EAAAO,gBAAAP,EAAAhB,QAAA4B,KAAAZ,GACAA,EAAAU,iBAAAV,EAAAa,cAAAD,KAAAZ,IAGAA,EAAAD,WAAAzD,EAAAU,KAAA8D,kBAAAC,OAAAf,EAAA7B,QAAA4B,YACAC,EAAAD,WAAAa,KAAA,SAAAZ,EAAAO,iBACAK,KAAA,QAAAZ,EAAAS,eACAG,KAAA,WAAAZ,EAAAU,iBACA,EAEA3B,QAAA,WAEA,IAAAiB,EAAA1B,KACAH,EAAA6B,EAAA7B,QACAoB,EAAApB,EAAAoB,SACAyB,EAAA,cAAA7C,EAAAiB,YAEA6B,EAAA5E,EAAA,oFAEA4E,EAAAvC,SAAAsC,EAAA,sCAAA,qCAEAhB,EAAA9B,QAAAgD,OAAAD,GAEAjB,EAAAiB,MAAAA,EAEA5E,EA3NA,GAAAmD,QAAA2B,kBACA,sGAAAA,MAAA1E,EAAA+C,iBA0NA4B,CAAA,CAAA5B,MAAAlB,KAAAH,QAAAoB,SAAAC,MAAA2B,aAAA,GAAAnB,EAAAzB,iCAAA8C,SAAArB,EAAAiB,OAEA5E,EA1NA,GAAAiF,YAAAN,aAAAO,YACA,8DAAA9E,EAAA6E,QACAN,EAAA,qCAAA,IACA,6BACA,8BAAAO,wHAKAP,EAAA,2CAAA,IACA,6BACA,8BAAAO,yHAIA,8BAAAA,uFAGAP,EAAA,2CAAA,IACA,6BACA,8BAAAO,8FAGAP,EAAA,SAAA,IAvBA,gBA0NAQ,CAAA,CAAAF,UAAAN,EAAA,qCAAA,mBAAA3B,WAAAlB,EAAAkB,WAAA2B,WAAAA,EAAAO,OAAAvB,EAAAzB,WACA8C,SAAArB,EAAAiB,OAAAQ,KAAA,gBACAC,MAAA,SAAAC,EAAAC,GACAtF,EAAAuF,KAAAC,eAAAF,EAAAvF,EAAA2B,OAAA,CAAA,EAAAG,IACA9B,EAAAuF,GAAApD,KAAA,CACAG,KAAA,UACA,mBAAA,cAEA,IAEAqB,EAAA+B,UACA1F,EAxMA,GAAA2F,aAAAC,eAGA,iOAAAxF,EAAAuF,+JAGAvF,EAAAwF,2BAkMAC,CAAA,CAAAF,WAAAzC,EAAAE,iBAAAwC,UAAA1C,EAAAG,mBAAA2B,SAAArB,EAAAiB,OACAjB,EAAAmC,WAEAnC,EAAA9B,QAAAkE,GAAA,QAAAxF,EAAA,6CAAAoD,EAAAqC,SAAAzB,KAAAZ,GACA,EAEAqC,SAAA,SAAAC,GACAA,EAAAC,iBAEAlG,EAAAiG,EAAAE,eAAA1E,QAAA,kBACA6D,SACArD,KAAAsB,QAAA6C,cACAnE,KAAAuB,KAAA4C,cACAnE,KAAAqB,SAAA8C,cACAnE,KAAAyB,WAAA2C,SAEApE,KAAAsB,QAAA+C,iBACArE,KAAAuB,KAAA8C,iBACArE,KAAAqB,SAAAgD,iBACArE,KAAAsE,SAAA7C,WAAA2C,OAEA,EAEAP,SAAA,WACA,IAAAnC,EAAA1B,KACAsB,EAAAI,EAAAiB,MAAAQ,KAAA,oBAAApB,QACAR,EAAAG,EAAAiB,MAAAQ,KAAA,iBACA9B,EAAAK,EAAAiB,MAAAQ,KAAA,gBAAAoB,OACA1E,EAAAG,KAAAH,QAEA2E,EAAA,EAAA7G,OAAA8G,kBACA,IAAAC,EAAA1G,EAAAuF,KAAAoB,WA1OA,GAAAhH,UACA,oCAAAQ,EAAAR,mBAyOAiH,CAAA,CAAAjH,OAAA8G,gBAAA1G,EAAA2B,OAAA,CAAA,EAAAG,EAAA,CACAgF,SAAA,QACAC,WAAA,OACAC,QAAA,KACAC,WAAA,EACAC,WAAA,WACAC,QAAAT,EAAA,CACA,CAAAU,KAAA,kBACA,QAGA,OAAAT,CAAA,EAGA1E,KAAAsB,QAAAtB,KAAAoF,cAAA9D,EAAA,CACAf,YAAAV,EAAAU,YACAQ,WAAAlB,EAAAkB,WACAC,SAAAnB,EAAAmB,SACAqE,SAAAb,EACAc,YAAA/D,EACAN,SAAA,CACAsE,MAAA1F,EAAAoB,SAAAK,QACAkE,UAAAxF,KAAAH,QAAAoB,SAAAuE,WAEA7D,uBAAAD,EAAAC,yBAEA3B,KAAAsB,QAAA1B,QAAAM,KAAA,kBAAA,GAAAF,KAAAC,+BAAAD,KAAAC,gCAEAD,KAAAuB,KAAAvB,KAAAoF,cAAA7D,EAAA,CACAhB,YAAAV,EAAAU,YACAQ,WAAAlB,EAAAkB,WACAC,SAAAnB,EAAAmB,SACAqE,SAAAb,EACAiB,QAAA,OACAH,YAAAhE,EACAL,SAAA,CACAsE,MAAAvF,KAAAH,QAAAoB,SAAAM,KACAiE,UAAAxF,KAAAH,QAAAoB,SAAAuE,WAEA7D,uBAAAD,EAAAC,yBAEA3B,KAAAuB,KAAA3B,QAAAM,KAAA,kBAAA,GAAAF,KAAAC,+BAAAD,KAAAC,6BAEAD,KAAAqB,SAAArB,KAAAoF,cAAA/D,EAAA,CACAd,YAAAV,EAAAU,YACAQ,YAAA,EACAC,UAAA,EACAyE,QAAA,WACAJ,SAAAb,EACAvD,SAAA,CACAsE,MAAA1F,EAAAoB,SAAAI,SACAmE,UAAAxF,KAAAH,QAAAoB,SAAAuE,WAEA7D,uBAAAD,EAAAC,yBAGA3B,KAAAqB,SAAAzB,QAAAM,KAAA,kBAAA,GAAAF,KAAAC,+BAAAD,KAAAC,+BAEA,CAAAD,KAAAsB,QAAAtB,KAAAuB,KAAAvB,KAAAqB,UAAAqE,SAAAC,GAAAA,EAAA/F,QAAAuD,KAAA,WAAAjD,KAAA,OAAA,WACA,EAEAkF,cAAA,SAAAxF,EAAAC,GACA,IAAA6B,EAAA1B,KACA,OAAA,IAAAhC,EAAAE,GAAA0H,qBAAAhG,EAAA7B,EAAA2B,OAAA,CACA+B,WAAAzB,KAAAyB,WACAoE,KAAA,SAAAjG,GACA,OAAAA,EAAAkG,OACA,EACAC,OAAA,SAAA/B,GACA,IAAAgC,EAAAtE,EAAA4C,SAAA2B,QACA9C,KAAA,eAAAa,EAAArG,KAAA,MACA6B,QAAA,MACA9B,EAAAsI,EAAA9F,KAAAlC,EAAAkC,KAAA,QACAgG,EAAAxE,EAAA4C,SAAA7C,WAAA0E,SAAAzI,GAEAwI,IACAA,EAAAE,SAAA,EACAJ,EAAA7C,KAAA,SAAAjD,KAAA,WAAA,GAEA,EACAmF,SAAAxF,EAAAwF,UACAxF,GACA,EAEA4D,QAAA,WACA,IAAA/B,EAAA1B,KACAqG,EAAA3E,EAAA9B,QAAAuD,KAAA,0BAEAnD,KAAAsE,SAAAvG,EAAA,yBAAAiC,KAAAC,+BAAAD,KAAAC,mCAAA8C,SAAAsD,GACAC,cAAA,CACAC,WAAA,CACAC,eAAA,EACAnB,SAAA,EAAAW,WACA,IAAAS,EAAA,GAMA,OAJAT,EAAAU,aAAAV,EAAAW,YAAAX,EAAAY,QAAA,WAAAZ,EAAA9G,YAAA,eAAA8G,EAAA9G,YAAA,aAAA8G,EAAA9G,aACAuH,GAAA,qCAAAtI,EAAA6H,EAAA9G,gBAAA8G,EAAAI,QAAA,UAAA,wDAAAjI,EAAA6H,EAAAa,wBAGAJ,CAAA,GAGAK,cAAA,UACAC,UAAA,EACAC,MAAA,SAAAhD,GACA,IAAAkC,EAAAlC,EAAAiD,OAAAf,SAAAlC,EAAA5E,MACA8H,EAAA,CACApI,KAAAxB,0BAAA6J,gBACAC,QAAAlB,GAEAmB,EAAA,CACAC,WAAA5F,EAAAJ,QAAAiG,SACAC,QAAA9F,EAAAH,KAAAgG,SACAE,YAAA/F,EAAAL,SAAAkG,UAEAd,EAAAlJ,oBAAA8J,EAAAH,GAEAxF,EAAAD,WAAAiG,YAAAjB,EAAAgB,aAAAhB,EAAAgB,YAAA5I,QACA4H,EAAAgB,YAAA5I,OAAAwI,EAAAI,YAAA5I,QACA6C,EAAAD,WAAAiG,WAAAC,eAAAlB,EAAAgB,YAAAvB,GAGAA,EAAAjH,kBAAAiH,EAAA0B,OAAA1B,EAAA0B,MAAA/I,SACA6C,EAAAmG,cAAA,CAAA,CAAAlK,KAAAuI,EAAAjH,mBAAAiH,EAAA0B,OACA1B,EAAA0B,MAAAE,QAAA,WAGArB,EAAAa,aACA5F,EAAAJ,QAAAiG,OAAAd,EAAAa,YACA5F,EAAAJ,QAAAyG,WAEAtB,EAAAe,UACA9F,EAAAH,KAAAgG,OAAAd,EAAAe,SACA9F,EAAAH,KAAAwG,WAEAtB,EAAAgB,cACA/F,EAAAL,SAAAkG,OAAAd,EAAAgB,aACA/F,EAAAL,SAAA0G,UAEA,EACAtG,WAAAzB,KAAAgI,wBAEAtJ,KAAA,iBAEAsB,KAAAsE,SAAA2B,QAAAgC,IAAA,QAAAjI,KAAAsE,SAAA4D,cACA,EAEAF,oBAAA,WACA,IAAAtG,EAAA1B,KAEA,OAAAhC,EAAAU,KAAAyJ,uBAAA1F,OAAA,CACA2F,OAAA,CACAC,MAAA,CACA3K,GAAA,aACAgJ,YAAA,SAAAV,GACA,OAAAtE,EAAAD,WAAAiG,YAAA,aAAA1B,EAAA9G,YACA8G,EAAAY,OAAA,GACA,KAEA,wBAAAZ,MAAA,eAAAA,EACA,IAGAsC,UAAA,CACAlE,KAAA,SAAAvE,GACA,IAAAT,EAWAmJ,EACAC,EAXAF,EAAA5G,EAAAD,WAAA6G,UACAG,EAAAH,EAAAG,UACAC,EAAAJ,EAAAI,OACAC,EAAA,CACAC,IAAAN,EAAAzI,QAAAuE,MAEA9C,EAAAI,EAAAJ,QAAAiG,SACAhG,EAAAG,EAAAH,KAAAgG,SACAlG,EAAAK,EAAAL,SAAAkG,SACAsB,EAAAvH,EAAAwH,OAAAvH,GAAAuH,OAAAzH,GAKAtD,EAAAgL,cAAAlJ,EAAAnB,MACAgD,EAAAD,WAAAiG,YACAa,EAAA7G,EAAAD,WAAAiG,WAAAsB,aACAtH,EAAAmG,cAAAgB,EAAAN,GACA1I,EAAAoJ,QAAAV,IAcA/K,cAAAmL,EAZA,CACAO,WAAA,CACAT,QAAAA,EACAC,KAAAA,GAEAS,aAAA,CACAC,YAAAX,EACAY,SAAAX,GAEAY,QAAA,qBAIAC,MAAA,SAAAC,GACA9H,EAAAmG,cAAAgB,EAAAW,GACA/K,EAAA+K,GACA3J,EAAAoJ,QAAAO,EACA,KAIApK,EAAAsC,EAAA4C,SAAA7C,WAAAgI,IAAA5J,EAAAnB,KAAAQ,YAEAwC,EAAAD,WAAAiG,YACAc,EAAA9G,EAAAD,WAAAJ,WACAK,EAAAmG,cAAAgB,EAAAL,GACA3I,EAAAoJ,QAAAT,IAEA,WAAApJ,EAAAF,WACA1B,cAAAmL,EAAAjH,EAAAgI,eAAAjB,EAAAC,IACAa,MAAA,SAAAC,GACA3J,EAAAoJ,QAAA5J,EAAAmK,GACA,IACA,OAAApK,EAAAN,KACAe,EAAAoJ,QAAAU,EAAAvK,IAEA5B,cAAAmL,EAAAjH,EAAAkI,mBAAAxK,EAAAqJ,EAAAC,IACAa,MAAA,SAAAC,GACA9H,EAAAmG,cAAAgB,EAAAW,GACA3J,EAAAoJ,QAAAO,EACA,IAIA,IAGA,EAEA3B,cAAA,SAAAgB,EAAAgB,GACA,IAAAC,EAAA,CAAA,EACAzG,EAAA,EAEA,IAAAA,EAAA,EAAAA,EAAAwF,EAAAhK,OAAAwE,IACAyG,EAAAjB,EAAAxF,GAAA1F,OAAA,EAGA,IAAA0F,EAAA,EAAAA,EAAAwG,EAAAhL,OAAAwE,IACAyG,EAAAD,EAAAxG,GAAAnE,cACA2K,EAAAxG,GAAA+C,SAAA,EAGA,EAEAsD,eAAA,SAAAjB,EAAAC,GACA,MAAA,CACAQ,WAAA,CACAT,QAAAA,EACAC,KAAAA,GAEAS,aAAA,CACAC,YAAAX,EACAY,SAAAX,GAEAY,QAAA,aAEA,EAEAM,mBAAA,SAAAG,EAAAtB,EAAAC,GACA,IAAAY,EACAU,EACAC,EA0BA,OAxBA,IAAAF,EAAAjL,KACAwK,EAAA,iBACAS,EAAAC,qBACAV,EAAA,eACAW,EAAAF,EAAA7K,aAEAoK,EAAA,oBACAU,EAAAD,EAAA7K,YAGA,CACAgK,WAAA,CACAT,QAAAA,EACAC,KAAAA,GAEAS,aAAA,CACAC,YAAAX,EACAY,SAAAX,EACAuB,oBAAAA,EACAD,oBAAAA,GAEAV,QAAAA,EAIA,EAEAY,UAAA,SAAAC,GACAnM,EAAAE,GAAAkM,SAAApK,KAAAJ,QAAAuK,EACA,EAEA9H,OAAA,WACArC,KAAAkK,WAAA,EACA,EAEA3H,cAAA,WACAvC,KAAAkK,WAAA,EACA,EAEAG,QAAA,WACAhM,EAAAyB,GAAAuK,QAAAtK,KAAAC,MAEAA,KAAAyB,WAAAS,OAAA,SAAAlC,KAAAiC,iBAEAjC,KAAAJ,QAAAqI,IAAA3J,GAEA0B,KAAAuB,KAAA8I,UACArK,KAAAsB,QAAA+I,UACArK,KAAAqB,SAAAgJ,UACArK,KAAAsE,SAAA+F,UAEArK,KAAAJ,QAAA,KACAI,KAAAiC,gBAAA,IACA,EAEAvB,QAAA,WACAV,KAAAsE,UACAtE,KAAAsE,SAAA7C,WAAA6I,QAGAtK,KAAAkK,WAAA,EACA,IAIAhM,EAAAqM,OAAA9K,GAEA,IAAA+K,EAAAnM,EAAAqB,OAAA,CACAC,KAAA,SAAAC,EAAAC,GACAxB,EAAAyB,GAAAH,KAAAI,KAAAC,KAAAJ,EAAAC,GAEAG,KAAAJ,QAAAQ,SAAA,+CAEAJ,KAAAH,QAAAc,QACAX,KAAAJ,QAAA6K,YAAAzK,KAAAH,QAAAc,QAGAX,KAAAM,cAEAN,KAAAS,UAEAT,KAAAU,UAEA1C,EAAA4C,OAAAZ,KACA,EAEAa,OAAA,GAEAhB,QAAA,CACAlC,KAAA,oBACAoD,YAAA,EACAC,UAAA,EACAC,SAAA,CACAI,SAAA,wBACAC,QAAA,0BACAC,KAAA,wBACAmJ,cAAA,WACAC,aAAA,UACAC,UAAA,OACAC,YAAA,WAIAvK,YAAA,WACA,IAAAoB,EAAA1B,KAEA0B,EAAAD,YAAAC,EAAAO,gBACAP,EAAAD,WAAAS,OAAA,SAAAR,EAAAO,iBACAC,OAAA,QAAAR,EAAAS,eACAD,OAAA,WAAAR,EAAAU,mBAEAV,EAAAS,cAAAT,EAAAW,OAAAC,KAAAZ,GACAA,EAAAO,gBAAAP,EAAAhB,QAAA4B,KAAAZ,GACAA,EAAAU,iBAAAV,EAAAa,cAAAD,KAAAZ,IAGAA,EAAAD,WAAAzD,EAAAU,KAAAoM,gBAAArI,OAAAf,EAAA7B,QAAA4B,YACAC,EAAAD,WAAAa,KAAA,SAAAZ,EAAAO,iBACAK,KAAA,QAAAZ,EAAAS,eACAG,KAAA,WAAAZ,EAAAU,iBACA,EAEAZ,cAAA,SAAAC,GACAzB,KAAAH,QAAA4B,WAAAA,EAEAzB,KAAAM,cAEAN,KAAAqB,UACArB,KAAAqB,SAAAG,cAAAC,GAGAzB,KAAAuB,MACAvB,KAAAuB,KAAAC,cAAAC,GAGAzB,KAAAsB,SACAtB,KAAAsB,QAAAE,cAAAC,GAGAzB,KAAAU,SACA,EAEAsH,oBAAA,WACA,IAAAtG,EAAA1B,KAEA,OAAAhC,EAAAU,KAAAyJ,uBAAA1F,OAAA,CACA2F,OAAA,CACAC,MAAA,CACA3K,GAAA,aACAgJ,YAAA,SAAAV,GACA,QAAA,wBAAAA,MAAA,eAAAA,EACA,IAGAsC,UAAA,CACAlE,KAAA,SAAAvE,GACA,IACAT,EACA2L,EAEAhN,EAAAgL,cAAAlJ,EAAAnB,MACAgD,EAAAD,WAAAuJ,mBAEAC,MAAA,SAAAvM,GACAgD,EAAAD,WAAAyJ,aACAzM,EAAAC,GAEAmB,EAAAoJ,QAAAvK,EACA,IACAyM,KAAAtL,EAAAuL,QAKA,YAFAhM,EAAAsC,EAAA4C,SAAA7C,WAAAgI,IAAA5J,EAAAnB,KAAAQ,aAEAA,YACA6L,GAAA,EACArJ,EAAAD,WAAA4J,aACAJ,MAAA,SAAAvM,GACAmB,EAAAoJ,QAAA5J,EAAAX,GACA,IACAyM,KAAAtL,EAAAuL,QACA,OAAAhM,EAAAN,OACAiM,GAAA,EACAlL,EAAAoJ,QAAAU,EAAAvK,KAGA2L,IACA,GAAA3L,EAAAN,KACA4C,EAAAD,WAAA6J,iBACAlM,EAAA4K,oBACAtI,EAAAD,WAAA8J,aAAA1L,EAAAnB,KAAAQ,YAEAwC,EAAAD,WAAA+J,kBAAA3L,EAAAnB,KAAAQ,aAGA+L,KAAApL,EAAAoJ,SACAkC,KAAAtL,EAAAuL,OAGA,IAGA,EAEAlB,UAAA,SAAAC,GACAnM,EAAAE,GAAAkM,SAAApK,KAAAJ,QAAAuK,EACA,EAEA9H,OAAA,WACArC,KAAAkK,WAAA,EACA,EAEA3H,cAAA,WACAvC,KAAAkK,WAAA,EACA,EAEAzJ,QAAA,WACA1C,EAAA,oGAAAgF,SAAA/C,KAAAJ,SACAI,KAAAyL,KAAAzL,KAAAJ,QAAAuD,KAAA,qCAEAnD,KAAAyD,UACAzD,KAAA6D,UACA,EAEAJ,QAAA,WACA,IAAA4C,EAAAtI,EAAA,4EAAAI,EAAA6B,KAAAH,QAAAoB,SAAA4J,aAAA,4DAAA9H,SAAA/C,KAAAyL,MAgBAzL,KAAAsE,SAAAvG,EAAA,UAAAgF,SAAAsD,EAAAlD,KAAA,2BACAmD,cAAA,CACAjB,SAhBA,EAAAW,WACA,IAAAS,EAAA,GAUA,OARA,GAAAT,EAAAlH,MAAA,UAAAkH,EAAA9G,WACAuH,GAAAzI,EAAAE,GAAAiH,KAAA,GAAAa,EAAAlH,KAAA,MAAA,oBACAkH,EAAAlH,MAAA,QAAAkH,EAAAlH,OACA2H,GAAAzI,EAAAE,GAAAiH,KAAA,gBAGAsB,GAAA,GAAAtI,EAAA6H,EAAAhH,SAAAgH,EAAArI,OAEA,EAMAmJ,cAAA,UACA4E,aAAA,EACA3E,UAAA,EACAtF,WAAAzB,KAAAgI,sBACA2D,UAAA,SAAA3H,GACA,IAAAkC,EAAAlG,KAAAkG,SAAAlC,EAAA4H,aAEA1F,EAAAQ,aAAAR,EAAAS,YAAAT,EAAA2F,UAAA,GAAA3F,EAAApH,MAAA,WAAAoH,EAAAhH,YACA8E,EAAAC,gBAEA,EACA6H,KAAA,SAAA9H,GACA,IAAA+H,EAAA,SACAtG,EAAAnG,EAAA0E,EAAAgI,YAEAvG,GAAAA,EAAAwG,SAAAjM,KAAAkG,SAAAlC,EAAA4H,eACAG,EAAA,QAGA/H,EAAAkI,eAAAH,EACA,EACAI,KAAA,SAAAnI,GACAA,EAAAC,iBAEA,IAEArF,EAAAC,EAAAwC,EACA1D,EAHA8H,EAAAnG,EAAA0E,EAAAgI,YACA5M,EAAAY,KAAAkG,SAAAlC,EAAA4H,YAIA,GAAAnG,GAAAA,EAAAwG,SAAA7M,GAAA,CAGA,GAFAzB,EAAAyB,EAAAH,kBAAAG,EAAAF,WAEA,QAAAE,EAAAN,KAKA,IAHAD,GADAwC,EAAAsI,EAAAvK,IACAP,OACAlB,EAAA,GAEAiB,EAAA,EAAAA,EAAAC,EAAAD,IACAjB,EAAAyO,KAAAjN,EAAAkC,EAAAzC,UAEAQ,EAAA2L,MACApN,EAAA,CAAAwB,EAAAC,KAGAqG,EAAA4G,IAAA1O,EACA,CACA,IAEAe,KAAA,gBACA,EAEA0G,cAAA,SAAAxF,EAAAC,GACA,IAAAwF,EAYA,OAVAA,EAAA,EAAA1H,OAAA2O,cACA,kFAAAtO,EAAAM,WAAAX,8DAEAA,+DAvuBA,SAAA2O,EAAAzM,GACA,IAAAmB,EAAAnB,EAAAmB,SACAyF,EAAA,GAYA,OAVAzF,IACAyF,GAAA6F,EAAA,kDAAAtO,EAAAE,GAAAiH,KAAAmH,EAAA,gBAAA,KAGAzM,EAAAkB,YAAAC,KACAyF,GAAA,mDAAAzI,EAAAE,GAAAiH,KAAA,2BAGAsB,EAAA,gDAAAzI,EAAAE,GAAAiH,KAAA,aAGA,CA2tBAoH,CAAAD,EAAAzM,GANA,gBAUA,IAAA7B,EAAAE,GAAAsO,mBAAA5M,EAAA7B,EAAA2B,OAAA,CACA+B,WAAAzB,KAAAyB,WACA4D,SAAAA,EACAoH,cAAA/N,GAAA,yBAAAA,YACAmB,GACA,EAEAgE,SAAA,WACA,IAAAwC,EAAAtI,EAAA,sCAAAgF,SAAA/C,KAAAyL,MAEAiB,EAAA3O,EAAAS,EAAA,CAAAb,KAAAqC,KAAAH,QAAAoB,SAAA0J,aAAAxF,KAAA,aAAApC,SAAAsD,GACA/E,EAAAvD,EAAA,+CAAAgF,SAAA2J,EAAAvJ,KAAA,6BAEAwJ,EAAA5O,EAAAS,EAAA,CAAAb,KAAAqC,KAAAH,QAAAoB,SAAA2J,UAAAzF,KAAA,UAAApC,SAAAsD,GACA9E,EAAAxD,EAAA,+CAAAgF,SAAA4J,EAAAxJ,KAAA,6BAEAyJ,EAAA7O,EAAAS,EAAA,CAAAb,KAAAqC,KAAAH,QAAAoB,SAAAyJ,cAAAvF,KAAA,SAAApC,SAAAsD,GACAhF,EAAAtD,EAAA,+CAAAgF,SAAA6J,EAAAzJ,KAAA,6BAEAtD,EAAAG,KAAAH,QAEAG,KAAAsB,QAAAtB,KAAAoF,cAAA9D,EAAA,CACAP,WAAAlB,EAAAkB,WACAC,SAAAnB,EAAAmB,SACAsE,YAAA/D,EACAN,SAAA,CACAsE,MAAA1F,EAAAoB,SAAAK,QACAkE,UAAA3F,EAAAoB,SAAAuE,aAIAxF,KAAAuB,KAAAvB,KAAAoF,cAAA7D,EAAA,CACAR,WAAAlB,EAAAkB,WACAC,SAAAnB,EAAAmB,SACAyE,QAAA,OACAH,YAAAhE,EACAL,SAAA,CACAsE,MAAAvF,KAAAH,QAAAoB,SAAAM,KACAiE,UAAAxF,KAAAH,QAAAoB,SAAAuE,aAIAxF,KAAAqB,SAAArB,KAAAoF,cAAA/D,EAAA,CACAoE,QAAA,WACAxE,SAAA,CACAsE,MAAA1F,EAAAoB,SAAAI,YAIAC,EACA+K,IAAA9K,GACA8K,IAAAhL,GACAyC,GAAAvF,EAAA,wBAAAyB,KAAA6M,aACA,EAEAA,aAAA,SAAA7I,GACAjG,EAAAiG,EAAAE,eAAA1E,QAAA,kBAAAsN,YAAA,UAAA,eAAA9I,EAAAlF,KACA,EAEAiO,QAAA,WACA,IAAAnN,EAAAI,KAAAJ,QACAe,EAAAX,KAAAH,QAAAc,OAEAA,GAIAf,EAAA6K,YAAA9J,EACA,EAEAD,QAAA,WACA,IAAAe,EAAAzB,KAAAyB,YAEAA,EAAAyJ,aAAAlL,KAAAgN,QAAAvL,EAAAiH,QAAA1I,KAAAiN,WAAAxL,EAAAgH,YACAzI,KAAAsE,SAAA7C,WAAA6I,QAGAtK,KAAAiN,SAAAjN,KAAAyB,WAAAgH,UACAzI,KAAAgN,MAAAhN,KAAAyB,WAAAiH,OAEA1I,KAAA+M,UAEA/M,KAAAkK,WAAA,EACA,EAEAG,QAAA,WACAhM,EAAAyB,GAAAuK,QAAAtK,KAAAC,MAEAA,KAAAyB,WAAAS,OAAA,SAAAlC,KAAAiC,iBAEAjC,KAAAyL,KAAAtI,KAAA,oBAAA8E,IAAA3J,GAEA0B,KAAAuB,KAAA8I,UACArK,KAAAsB,QAAA+I,UACArK,KAAAqB,SAAAgJ,UACArK,KAAAsE,SAAA+F,UAEArK,KAAAJ,QAAA,KACAI,KAAAiC,gBAAA,IACA,IAGA,SAAAiL,EAAAvP,EAAAkO,EAAA/M,GACA,MAAA,CACAmL,oBAAAtM,EACAuB,WAAA2M,EACA7M,QAAA6M,EACAA,QAAAA,EACAlO,KAAAkO,EACA/M,KAAAA,EACAiM,KAAA,EAEA,CAEA,SAAApB,EAAAvK,GACA,IAAAzB,EAAAyB,EAAAzB,KACA,MAAA,CACAuP,EAAAvP,EAAAyB,EAAA+N,MAAA,SACAD,EAAAvP,EAAAyB,EAAAgO,KAAA,QACAF,EAAAvP,EAAAyB,EAAA2M,OAAA,UACAmB,EAAAvP,EAAAyB,EAAAiO,MAAA,SAEA,CAEArP,EAAAsP,cAAAC,eAAA,WAAA,WAEAvP,EAAAsP,cAAAE,eAAA,WAAA,CAAA,CACAC,KAAA,UACAC,OAAA1P,EAAAsP,cAAAK,cAAA7E,OAAA,CAAA,CAAA,KAAA,WAGA5K,EAAAqM,OAAAC,EAEA,CAp9BA,CAo9BAvM,OAAAD,MAAA4P,QACA,IAAAC,QAAA7P,aAEAP,SAAAoQ","file":"kendo.pivot.configurator.js","sourcesContent":["import './kendo.dom.js';\nimport './kendo.html.chip.js';\nimport './kendo.html.chiplist.js';\nimport './kendo.treeview.js';\nimport './kendo.treeview.draganddrop.js';\nimport './kendo.icons.js';\nimport { H as ConfiguratorNavigation, I as PIVOT_CONFIGURATOR_ACTION, u as configuratorReducer, h as fetchDiscover } from './kendo.pivotgrid-common.cmn.chunk.js';\n\nconst __meta__ = {\n    id: \"pivot.configurator\",\n    name: \"PivotConfigurator\",\n    category: \"web\",\n    depends: [\"dropdownlist\", \"treeview\", \"treeview.draganddrop\", \"pivot.fieldmenu\", \"html.chip\", \"html.chiplist\", \"icons\", \"pivotgrid-common.cmn.chunk\"],\n    hidden: true\n};\n\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        encode = kendo.htmlEncode,\n        Widget = ui.Widget,\n        ns = \".kendoPivotConfigurator\",\n        HOVER_EVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n        SETTINGS_TEMPLATE = ({ title, headerTextId }) => '<div class=\"k-pivotgrid-configurator-header\">' +\n                                            `<div class=\"k-pivotgrid-configurator-header-text\" id=\"${headerTextId}\">${encode(title)}</div>` +\n                                          '</div>',\n        CONTENT_TEMPLATE = ({ formClass, horizontal, ariaId }) => '<div class=\"k-pivotgrid-configurator-content\">' +\n            `<form class=\"${encode(formClass)}\">` +\n                `${horizontal ? '<div class=\"k-form-field-wrapper\">' : ''}` +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-fields\">Fields</label>` +\n                '</div>' +\n                '<div class=\"k-form-field\">' +\n                  '<div class=\"k-fields-list-wrapper\"></div>' +\n                '</div>' +\n                `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-columns\">Columns</label>` +\n                '</div>' +\n                '<div class=\"k-chip-list k-column-fields\"></div>' +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-rows\">Rows</label>` +\n                '</div>' +\n                '<div class=\"k-chip-list k-row-fields\"></div>' +\n                `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-values\">Values</label>` +\n                '</div>' +\n                '<div class=\"k-chip-list k-column-fields\"></div>' +\n                `${horizontal ? '</div>' : ''}` +\n            '</form>' +\n        '</div>',\n        TARGET_ITEM_TEMPLATE = ({ name }) => '<span>' +\n                `<span class=\"k-chip-label\">${encode(name)}</span>` +\n            '</span>',\n        ACTIONS_TEMPLATE = ({ cancelText, applyText }) =>\n                '<div class=\"k-pivotgrid-configurator-actions k-actions k-hstack k-justify-content-end\">' +\n                  '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" aria-disabled=\"false\">' +\n                    `<span class=\"k-button-text\">${encode(cancelText)}</span>` +\n                  '</button>' +\n                  '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\" aria-disabled=\"false\">' +\n                    `<span class=\"k-button-text\">${encode(applyText)}</span>` +\n                  '</button>' +\n                '</div>',\n        SETTING_CONTAINER_TEMPLATE = ({ name }) => `<div class=\"k-pivotgrid-target k-pivotgrid-configurator-section\"><strong>${encode(name)}</strong><div class=\"k-pivotgrid-target-wrap\"></div>`;\n\n    function addKPI(data) {\n        var found;\n        var idx = 0;\n        var length = data.length;\n\n        for (; idx < length; idx++) {\n            if (data[idx].type == 2) {\n                found = true;\n                break;\n            }\n        }\n\n        if (found) {\n            data.splice(idx + 1, 0, {\n                caption: \"KPIs\",\n                defaultHierarchy: \"[KPIs]\",\n                name: \"KPIs\",\n                uniqueName: \"[KPIs]\"\n            });\n        }\n    }\n\n    function kpiNode(node) {\n        return {\n            name: node.uniqueName,\n            type: node.type\n        };\n    }\n\n    function normalizeKPIs(data) {\n        for (var idx = 0, length = data.length; idx < length; idx++) {\n            data[idx].uniqueName = data[idx].name;\n            data[idx].type = \"kpi\";\n        }\n\n        return data;\n    }\n\n    function settingTargetFromNode(node) {\n        var target = $(node).closest(\".k-pivot-setting\");\n\n        if (target.length) {\n            return target.data(\"kendoPivotSettingTarget\");\n        }\n        return null;\n    }\n\n    function getIcons(sortIcon, options) {\n        var sortable = options.sortable;\n        var result = '';\n\n        if (sortable) {\n            result += sortIcon ? `<span class=\"k-chip-action k-chip-more-action\">${kendo.ui.icon(sortIcon + \"-sm\")}</span>` : '';\n        }\n\n        if (options.filterable || sortable) {\n            result += `<span class=\"k-setting-fieldmenu k-chip-action\">${kendo.ui.icon(\"more-vertical\")}</span>`;\n        }\n\n        result += `<span class=\"k-setting-delete k-chip-action\">${kendo.ui.icon(\"x\")}</span>`;\n\n        return result;\n    }\n\n    var PivotConfiguratorV2 = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            this._ariaId = this.element.attr(\"id\") || kendo.guid();\n            this.element.addClass(\"k-pivotgrid-configurator\");\n            this.element.attr({\n                \"role\": \"dialog\",\n                \"aria-hidden\": true,\n                \"aria-labelledby\": `${this._ariaId}-configurator-header`\n            });\n\n            this._dataSource();\n\n            if (this.options.navigatable) {\n                this._initPivotGridConfiguratorNavigation();\n            }\n\n            this._layout();\n\n            this.refresh();\n\n            if (options.height) {\n                this.element.height(options.height);\n            }\n\n            kendo.notify(this);\n        },\n\n        events: [],\n\n        options: {\n            name: \"PivotConfiguratorV2\",\n            orientation: \"vertical\",\n            filterable: false,\n            sortable: false,\n            messages: {\n                title: \"Settings\",\n                cancelButtonText: \"Cancel\",\n                applyButtonText: \"Apply\",\n                measures: \"Select some fields to begin setup\",\n                columns: \"Select some fields to begin setup\",\n                rows: \"Select some fields to begin setup\"\n            }\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.measures) {\n                this.measures.setDataSource(dataSource);\n            }\n\n            if (this.rows) {\n                this.rows.setDataSource(dataSource);\n            }\n\n            if (this.columns) {\n                this.columns.setDataSource(dataSource);\n            }\n\n            this.refresh();\n        },\n\n        _initPivotGridConfiguratorNavigation: function() {\n            var that = this;\n            that.configuratorNavigation = new ConfiguratorNavigation({ tabIndex: 0 });\n            that.configuratorNavigation.start(that.element[0]);\n\n            const firstCell = that.configuratorNavigation.first;\n\n            if (firstCell) {\n                firstCell.setAttribute('tabindex', '0');\n            }\n        },\n\n        _dataSource: function() {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler)\n                               .unbind(\"error\", that._errorHandler)\n                               .unbind(\"progress\", that._progressHandler);\n            } else {\n                that._errorHandler = that._error.bind(that);\n                that._refreshHandler = that.refresh.bind(that);\n                that._progressHandler = that._requestStart.bind(that);\n            }\n\n            that.dataSource = kendo.data.PivotDataSourceV2.create(that.options.dataSource);\n            that.dataSource.bind(\"change\", that._refreshHandler)\n                           .bind(\"error\", that._errorHandler)\n                           .bind(\"progress\", that._progressHandler);\n        },\n\n        _layout: function() {\n\n            var that = this;\n            var options = that.options;\n            var messages = options.messages;\n            var horizontal = options.orientation == \"horizontal\";\n\n            var panel = $(\"<div class='k-pivotgrid-configurator-panel k-pivotgrid-configurator-push'></div>\");\n\n            panel.addClass(horizontal ? \"k-pivotgrid-configurator-horizontal\" : \"k-pivotgrid-configurator-vertical\");\n\n            that.element.append(panel);\n\n            that.panel = panel;\n\n            $(SETTINGS_TEMPLATE({ title: this.options.messages.title, headerTextId: `${that._ariaId}-configurator-header` })).appendTo(that.panel);\n\n            $(CONTENT_TEMPLATE({ formClass: horizontal ? \"k-form k-form-md k-form-horizontal\" : \"k-form k-form-md\", filterable: options.filterable, horizontal: horizontal, ariaId: that._ariaId }))\n                .appendTo(that.panel).find(\".k-chip-list\")\n                .each(function(index, elm) {\n                    kendo.html.renderChipList(elm, $.extend({}, options));\n                    $(elm).attr({\n                        \"role\": \"listbox\",\n                        \"aria-orientation\": \"horizontal\",\n                    });\n                });\n\n            that._fields();\n            $(ACTIONS_TEMPLATE({ cancelText: messages.cancelButtonText, applyText: messages.applyButtonText })).appendTo(that.panel);\n            that._targets();\n\n            that.element.on(\"click\" + ns, \".k-pivotgrid-configurator-actions > button\", that._actions.bind(that));\n        },\n\n        _actions: function(e) {\n            e.preventDefault();\n\n            var target = $(e.currentTarget).closest(\":not(path,svg)\");\n            if (target.index()) {\n                this.columns._applyState();\n                this.rows._applyState();\n                this.measures._applyState();\n                this.dataSource.read();\n            } else {\n                this.columns._cancelChanges();\n                this.rows._cancelChanges();\n                this.measures._cancelChanges();\n                this.treeView.dataSource.read();\n            }\n        },\n\n        _targets: function() {\n            var that = this;\n            var columns = that.panel.find(\".k-column-fields\").first();\n            var rows = that.panel.find(\".k-row-fields\");\n            var measures = that.panel.find(\".k-chip-list\").last();\n            var options = this.options;\n\n            var targetItemTemplate = ({ name, menuenabled }) => {\n                    var chip = kendo.html.renderChip(TARGET_ITEM_TEMPLATE({ name, menuenabled }), $.extend({}, options, {\n                        fillMode: \"solid\",\n                        themeColor: \"base\",\n                        rounded: \"md\",\n                        removable: true,\n                        removeIcon: \"x-circle\",\n                        actions: menuenabled ? [\n                            { icon: \"more-vertical\" }\n                        ] : null\n                    }));\n\n                    return chip;\n                };\n\n            this.columns = this._createTarget(columns, {\n                navigatable: options.navigatable,\n                filterable: options.filterable,\n                sortable: options.sortable,\n                template: targetItemTemplate,\n                connectWith: rows,\n                messages: {\n                    empty: options.messages.columns,\n                    fieldMenu: this.options.messages.fieldMenu\n                },\n                configuratorNavigation: that.configuratorNavigation\n            });\n            this.columns.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-columns`);\n\n            this.rows = this._createTarget(rows, {\n                navigatable: options.navigatable,\n                filterable: options.filterable,\n                sortable: options.sortable,\n                template: targetItemTemplate,\n                setting: \"rows\",\n                connectWith: columns,\n                messages: {\n                    empty: this.options.messages.rows,\n                    fieldMenu: this.options.messages.fieldMenu\n                },\n                configuratorNavigation: that.configuratorNavigation\n            });\n            this.rows.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-rows`);\n\n            this.measures = this._createTarget(measures, {\n                navigatable: options.navigatable,\n                filterable: false,\n                sortable: false,\n                setting: \"measures\",\n                template: targetItemTemplate,\n                messages: {\n                    empty: options.messages.measures,\n                    fieldMenu: this.options.messages.fieldMenu\n                },\n                configuratorNavigation: that.configuratorNavigation\n            });\n\n            this.measures.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-values`);\n\n            [this.columns, this.rows, this.measures].forEach(x=> x.element.find(\".k-chip\").attr(\"role\", \"option\"));\n        },\n\n        _createTarget: function(element, options) {\n            var that = this;\n            return new kendo.ui.PivotSettingTargetV2(element, $.extend({\n                dataSource: this.dataSource,\n                hint: function(element) {\n                    return element.clone();\n                },\n                remove: function(e) {\n                    var item = that.treeView.wrapper\n                        .find(\"[data-name='\" + e.name + \"']\")\n                        .closest(\"li\");\n                    var id = item.attr(kendo.attr(\"uid\"));\n                    var dataItem = that.treeView.dataSource.getByUid(id);\n\n                    if (dataItem) {\n                        dataItem.checked = false;\n                        item.find(\"input\").attr(\"checked\", false);\n                    }\n                },\n                template: options.template\n            }, options));\n        },\n\n        _fields: function() {\n            var that = this;\n            var container = that.element.find(\".k-fields-list-wrapper\");\n\n            this.treeView = $(`<div aria-labelledby=\"${this._ariaId}-configurator-header ${this._ariaId}-configurator-fields\" />`).appendTo(container)\n                .kendoTreeView({\n                    checkboxes: {\n                        checkChildren: true,\n                        template: ({ item }) => {\n                            var result = '';\n\n                            if ((item.hasChildren || item.aggregator || item.local) && item.uniqueName !== \"[KPIs]\" && item.uniqueName !== \"[Measures]\" && item.uniqueName !== \"Measures\") {\n                                result += `<input type=\"checkbox\" data-name=\"${encode(item.uniqueName)}\" ${item.checked ? \"checked\" : \"\"} class=\"k-checkbox k-checkbox-md k-rounded-md\" id=\"${encode(item.uid)}\" tabindex=\"-1\">`;\n                            }\n\n                            return result;\n                        }\n                    },\n                    dataTextField: \"caption\",\n                    autoBind: false,\n                    check: function(e) {\n                      var dataItem = e.sender.dataItem(e.node);\n                      var action = {\n                        type: PIVOT_CONFIGURATOR_ACTION.toggleSelection,\n                        payload: dataItem\n                      };\n                      var state = {\n                        columnAxes: that.columns._state(),\n                        rowAxes: that.rows._state(),\n                        measureAxes: that.measures._state()\n                      };\n                      var result = configuratorReducer(state, action);\n\n                      if (that.dataSource.cubeSchema && result.measureAxes && result.measureAxes.length &&\n                        result.measureAxes.length > state.measureAxes.length) {\n                          that.dataSource.cubeSchema.restoreMeasure(result.measureAxes, dataItem);\n                      }\n\n                      if (dataItem.defaultHierarchy && dataItem.items && dataItem.items.length) {\n                          that._checkMembers([{ name: dataItem.defaultHierarchy }], dataItem.items);\n                          dataItem.items.trigger(\"change\");\n                      }\n\n                      if (result.columnAxes) {\n                          that.columns._state(result.columnAxes);\n                          that.columns._redraw();\n                      }\n                      if (result.rowAxes) {\n                          that.rows._state(result.rowAxes);\n                          that.rows._redraw();\n                      }\n                      if (result.measureAxes) {\n                          that.measures._state(result.measureAxes);\n                          that.measures._redraw();\n                      }\n                    },\n                    dataSource: this._treeViewDataSource()\n                 })\n                .data(\"kendoTreeView\");\n\n            this.treeView.wrapper.off(\"click\", this.treeView._clickHandler);\n        },\n\n        _treeViewDataSource: function() {\n            var that = this;\n\n            return kendo.data.HierarchicalDataSource.create({\n                schema: {\n                    model: {\n                        id: \"uniqueName\",\n                        hasChildren: function(item) {\n                            if (that.dataSource.cubeSchema && item.uniqueName !== \"Measures\") {\n                                item.local = true;\n                                return false;\n                            }\n                            return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                        }\n                    }\n                },\n                transport: {\n                    read: function(options) {\n                        var node;\n                        var transport = that.dataSource.transport;\n                        var catalog = transport.catalog();\n                        var cube = transport.cube();\n                        var fetchOptions = {\n                            url: transport.options.read\n                        };\n                        var columns = that.columns._state();\n                        var rows = that.rows._state();\n                        var measures = that.measures._state();\n                        var members = columns.concat(rows).concat(measures);\n                        var fields;\n                        var dsMeasures;\n                        var fetchOpts;\n\n                        if ($.isEmptyObject(options.data)) {\n                            if (that.dataSource.cubeSchema) {\n                                fields = that.dataSource.cubeSchema.dimensions();\n                                that._checkMembers(members, fields);\n                                options.success(fields);\n                            } else {\n                                fetchOpts = {\n                                    connection: {\n                                        catalog: catalog,\n                                        cube: cube\n                                    },\n                                    restrictions: {\n                                        catalogName: catalog,\n                                        cubeName: cube\n                                    },\n                                    command: 'schemaDimensions'\n                                };\n\n                                fetchDiscover(fetchOptions, fetchOpts)\n                                    .then(function(newFields) {\n                                        that._checkMembers(members, newFields);\n                                        addKPI(newFields);\n                                        options.success(newFields);\n                                     });\n                            }\n                        } else {\n                            //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                            node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                            if (that.dataSource.cubeSchema) {\n                                dsMeasures = that.dataSource.measures();\n                                that._checkMembers(members, dsMeasures);\n                                options.success(dsMeasures);\n                            } else {\n                                if (node.uniqueName === \"[KPIs]\") {\n                                    fetchDiscover(fetchOptions, that._getKPIOptions(catalog, cube))\n                                    .then(function(newFields) {\n                                        options.success(normalizeKPIs(newFields));\n                                    });\n                                } else if (node.type == \"kpi\") {\n                                    options.success(buildKPImeasures(node));\n                                } else {\n                                    fetchDiscover(fetchOptions ,that._loadFieldsCommand(node, catalog, cube))\n                                    .then(function(newFields) {\n                                        that._checkMembers(members, newFields);\n                                        options.success(newFields);\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        _checkMembers: function(members, newData) {\n            var hash = {};\n            var index = 0;\n\n            for (index = 0; index < members.length; index++) {\n                hash[members[index].name] = true;\n            }\n\n            for (index = 0; index < newData.length; index++) {\n                if (hash[newData[index].uniqueName]) {\n                    newData[index].checked = true;\n                }\n            }\n        },\n\n        _getKPIOptions: function(catalog, cube) {\n            return {\n                connection: {\n                    catalog: catalog,\n                    cube: cube\n                },\n                restrictions: {\n                    catalogName: catalog,\n                    cubeName: cube\n                },\n                command: 'schemaKPIs'\n            };\n        },\n\n        _loadFieldsCommand: function(field, catalog, cube) {\n            var command;\n            var dimensionUniqueName;\n            var hierarchyUniqueName;\n\n            if (field.type === 2) {\n                command = 'schemaMeasures';\n            } else if (field.dimensionUniqueName) {\n                command = 'schemaLevels';\n                hierarchyUniqueName = field.uniqueName;\n            } else {\n                command = 'schemaHierarchies';\n                dimensionUniqueName = field.uniqueName;\n            }\n\n            var options = {\n                connection: {\n                    catalog: catalog,\n                    cube: cube\n                },\n                restrictions: {\n                    catalogName: catalog,\n                    cubeName: cube,\n                    hierarchyUniqueName: hierarchyUniqueName,\n                    dimensionUniqueName: dimensionUniqueName\n                },\n                command: command\n            };\n\n            return options;\n        },\n\n        _progress: function(toggle) {\n            kendo.ui.progress(this.element, toggle);\n        },\n\n        _error: function() {\n            this._progress(false);\n        },\n\n        _requestStart: function() {\n            this._progress(true);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this.dataSource.unbind(\"change\", this._refreshHandler);\n\n            this.element.off(ns);\n\n            this.rows.destroy();\n            this.columns.destroy();\n            this.measures.destroy();\n            this.treeView.destroy();\n\n            this.element = null;\n            this._refreshHandler = null;\n        },\n\n        refresh: function() {\n            if (this.treeView) {\n                this.treeView.dataSource.fetch();\n            }\n\n            this._progress(false);\n        }\n\n    });\n\n    ui.plugin(PivotConfiguratorV2);\n\n    var PivotConfigurator = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            this.element.addClass(\"k-pivotgrid-configurator-panel kendo-jquery\");\n\n            if (this.options.height) {\n                this.element.outerHeight(this.options.height);\n            }\n\n            this._dataSource();\n\n            this._layout();\n\n            this.refresh();\n\n            kendo.notify(this);\n        },\n\n        events: [],\n\n        options: {\n            name: \"PivotConfigurator\",\n            filterable: false,\n            sortable: false,\n            messages: {\n                measures: \"Drop Data Fields Here\",\n                columns: \"Drop Column Fields Here\",\n                rows: \"Drop Rows Fields Here\",\n                measuresLabel: \"Measures\",\n                columnsLabel: \"Columns\",\n                rowsLabel: \"Rows\",\n                fieldsLabel: \"Fields\"\n            }\n        },\n\n        _dataSource: function() {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler)\n                               .unbind(\"error\", that._errorHandler)\n                               .unbind(\"progress\", that._progressHandler);\n            } else {\n                that._errorHandler = that._error.bind(that);\n                that._refreshHandler = that.refresh.bind(that);\n                that._progressHandler = that._requestStart.bind(that);\n            }\n\n            that.dataSource = kendo.data.PivotDataSource.create(that.options.dataSource);\n            that.dataSource.bind(\"change\", that._refreshHandler)\n                           .bind(\"error\", that._errorHandler)\n                           .bind(\"progress\", that._progressHandler);\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.measures) {\n                this.measures.setDataSource(dataSource);\n            }\n\n            if (this.rows) {\n                this.rows.setDataSource(dataSource);\n            }\n\n            if (this.columns) {\n                this.columns.setDataSource(dataSource);\n            }\n\n            this.refresh();\n        },\n\n        _treeViewDataSource: function() {\n            var that = this;\n\n            return kendo.data.HierarchicalDataSource.create({\n                schema: {\n                    model: {\n                        id: \"uniqueName\",\n                        hasChildren: function(item) {\n                            return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                        }\n                    }\n                },\n                transport: {\n                    read: function(options) {\n                        var promise;\n                        var node;\n                        var kpi;\n\n                        if ($.isEmptyObject(options.data)) {\n                            promise = that.dataSource.schemaDimensions();\n\n                            promise.done(function(data) {\n                                        if (!that.dataSource.cubeBuilder) {\n                                            addKPI(data);\n                                        }\n                                        options.success(data);\n                                    })\n                                    .fail(options.error);\n                        } else {\n                            //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                            node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                            if (node.uniqueName === \"[KPIs]\") {\n                                kpi = true;\n                                promise = that.dataSource.schemaKPIs();\n                                promise.done(function(data) {\n                                            options.success(normalizeKPIs(data));\n                                       })\n                                       .fail(options.error);\n                            } else if (node.type == \"kpi\") {\n                                kpi = true;\n                                options.success(buildKPImeasures(node));\n                            }\n\n                            if (!kpi) {\n                                if (node.type == 2) { //measure\n                                    promise = that.dataSource.schemaMeasures();\n                                } else if (node.dimensionUniqueName) { // hierarchy\n                                    promise = that.dataSource.schemaLevels(options.data.uniqueName);\n                                } else { // dimension\n                                    promise = that.dataSource.schemaHierarchies(options.data.uniqueName);\n                                }\n\n                                promise.done(options.success)\n                                        .fail(options.error);\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        _progress: function(toggle) {\n            kendo.ui.progress(this.element, toggle);\n        },\n\n        _error: function() {\n            this._progress(false);\n        },\n\n        _requestStart: function() {\n            this._progress(true);\n        },\n\n        _layout: function() {\n            $('<div class=\"k-pivotgrid-configurator\"><div class=\"k-pivotgrid-configurator-content\"></div></div>').appendTo(this.element);\n            this.form = this.element.find('.k-pivotgrid-configurator-content');\n\n            this._fields();\n            this._targets();\n        },\n\n        _fields: function() {\n            var container = $('<div class=\"k-pivotgrid-fields k-pivotgrid-configurator-section\"><strong>' + encode(this.options.messages.fieldsLabel) + '</strong><div class=\"k-fields-list-wrapper\"></div></div>').appendTo(this.form);\n\n            var template = ({ item }) => {\n                var result = '';\n\n                if (item.type == 2 || item.uniqueName == \"[KPIs]\") {\n                    result += kendo.ui.icon(item.type == 2 ? \"sum\" : \"caret-alt-expand\"/* \"kpi\" */);\n                } else if (item.type && item.type !== \"kpi\") {\n                    result += kendo.ui.icon(\"arrows-axes\");\n                }\n\n                result += `${encode(item.caption || item.name)}`;\n\n                return result;\n            };\n\n            this.treeView = $(\"<div/>\").appendTo(container.find('.k-fields-list-wrapper'))\n                .kendoTreeView({\n                    template: template,\n                    dataTextField: \"caption\",\n                    dragAndDrop: true,\n                    autoBind: false,\n                    dataSource: this._treeViewDataSource(),\n                    dragstart: function(e) {\n                        var dataItem = this.dataItem(e.sourceNode);\n\n                        if ((!dataItem.hasChildren && !dataItem.aggregator && !dataItem.measure) || (dataItem.type == 2) || dataItem.uniqueName === \"[KPIs]\") {\n                            e.preventDefault();\n                        }\n                    },\n                    drag: function(e) {\n                        var status = \"cancel\";\n                        var setting = settingTargetFromNode(e.dropTarget);\n\n                        if (setting && setting.validate(this.dataItem(e.sourceNode))) {\n                            status = \"plus\";\n                        }\n\n                        e.setStatusClass(status);\n                    },\n                    drop: function(e) {\n                        e.preventDefault();\n\n                        var setting = settingTargetFromNode(e.dropTarget);\n                        var node = this.dataItem(e.sourceNode);\n                        var idx, length, measures;\n                        var name;\n\n                        if (setting && setting.validate(node)) {\n                            name = node.defaultHierarchy || node.uniqueName;\n\n                            if (node.type === \"kpi\") {\n                                measures = buildKPImeasures(node);\n                                length = measures.length;\n                                name = [];\n\n                                for (idx = 0; idx < length; idx++) {\n                                    name.push(kpiNode(measures[idx]));\n                                }\n                            } else if (node.kpi) {\n                                name = [kpiNode(node)];\n                            }\n\n                            setting.add(name);\n                        }\n                    }\n                 })\n                .data(\"kendoTreeView\");\n        },\n\n        _createTarget: function(element, options) {\n            var template;\n\n            template = ({ name, sortIcon }) => ''\n                + `<div class=\"k-chip k-chip-md k-rounded-md k-chip-solid k-chip-solid-base\" data-${kendo.ns}name=\"${name}\">`\n                    + '<span class=\"k-chip-content\">'\n                        + `<span class=\"k-chip-label\">${name}</span>`\n                    + '</span>'\n                    + '<span class=\"k-chip-actions k-field-actions\">'\n                    + getIcons(sortIcon, options)\n                    + '</span>'\n                + '</div>';\n\n            return new kendo.ui.PivotSettingTarget(element, $.extend({\n                dataSource: this.dataSource,\n                template: template,\n                emptyTemplate: (data) => `<span class=\"k-empty\">${data}</span>`\n            }, options));\n        },\n\n        _targets: function() {\n            var container = $('<div class=\"k-pivotgrid-targets\"/>').appendTo(this.form);\n\n            var columnsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.columnsLabel, icon: \"columns\" })).appendTo(container);\n            var columns = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(columnsContainer.find('.k-pivotgrid-target-wrap'));\n\n            var rowsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.rowsLabel, icon: \"rows\" })).appendTo(container);\n            var rows = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(rowsContainer.find('.k-pivotgrid-target-wrap'));\n\n            var measuresContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.measuresLabel, icon: \"sum\" })).appendTo(container);\n            var measures = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(measuresContainer.find('.k-pivotgrid-target-wrap'));\n\n            var options = this.options;\n\n            this.columns = this._createTarget(columns, {\n                filterable: options.filterable,\n                sortable: options.sortable,\n                connectWith: rows,\n                messages: {\n                    empty: options.messages.columns,\n                    fieldMenu: options.messages.fieldMenu\n                }\n            });\n\n            this.rows = this._createTarget(rows, {\n                filterable: options.filterable,\n                sortable: options.sortable,\n                setting: \"rows\",\n                connectWith: columns,\n                messages: {\n                    empty: this.options.messages.rows,\n                    fieldMenu: this.options.messages.fieldMenu\n                }\n            });\n\n            this.measures = this._createTarget(measures, {\n                setting: \"measures\",\n                messages: {\n                    empty: options.messages.measures\n                }\n            });\n\n            columns\n                .add(rows)\n                .add(measures)\n                .on(HOVER_EVENTS, \".k-item:not(.k-empty)\", this._toggleHover);\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).closest(\":not(path,svg)\").toggleClass(\"k-hover\", e.type === \"mouseenter\");\n        },\n\n        _resize: function() {\n            var element = this.element;\n            var height = this.options.height;\n\n            if (!height) {\n                return;\n            }\n\n            element.outerHeight(height);\n        },\n\n        refresh: function() {\n            var dataSource = this.dataSource;\n\n            if (dataSource.cubeBuilder || this._cube !== dataSource.cube() || this._catalog !== dataSource.catalog()) {\n                this.treeView.dataSource.fetch();\n            }\n\n            this._catalog = this.dataSource.catalog();\n            this._cube = this.dataSource.cube();\n\n            this._resize();\n\n            this._progress(false);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this.dataSource.unbind(\"change\", this._refreshHandler);\n\n            this.form.find(\".k-pivot-setting\").off(ns);\n\n            this.rows.destroy();\n            this.columns.destroy();\n            this.measures.destroy();\n            this.treeView.destroy();\n\n            this.element = null;\n            this._refreshHandler = null;\n        }\n    });\n\n    function kpiMeasure(name, measure, type) {\n        return {\n            hierarchyUniqueName: name,\n            uniqueName: measure,\n            caption: measure,\n            measure: measure,\n            name: measure,\n            type: type,\n            kpi: true\n        };\n    }\n\n    function buildKPImeasures(node) {\n        var name = node.name;\n        return [\n            kpiMeasure(name, node.value, \"value\"),\n            kpiMeasure(name, node.goal, \"goal\"),\n            kpiMeasure(name, node.status, \"status\"),\n            kpiMeasure(name, node.trend, \"trend\")\n        ];\n    }\n\n    kendo.cssProperties.registerPrefix(\"HTMLChip\", \"k-chip-\");\n\n    kendo.cssProperties.registerValues(\"HTMLChip\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['md', 'md']])\n    }]);\n\n    ui.plugin(PivotConfigurator);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}