{"version":3,"sources":["raw-mjs/kendo.dockmanager.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","NS","extend","percentageUnitsRegex","DOCK_MANAGER_TOOLBAR","TOOLBAR_TEMPLATE","KSTATIC_PANE","KKPINNED_PANE","KKUNPINNED_PANE","KPANE_TABBED","SPLITTER","KSPLITBAR","HORIZONTAL","VERTICAL","KHIDDEN","KBUTTON","KPANE","KPANES_CONTAINER","KPANE_ACTIONS","KDOCK_INDICATOR","KDOCK_NAVIGATOR","KDOCK_PREVIEW","KSELECTED","KACTIVE","KTABSTRIP","SPLIT","TAB","HEIGHT","WIDTH","TOP","BOTTOM","LEFT","RIGHT","MIDDLE","CLICK","PIN","UNPIN","UNSHIFT","PANE","paneSelector","uid","attr","UID_ATTR","INDICATOR_ATTR","ACTION_ATTR","INDICATOR_TEMPLATE","NAVIGATOR_TEMPLATE","CLOSE","DOCK","INNER_DOCK","RESIZE","DRAG","DRAGSTART","DRAGEND","DockManager","init","element","options","that","this","fn","call","addClass","panesContainer","appendTo","_processPanes","rootPane","_refreshToolbar","_createPane","_bindEvents","_initNavigator","_initUnpinnedResizable","notify","events","type","orientation","panes","paneDefaults","visible","closeable","collapsed","size","actions","icon","shouldAdd","pane","unpinnable","unpinned","minimizable","maximizable","indicators","top","left","transform","previewTop","previewLeft","rotate","hoveredPaneHeight","draggedPaneHeight","hoveredPaneWidth","draggedPaneWidth","togglePane","_getPaneById","_togglePane","removePane","_removePane","getOptions","setOptions","currentOptions","deepExtend","destroy","empty","_unpinnedResizable","Resizable","unpinnedContainer","handle","resize","e","delta","x","containerWidth","width","on","_toolbarButtonClick","bind","_hideUnpinnedPanes","_pinPaneClick","_closePane","_displayDockPreview","_hideDockPreview","currentlyOpened","find","filter","unpinnedContainerVisible","is","_toolbar","removeClass","itemUid","currentTarget","preventDefault","_showUnpinnedPane","paneUid","toolbarWidth","outerWidth","_findPaneByUid","hasUnpinnedSize","unpinnedSize","css","button","isTabbed","parent","action","paneElement","closest","isUnpinned","parentPane","parentUid","eventData","remove","_refreshRootPane","toggleClass","trigger","paneIndex","indexOf","event","splice","_shouldHideParent","length","some","_refreshPane","parentElement","guid","_extendPane","forEach","childPane","j","subItem","scrollable","unpinnedPanes","_unpinnedPanes","unpinnedPannesContainer","append","insertBefore","prepend","i","html","renderButton","fillMode","_paneHeader","off","wrapper","refresh","rootPaneElement","_createSplitPane","splitterElement","splitterOptions","childPanesToInit","paneOptions","_createUnpinnedPane","push","splitter","Splitter","_updatePaneSize","leftPane","rightPane","ev","_createTabPane","tabStripElement","tabContainer","selectedPane","selected","tab","title","contentElement","_addActions","children","kendoTabStrip","animation","_createContentPane","content","template","data","isUnnpinned","actionsContainer","themeColor","string","charAt","toUpperCase","slice","result","concat","header","tabHeader","found","prop","value","params","navigatorDraggable","Draggable","autoScroll","hint","actionsHtml","_getActionButtons","hintTemplate","height","updateHint","coordinates","location","y","zIndex","dragstart","_dragStart","dragend","_dragEnd","drag","_drag","target","draggedPane","_displayGlobalIndicators","draggableEvent","hoveredIndicator","hide","_updateLayout","_showHiddenPanes","hoveredPane","currentPane","elementUnderCursor","navigator","currentPaneUid","prevPaneUid","dragTargetUid","position","dockable","innerDock","_showTab","_showPane","tabstrip","show","activateTab","splitbar","siblings","_hideDraggedPane","draggedElement","_hideTab","_hidePane","prevElement","prev","nextElement","next","isActive","buttons","container","each","_","clone","indicator","isGlobalIndicator","indicatorName","indicatorUid","indicatorData","previewElement","containerHeight","outerHeight","existingPreview","preview","draggedPaneParent","draggedPaneIndex","_tabDock","_splitDock","_adjustSiblingSizes","targetPane","isGlobalDock","targetPaneParent","targetPaneIndex","dimension","newParentPane","unshift","_getSiblings","parentSize","draggedPaneSize","newParentSize","noSizePanes","freeSpace","_calculateNewSize","noSizePane","newSize","paneSize","proportion","noUnitSize","unit","test","replace","p","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.dockmanager.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.splitter.js';\nimport './kendo.tabstrip.js';\nimport './kendo.window.js';\nimport './kendo.html.button.js';\nimport './kendo.resizable.js';\nimport './kendo.draganddrop.js';\n\nconst __meta__ = {\n    id: \"dockManager\",\n    name: \"DockManager\",\n    category: \"web\",\n    description: \"The DockManager widget represents a layout component that allows users to achieve custom layouts by docking panes.\",\n    depends: [\"core\", \"splitter\", \"tabstrip\", \"window\", \"html.button\"]\n};\n\n(function($, undefined$1) {\n    const kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        NS = \".kendoDockManager\",\n        ui = kendo.ui,\n        extend = $.extend,\n        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n        DOCK_MANAGER = \"k-dock-manager\",\n        DOCK_MANAGER_TOOLBAR = \"k-dock-manager-toolbar\",\n        TOOLBAR_TEMPLATE = `<div class=\"${DOCK_MANAGER_TOOLBAR} k-toolbar-left k-toolbar k-toolbar-md k-toolbar-solid\"></div>`,\n        TOOLBAR_BUTTON = \"k-toolbar-button\",\n        SEPARATOR = `<div class=\"k-separator k-separator-horizontal\"></div>`,\n        KSTATIC_PANE = \"k-pane-static\",\n        KKPINNED_PANE = \"k-pane-pinned\",\n        KKUNPINNED_PANE = \"k-pane-unpinned\",\n        KPANE_TABBED = \"k-pane-tabbed\",\n        SPLITTER = \"k-splitter\",\n        KSPLITBAR = \"k-splitbar\",\n        DOCK_SPLITTER = \"k-dock-manager-splitter\",\n        KUNPINNED_CONTAINER = \"k-dock-manager-unpinned-container\",\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        KHIDDEN = \"k-hidden\",\n        KBUTTON = \"k-button\",\n        KPANE = \"k-pane\",\n        KPANE_FLEX = \"k-pane-flex\",\n        KPANES_CONTAINER = \"k-dock-manager-pane-container\",\n        KPANE_SCROLLABLE = \"k-pane-scrollable\",\n        KPANE_ACTIONS = \"k-pane-actions\",\n        KDOCK_INDICATOR = \"k-dock-indicator\",\n        KDOCK_NAVIGATOR = \"k-dock-navigator\",\n        KDOCK_PREVIEW = \"k-docking-preview\",\n        KSELECTED = \"k-selected\",\n        KACTIVE = \"k-active\",\n        KTABSTRIP = \"k-tabstrip\",\n        KSPLITBAR_DRAGGABLE = \"k-splitbar-draggable\",\n        SPLIT = \"split\",\n        TAB = \"tab\",\n        CONTENT = \"content\",\n        HEIGHT = \"height\",\n        WIDTH = \"width\",\n        TOP = \"top\",\n        BOTTOM = \"bottom\",\n        LEFT = \"left\",\n        RIGHT = \"right\",\n        MIDDLE = \"middle\",\n        CLICK = \"click\",\n        PIN = \"pin\",\n        UNPIN = \"unpin\",\n        UNSHIFT = \"unshift\",\n        PUSH = \"push\",\n        PANE = `<div class=\"${KPANE} ${KPANE_FLEX} ${KSTATIC_PANE}\"></div>`,\n        paneSelector = uid => `.${KPANE}[${kendo.attr(\"uid\")}=\"${uid}\"]`,\n        buttonTextTemplate = text => `<span class=\"k-button-text\">${text}</span>`,\n        contentPaneTemplate = data => `<div class=\"${KPANE_SCROLLABLE}\">\n                                            <div class=\"k-pane-header\">\n                                                <span class=\"k-pane-title\">${data.title}</span>\n                                                <div class=\"${KPANE_ACTIONS}\"></div>\n                                            </div>\n                                            <div class=\"k-pane-content\">${data.content}</div>\n                                        </div>`,\n        tabTemplate = title => `<li><span class=\"k-link\"><span class=\"k-link-text\">${title}</span></span></li>`,\n        unpinnedResizeSplitbar = `<div class=\"k-splitbar k-splitbar-horizontal ${KSPLITBAR_DRAGGABLE}-horizontal\">\n                                    <div class=\"k-resize-handle\"></div>\n                                </div>`,\n        UID_ATTR = kendo.attr(\"uid\"),\n        INDICATOR_ATTR = kendo.attr(\"indicator\"),\n        ACTION_ATTR = kendo.attr(\"action\"),\n        hintTemplate = pane => `<div class=\"k-tooltip k-tooltip-primary\">\n                                    <div class=\"k-tooltip-content\">${pane.title}</div>\n                                </div>`,\n        INDICATOR_TEMPLATE = `<div class=\"${KDOCK_INDICATOR}\">\n                        <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                        <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                            <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                        </svg>\n                        </span>\n                    </div>`,\n        NAVIGATOR_TEMPLATE = `<div class=\"${KDOCK_NAVIGATOR}\" style=\"position: relative;\">\n                                <div class=\"k-dock-indicator k-dock-indicator-top\" ${INDICATOR_ATTR}=\"top\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-right\" ${INDICATOR_ATTR}=\"right\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-right\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M64 480h416V32H32v448h32zm0-416h384v384H64V64zm256 32h96v320h-96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-bottom\" ${INDICATOR_ATTR}=\"bottom\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-bottom\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M32 64v416h448V32H32v32zm416 0v384H64V64h384zM96 320h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-left\" ${INDICATOR_ATTR}=\"left\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-left\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M448 32H32v448h448V32h-32zm0 416H64V64h384v384zM96 96h96v320H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-middle\" ${INDICATOR_ATTR}=\"middle\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-window\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M96 96v320h320V96H96zm288 288H128V192h256v192z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                            </div>`,\n        CLOSE = \"close\",\n        DOCK = \"dock\",\n        INNER_DOCK = \"innerDock\",\n        RESIZE = \"resize\",\n        DRAG = \"drag\",\n        DRAGSTART = \"dragStart\",\n        DRAGEND = \"dragEnd\",\n        CHANGE = \"change\";\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    function isPercentageSize(size) {\n        return percentageUnitsRegex.test(size);\n    }\n\n    const DockManager = Widget.extend({\n        init: function(element, options) {\n            const that = this;\n\n            Widget.fn.init.call(that, element, options);\n            options = $.extend(true, {}, options);\n            that.element.addClass(DOCK_MANAGER);\n\n            that.panesContainer = $(`<div class=\"${KPANES_CONTAINER}\" />`).appendTo(that.element);\n            that._processPanes(that.options.rootPane);\n            that._refreshToolbar();\n            that._createPane(that.panesContainer, that.options.rootPane);\n            that._bindEvents();\n            that._initNavigator();\n            that._initUnpinnedResizable();\n\n            kendo.notify(that);\n        },\n\n        events: [\n            CLOSE,\n            PIN,\n            UNPIN,\n            DOCK,\n            INNER_DOCK,\n            RESIZE,\n            DRAG,\n            DRAGSTART,\n            DRAGEND\n        ],\n\n        options: {\n            name: 'DockManager',\n            rootPane: {\n                type: SPLIT,\n                orientation: HORIZONTAL,\n                panes: []\n            }\n        },\n\n        paneDefaults: {\n            visible: true,\n            closeable: true,\n            collapsed: false,\n            size: ''\n        },\n\n        actions: [\n            {\n                name: \"pin\",\n                icon: \"unpin\",\n                shouldAdd: pane => pane.unpinnable && pane.unpinnable.unpinned\n            },{\n                name: \"unpin\",\n                icon: \"pin\",\n                shouldAdd: pane => pane.unpinnable && !pane.unpinnable.unpinned\n            },{\n                name: \"minimize\",\n                icon: \"minimize\",\n                shouldAdd: pane => pane.minimizable\n            },{\n                name: \"maximize\",\n                icon: \"maximize\",\n                shouldAdd: pane => pane.maximizable\n            },{\n                name: \"close\",\n                icon: \"x\",\n                shouldAdd: pane => pane.closeable != false\n            },{\n                name: \"more\",\n                icon: \"more-vertical\",\n                shouldAdd: pane => false //not needed for v1 as currently only 2 actions are available\n            }\n        ],\n\n        indicators: [\n            {\n                name: TOP,\n                top: 0,\n                left: \"50%\",\n                transform: \"translate(-50%, 0)\",\n                previewTop: () => 0,\n                previewLeft: () => 0,\n                rotate: \"0deg\"\n            },{\n                name: BOTTOM,\n                top: \"100%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -100%)\",\n                previewTop: (hoveredPaneHeight, draggedPaneHeight) => hoveredPaneHeight - draggedPaneHeight,\n                previewLeft: () => 0,\n                rotate: \"180deg\"\n            },{\n                name: LEFT,\n                top: \"50%\",\n                left: 0,\n                transform: \"translate(0, -50%)\",\n                previewTop: () => 0,\n                previewLeft: () => 0,\n                rotate: \"270deg\"\n            },{\n                name: RIGHT,\n                top: \"50%\",\n                left: \"100%\",\n                transform: \"translate(-100%, -50%)\",\n                previewTop: () => 0,\n                previewLeft: (hoveredPaneWidth, draggedPaneWidth) => hoveredPaneWidth - draggedPaneWidth,\n                rotate: \"90deg\"\n            },{\n                name: MIDDLE,\n                previewTop: () => 0,\n                previewLeft: () => 0,\n            }\n        ],\n\n        togglePane: function(id) {\n            const that = this,\n            pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n            if (pane != undefined$1) {\n                that._togglePane(pane);\n            }\n        },\n\n        removePane: function(id) {\n            const that = this;\n            const pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n            if (pane != undefined$1) {\n                that._removePane(pane);\n            }\n        },\n\n        getOptions: function() {\n            const that = this;\n            return that.options;\n        },\n\n        setOptions: function(options) {\n            const that = this;\n            let currentOptions = that.getOptions();\n            kendo.deepExtend(currentOptions, options);\n\n            that.destroy();\n            that.element.empty();\n\n            that.init(that.element, currentOptions);\n\n        },\n\n        _initUnpinnedResizable: function() {\n            const that = this;\n\n            that._unpinnedResizable = new kendo.ui.Resizable(that.unpinnedContainer, {\n                orientation: HORIZONTAL,\n                handle: \".k-splitbar-horizontal.k-splitbar-draggable-horizontal\",\n                resize: function(e) {\n                    const delta = e.x.delta;\n                    const containerWidth = that.unpinnedContainer.width();\n\n                    that.unpinnedContainer.width(containerWidth + delta);\n                }\n            });\n        },\n\n        _bindEvents: function() {\n            const that = this;\n\n            that.element.on(CLICK + NS, `.k-dock-manager-toolbar .${KBUTTON}`, that._toolbarButtonClick.bind(that));\n            that.element.on(CLICK + NS, `.${KPANES_CONTAINER}`, that._hideUnpinnedPanes.bind(that));\n            that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"pin\"], .${KBUTTON}[${ACTION_ATTR}=\"unpin\"]`, that._pinPaneClick.bind(that));\n            that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"close\"]`, that._closePane.bind(that));\n            that.element.on(\"mouseenter\" + NS, `.${KDOCK_INDICATOR}`, that._displayDockPreview.bind(that));\n            that.element.on(\"mouseleave\" + NS, `.${KDOCK_INDICATOR}`, that._hideDockPreview.bind(that));\n        },\n\n        _hideUnpinnedPanes: function(e) {\n            const that = this;\n            const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n            const currentlyOpened = unpinnedPanes.filter(\":visible\");\n            const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n            if (currentlyOpened && unpinnedContainerVisible) {\n                that._toolbar.find(`.${KSELECTED}`).removeClass(KSELECTED);\n                that.unpinnedContainer.addClass(KHIDDEN);\n                return;\n            }\n        },\n\n        _toolbarButtonClick: function(e) {\n            const that = this;\n            const itemUid = $(e.currentTarget).attr(UID_ATTR);\n            const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n            const currentlyOpened = unpinnedPanes.filter(\":visible\");\n            const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n            e.preventDefault();\n            that._toolbar.find(`.${KBUTTON}`).removeClass(KSELECTED);\n\n            if (currentlyOpened.attr(UID_ATTR) === itemUid && unpinnedContainerVisible) {\n                that.unpinnedContainer.addClass(KHIDDEN);\n                return;\n            }\n\n            that._showUnpinnedPane(itemUid);\n        },\n\n        _showUnpinnedPane: function(paneUid) {\n            const that = this;\n            const toolbarWidth = that._toolbar.outerWidth();\n            const pane = that._findPaneByUid(paneUid);\n            const hasUnpinnedSize = pane.unpinnable.unpinnedSize;\n\n            that.unpinnedContainer.removeClass(KHIDDEN).css({ left: `${toolbarWidth}px` });\n            that.unpinnedContainer.find(`.${KPANE}`).addClass(KHIDDEN);\n            that.unpinnedContainer.find(paneSelector(paneUid)).removeClass(KHIDDEN);\n\n            if (hasUnpinnedSize) {\n                that.unpinnedContainer.css({ width: `${pane.unpinnable.unpinnedSize}` });\n            }\n\n            that._toolbar.find(`.${KBUTTON}[${UID_ATTR}=\"${paneUid}\"]`).addClass(KSELECTED);\n        },\n\n        _pinPaneClick: function(e) {\n            const that = this;\n            const button = $(e.currentTarget);\n            const isTabbed = button.parent().is(\"li\");\n            const action = button.attr(ACTION_ATTR);\n            const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n            const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n            const isUnpinned = pane.unpinnable.unpinned;\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n            const eventData = { pane: pane, paneElement: paneElement };\n\n            if (isUnpinned) {\n                kendo.destroy(paneElement);\n                paneElement.remove();\n            }\n\n            pane.unpinnable.unpinned = action === PIN ? false : true;\n            that._refreshRootPane();\n            that.unpinnedContainer.toggleClass(KHIDDEN, action === PIN);\n            that.unpinnedContainer.find(`.${KPANE}`).removeClass(KKPINNED_PANE).addClass(KKUNPINNED_PANE);\n\n            if (action === \"pin\") {\n                that.trigger(PIN, eventData);\n                return;\n            }\n\n            that.trigger(UNPIN, eventData);\n            that._showUnpinnedPane(pane.uid);\n        },\n\n        _closePane: function(e) {\n            const that = this;\n            const button = $(e.currentTarget);\n            const isTabbed = button.parent().is(\"li\");\n            const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n            const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n            const paneIndex = parentPane.panes.indexOf(pane);\n            const eventData = { pane: pane, paneElement: paneElement, event: e };\n\n            if (that.trigger(CLOSE, eventData)) {\n                e.preventDefault();\n            }\n\n            if (pane.unpinnable && pane.unpinnable.unpinned) {\n                that.unpinnedContainer.addClass(KHIDDEN);\n            }\n\n            parentPane.panes.splice(paneIndex, 1);\n\n            if (that._shouldHideParent(parentPane)) {\n                parentPane.visible = false;\n            }\n\n            that._refreshRootPane();\n        },\n\n        _shouldHideParent: function(pane) {\n            const that = this,\n            parent = that._findPaneByUid(pane.parentUid);\n\n            if (pane.panes.length == 0) {\n                if (pane.type == TAB && parent.panes.length == 1) {\n                    parent.panes.splice(0,1);\n                    parent.visible = false;\n                }\n                return true;\n            }\n\n            if (pane.panes.length == 1 &&\n                pane.panes[0].type == TAB &&\n                !pane.panes.some(x => x.visible)) {\n                return true;\n            }\n\n            return false;\n        },\n\n        _refreshPane: function(paneElement, pane) {\n            const that = this;\n            const parentElement = paneElement.parent();\n            const isTabbed = paneElement.is(`.${KPANE_TABBED}`);\n\n            kendo.destroy(paneElement);\n            isTabbed ? paneElement.empty() : paneElement.remove();\n            that._refreshToolbar();\n            that._createPane(isTabbed ? paneElement : parentElement, pane);\n        },\n\n        _processPanes: function(pane) {\n            const that = this;\n            pane.uid = pane.uid || kendo.guid();\n            that._extendPane(pane);\n\n            if (pane.type === SPLIT && !pane.orientation) {\n                pane.orientation = HORIZONTAL;\n            }\n\n            pane.panes.forEach((childPane) => {\n                childPane.parentUid = pane.uid;\n\n                if (childPane.type == CONTENT) {\n                    if (childPane.unpinnable === undefined$1 || childPane.unpinnable === true) {\n                        childPane.unpinnable = {\n                            unpinned: false\n                        };\n                    }\n                    childPane.uid = childPane.uid || kendo.guid();\n                }\n\n                if (childPane.panes && childPane.panes.length) {\n                    that._processPanes(childPane);\n                }\n            });\n        },\n\n        _extendPane: function(pane) {\n            const that = this;\n\n            if (pane.panes) {\n                for (var j = 0; j < pane.panes.length; j++) {\n                    pane.panes.forEach(subItem => {\n                        that._extendPane(subItem);\n                    });\n                }\n            }\n\n            extend(pane, {\n                visible: pane.visible === undefined$1 ? that.paneDefaults.visible : pane.visible,\n                closeable: pane.closeable === undefined$1 ? that.paneDefaults.closeable : pane.closeable,\n                collapsed: pane.collapsed === undefined$1 ? that.paneDefaults.collapsed : pane.collapsed,\n                size: pane.size === undefined$1 ? that.paneDefaults.size : pane.size,\n                scrollable: false,\n            });\n        },\n\n        _togglePane: function(pane) {\n            const that = this;\n\n            pane.visible = !pane.visible;\n            that._refreshRootPane();\n        },\n\n        _removePane: function(pane) {\n            const that = this;\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const paneIndex = parentPane.panes.indexOf(pane);\n            const parentPaneElement = that.panesContainer.find(`[${UID_ATTR}=\"${pane.uid}\"]`).parent();\n\n            parentPane.panes.splice(paneIndex, 1);\n            that._refreshRootPane();\n        },\n\n        _refreshToolbar: function() {\n            const that = this;\n            const unpinnedPanes = that._unpinnedPanes();\n            const unpinnedPannesContainer = $(`<div class=\"${KHIDDEN}\"/>`).addClass(KUNPINNED_CONTAINER);\n\n            if (!that.unpinnedContainer) {\n                that.unpinnedContainer = unpinnedPannesContainer;\n                unpinnedPannesContainer.append(unpinnedResizeSplitbar);\n                unpinnedPannesContainer.insertBefore(that.panesContainer);\n            }\n\n            if (!unpinnedPanes.length) {\n                that._toolbar && that._toolbar.remove();\n                that._toolbar = null;\n                return;\n            }\n\n            if (!that._toolbar) {\n                that._toolbar = that.element.prepend(TOOLBAR_TEMPLATE).find(`.${DOCK_MANAGER_TOOLBAR}`);\n            }\n\n            that._toolbar.empty();\n\n            for (let i = 0; i < unpinnedPanes.length; i++) {\n                const pane = unpinnedPanes[i];\n\n                const button = $(kendo.html.renderButton({ fillMode: \"flat\", size: \"small\" }))\n                                .addClass(TOOLBAR_BUTTON)\n                                .append(buttonTextTemplate(that._paneHeader(pane)));\n\n                button.attr(UID_ATTR, pane.uid);\n                that._toolbar.append(button);\n\n                if (i < unpinnedPanes.length - 1) {\n                    that._toolbar.append(SEPARATOR);\n                }\n            }\n        },\n\n        destroy: function() {\n            const that = this;\n\n            Widget.fn.destroy.call(that);\n\n            that.element.off(NS);\n            that.element.empty();\n\n            kendo.destroy(that.wrapper);\n        },\n\n        refresh: function() {\n            const that = this;\n            kendo.destroy(that.unpinnedContainer);\n            that.unpinnedContainer.empty();\n            that._refreshRootPane();\n        },\n\n        _refreshRootPane: function() {\n            const that = this;\n            const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n            that._refreshPane(rootPaneElement, that.options.rootPane);\n        },\n\n        _createSplitPane: function(parentElement, pane) {\n            const that = this;\n            const splitterElement = $(\"<div ref-dock-splitter/>\").attr(UID_ATTR, pane.uid);\n            const splitterOptions = {\n                orientation: pane.orientation || HORIZONTAL,\n                panes: []\n            };\n\n            if (!pane.panes.some(x=>x.visible)) {\n                return;\n            }\n\n            parentElement.append(splitterElement);\n\n            const childPanesToInit = [];\n\n            pane.panes.forEach((childPane) => {\n                const paneOptions = {\n                    uid: childPane.uid,\n                    scrollable: false\n                };\n                const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n                if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                    that._createUnpinnedPane(childPane);\n                    return;\n                }\n\n                if (childPane.size) {\n                    paneOptions.size = childPane.size;\n                }\n\n                if (childPane.visible != undefined$1) {\n                    paneOptions.visible = childPane.visible;\n                }\n\n                if (childPane.visible) {\n                    splitterElement.append(paneElement);\n                    childPanesToInit.push(\n                        () => that._createPane(paneElement, childPane)\n                    );\n                    splitterOptions.panes.push(paneOptions);\n                }\n            });\n\n            pane.splitter = new kendo.ui.Splitter(splitterElement, splitterOptions); // eslint-disable-line no-new\n            pane.splitter.element.addClass(DOCK_SPLITTER);\n            childPanesToInit.forEach(x => x());\n            pane.splitter.bind(RESIZE, that._updatePaneSize.bind(that));\n        },\n\n        _updatePaneSize: function(e) {\n            const that = this;\n            if (!e.leftPane && !e.rightPane) {\n                return;\n            }\n\n            const leftPane = that._findPaneByUid(e.leftPane.uid),\n            rightPane = that._findPaneByUid(e.rightPane.uid);\n\n            leftPane.size = e.leftPane.size;\n            rightPane.size = e.rightPane.size;\n            that.trigger(RESIZE, { ev: e, leftPane: leftPane, rightPane: rightPane });\n        },\n\n        _createTabPane: function(parentElement, pane) {\n            const that = this;\n            const tabStripElement = $(\"<div class='k-header'/>\");\n            const tabContainer = $(\"<ul/>\");\n            const tabStripOptions = {\n                animation: false,\n            };\n            const selectedPane = (pane.selected === undefined$1 || pane.panes.indexOf(pane.panes[pane.selected]) == -1 || pane.panes[pane.selected].unpinnable.unpinned) ? 0 : pane.selected;\n\n            if (!pane.panes.some(x=>x.visible)) {\n                return;\n            }\n\n            tabStripElement.append(tabContainer);\n            parentElement.append(tabStripElement);\n            parentElement.attr(UID_ATTR, pane.uid);\n            parentElement.addClass(KPANE_TABBED);\n\n            pane.panes.forEach((childPane) => {\n                const tab = $(tabTemplate(that._paneHeader(childPane))).attr(UID_ATTR, childPane.uid);\n                const contentElement = $(\"<div/>\");\n\n                if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                    that._createUnpinnedPane(childPane);\n                    return;\n                }\n\n                if (childPane.visible) {\n                    that._addActions(tab, childPane);\n                    tabContainer.append(tab);\n                    tabStripElement.append(contentElement);\n                    that._createPane(contentElement, childPane);\n                }\n            });\n\n            $(tabContainer.children()[selectedPane]).addClass(KACTIVE);\n            tabStripElement.kendoTabStrip(tabStripOptions);\n        },\n\n        _createContentPane: function(parentElement, pane) {\n            const that = this;\n            const content = typeof pane.content === \"function\" ? kendo.template(pane.content)({}) : pane.content;\n            const element = $(contentPaneTemplate(extend({}, pane, { title: that._paneHeader(pane), content: content })));\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const isUnnpinned = pane.unpinnable && pane.unpinnable.unpinned;\n\n\n            if (parentPane && parentPane.type === TAB && !isUnnpinned) {\n                parentElement.append(content);\n                return;\n            }\n\n            parentElement.addClass(isUnnpinned ? KKUNPINNED_PANE : KKPINNED_PANE)\n                         .removeClass(KSTATIC_PANE)\n                         .attr(UID_ATTR, pane.uid);\n            that._addActions(element.find(`.${KPANE_ACTIONS}`), pane);\n            parentElement.append(element);\n        },\n\n        _createUnpinnedPane: function(pane) {\n            const that = this;\n            const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n            if (that.unpinnedContainer.find(paneSelector(pane.uid)).length) {\n                return;\n            }\n\n            that.unpinnedContainer.prepend(paneElement);\n            that._createContentPane(paneElement, pane);\n        },\n\n        _addActions: function(actionsContainer, pane) {\n            const that = this;\n\n            that.actions.forEach((action) => {\n                if (action.shouldAdd(pane)) {\n                    actionsContainer.append($(kendo.html.renderButton({ fillMode: \"flat\", icon: action.icon, themeColor: 'base' })).attr(ACTION_ATTR, action.name));\n                }\n            });\n\n        },\n\n        _createPane: function(parentElement, pane) {\n            const that = this;\n\n            if (pane.id) {\n                parentElement.attr(\"id\", pane.id);\n            }\n\n            return that[\"_create\" + capitalizeFirstLetter(pane.type) + \"Pane\"](parentElement, pane);\n        },\n\n        _unpinnedPanes: function(panes) {\n            const that = this;\n            const options = that.options;\n            let result = [];\n\n            if (!panes) {\n                panes = options.rootPane.panes;\n            }\n\n            panes.forEach((pane) => {\n                if (pane.unpinnable && pane.unpinnable.unpinned) {\n                    result.push(pane);\n                }\n\n                if (pane.panes && pane.panes.length) {\n                    result = result.concat(that._unpinnedPanes(pane.panes));\n                }\n            });\n\n            return result;\n        },\n\n        _paneHeader: function(pane) {\n            const that = this;\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const isTabbed = parentPane && parentPane.type === \"tab\";\n            let header = pane.header;\n\n            if (isTabbed && pane.tabHeader) {\n                header = pane.tabHeader;\n            }\n\n            if (!header) {\n                return pane.title || \"\";\n            }\n\n            return kendo.template(header)(pane);\n        },\n\n        _findPaneByUid: function(uid, parent) {\n            const that = this;\n            let found;\n\n            parent = parent || that.options.rootPane;\n\n            if (parent.uid === uid) {\n                return parent;\n            }\n\n            parent.panes.forEach((pane) => {\n                if (pane.uid === uid) {\n                    found = pane;\n                    return;\n                }\n\n                if (pane.panes && pane.panes.length) {\n                    const result = that._findPaneByUid(uid, pane);\n\n                    if (result) {\n                        found = result;\n                        return;\n                    }\n                }\n            });\n            return found;\n        },\n\n        _getPaneById: function(pane, prop, value) {\n            const that = this;\n            let found;\n\n            if (pane[prop] == value) {\n                return pane;\n            }\n\n            if (pane.panes) {\n                pane.panes.forEach((childPane) => {\n                    let result = that._getPaneById(childPane, prop, value);\n                    if (result) {\n                        found = result;\n                    }\n                });\n            }\n            return found;\n        },\n\n        _initNavigator: function(params) {\n            const that = this;\n\n            that.navigatorDraggable = new kendo.ui.Draggable(that.element, {\n                autoScroll: true,\n                filter: \".k-pane-header, .k-pane-tabbed .k-tabstrip-item\",\n                hint: function(element) {\n                    const isTabbed = element.is(\"li\");\n                    const paneElement = element.closest(`.${KPANE}`);\n                    const pane = that._findPaneByUid((isTabbed ? element : paneElement).attr(UID_ATTR));\n                    const actionsHtml = isTabbed ? that._getActionButtons(element) : paneElement.find(`.${KPANE_ACTIONS}`).html();\n\n                    return hintTemplate({\n                        width: paneElement.width(),\n                        height: paneElement.height(),\n                        content: pane.content,\n                        title: that._paneHeader(pane),\n                        actions: actionsHtml,\n                    });\n                },\n                updateHint: function(hint, event) {\n                    const coordinates = {\n                        left: event.x.location + 1,\n                        top: event.y.location + 1,\n                    };\n\n                    const additionStyles = {\n                        zIndex: 100010,\n                    };\n\n                    hint.css($.extend({}, coordinates, additionStyles));\n\n                },\n                dragstart: that._dragStart.bind(that),\n                dragend: that._dragEnd.bind(that),\n                drag: that._drag.bind(that)\n            });\n        },\n\n        _dragStart: function(e) {\n            const that = this;\n            const target = $(e.currentTarget);\n            const pane = target.closest(`.${KPANE}`);\n\n            that.draggedPane = {\n                width: pane.width(),\n                height: pane.height(),\n                pane,\n                target\n            };\n\n            that._displayGlobalIndicators();\n\n            that.trigger(DRAGSTART, { pane: that.draggedPane.pane, draggableEvent: e });\n        },\n\n        _dragEnd: function(e) {\n            const that = this;\n            const hoveredIndicator = that.element.find(`.${KDOCK_INDICATOR}:hover`);\n            const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n\n            if (hoveredIndicator.length) {\n                that.navigatorDraggable.hint.hide();\n                that._updateLayout(hoveredIndicator);\n            }\n\n            that.element.find(`.${KDOCK_INDICATOR}`).remove();\n            that.element.find(`.${KDOCK_PREVIEW}`).remove();\n\n            if (!hoveredIndicator.length) {\n                that._showHiddenPanes();\n            }\n            that.trigger(DRAGEND, eventData);\n            that.hoveredPane = null;\n            that.draggedPane = null;\n        },\n\n        _drag: function(e) {\n            const that = this;\n            const currentPane = $(e.elementUnderCursor).closest(`.${KPANE}[${UID_ATTR}]`);\n            const pane = that._findPaneByUid(currentPane.attr(UID_ATTR));\n            const navigator = $(NAVIGATOR_TEMPLATE);\n            const currentPaneUid = currentPane.attr(UID_ATTR);\n            const prevPaneUid = that.hoveredPane && that.hoveredPane.attr(UID_ATTR);\n            const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n            const dragTargetUid = e.currentTarget.closest(`.${KPANE}`).attr(UID_ATTR);\n\n            if (that.trigger(DRAG, eventData)) {\n                e.preventDefault();\n                return;\n            }\n\n            if (currentPaneUid === prevPaneUid) {\n                return;\n            }\n\n            that.hoveredPane = currentPane;\n            that.element.find(`.${KDOCK_NAVIGATOR}`).remove();\n            navigator.css({\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%,-50%)\",\n                \"z-index\": 100008\n            });\n\n            if (pane && pane.dockable && !pane.dockable.innerDock) {\n                navigator.css(\"display\", \"none\");\n            }\n            if (currentPaneUid !== dragTargetUid) {\n                currentPane.append(navigator);\n            }\n        },\n\n        _showHiddenPanes: function() {\n            const that = this;\n            const isTabbed = that.draggedPane.pane.is(`.${KPANE_TABBED}`);\n\n            if (isTabbed) {\n                return that._showTab();\n            }\n\n            that._showPane(that.draggedPane.pane);\n        },\n\n        _showTab: function(tab) {\n            if (tab === undefined$1) {\n                return;\n            }\n\n            const that = this;\n            const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n            tab.show();\n            tabstrip.activateTab(tab);\n        },\n\n        _showPane: function(paneElement) {\n            const that = this;\n            const splitbar = paneElement.siblings(`.${KSPLITBAR}:hidden`);\n            paneElement.show();\n            splitbar.show();\n        },\n\n        _hideDraggedPane: function(draggedElement) {\n            const that = this;\n            const isTabbed = draggedElement.is(\"li\");\n\n            if (isTabbed) {\n                return that._hideTab(draggedElement);\n            }\n\n            that._hidePane(draggedElement);\n        },\n\n        _hidePane: function(draggedElement) {\n            const that = this;\n            const paneElement = draggedElement.closest(`.${KPANE}`);\n            const prevElement = paneElement.prev();\n            const nextElement = paneElement.next();\n\n            paneElement.hide();\n\n            if (prevElement.is(`.${KSPLITBAR}`)) {\n                return prevElement.hide();\n            }\n\n            nextElement.hide();\n        },\n\n        _hideTab: function(tab) {\n            const that = this;\n            const isActive = tab.is(`.${KACTIVE}`);\n            const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n            tab.hide();\n\n            if (isActive) {\n                tabstrip.activateTab(\"li:visible:first\");\n            }\n        },\n\n        _getActionButtons: function(paneElement) {\n            const buttons = paneElement.find(\"button\");\n            const container = $(\"<div/>\");\n\n            buttons.each((_, button) => container.append($(button).clone()));\n\n            return container.html();\n        },\n\n        _displayGlobalIndicators: function() {\n            const that = this;\n\n            that.indicators.forEach((indicator) => {\n                const element = $(INDICATOR_TEMPLATE);\n\n                if (indicator.name === \"middle\") {\n                    return;\n                }\n\n                that.element.append(element);\n                element.css({\n                    position: \"absolute\",\n                    \"z-index\": \"100002\",\n                    top: indicator.top,\n                    left: indicator.left,\n                    transform: `${indicator.transform} rotate(${indicator.rotate})`\n                });\n                element.attr(INDICATOR_ATTR, indicator.name);\n            });\n        },\n\n        _displayDockPreview: function(e) {\n            const that = this;\n            const indicator = $(e.currentTarget);\n            const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n            const indicatorName = indicator.attr(INDICATOR_ATTR);\n            const indicatorUid = indicator.attr(UID_ATTR);\n            const indicatorData = that.indicators.filter(i => i.name === indicatorName)[0];\n            const previewElement = $(`<div class=\"${KDOCK_PREVIEW}\"/>`);\n            const container = isGlobalIndicator ? that.panesContainer : that.hoveredPane;\n            const toolbarWidth = that._toolbar ? that._toolbar.outerWidth() : 0;\n            const containerWidth = container.outerWidth();\n            const containerHeight = container.outerHeight();\n            const existingPreview = indicatorUid && container.find(`.${KDOCK_PREVIEW}[${UID_ATTR}=\"${indicatorUid}\"]`);\n            const uid = kendo.guid();\n            let width = that.draggedPane.width;\n            let height = that.draggedPane.height;\n\n            if (existingPreview && existingPreview.length) {\n                return existingPreview.show();\n            }\n\n            if (indicatorName === MIDDLE) {\n                width = containerWidth;\n                height = containerHeight;\n            }\n\n            if (indicatorName === TOP || indicatorName === BOTTOM) {\n                if (height > containerHeight / 2) {\n                    height = containerHeight / 2;\n                }\n\n                width = containerWidth;\n            }\n\n            if (indicatorName === LEFT || indicatorName === RIGHT) {\n                if (width > containerWidth / 2) {\n                    width = containerWidth / 2;\n                }\n\n                height = containerHeight;\n            }\n\n            const css = {\n                position: \"absolute\",\n                \"z-index\": 100000,\n                top: indicatorData.previewTop(containerHeight, height),\n                left: indicatorData.previewLeft(containerWidth, width) + (isGlobalIndicator ? toolbarWidth : 0),\n                width: width,\n                height\n            };\n\n            previewElement.css(css);\n            previewElement.attr(INDICATOR_ATTR, indicatorData.name)\n                          .attr(UID_ATTR, uid);\n            indicator.attr(UID_ATTR, uid);\n            container.append(previewElement);\n            that.draggedPane.preview = {\n                width,\n                height\n            };\n            that.draggedPane.container = {\n                width: containerWidth,\n                height: containerHeight\n            };\n        },\n\n        _hideDockPreview: function() {\n            const that = this;\n\n            that.element.find(`.${KDOCK_PREVIEW}`).hide();\n        },\n\n        _updateLayout: function(indicator) {\n            const that = this;\n            const isTabbed = that.draggedPane.target.is(\"li\");\n            const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n            const paneElement = isTabbed ? that.draggedPane.target : that.draggedPane.pane;\n            const hoveredPane = that._findPaneByUid(that.hoveredPane.attr(UID_ATTR));\n            const draggedPane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n            const location = indicator.attr(INDICATOR_ATTR);\n            const draggedPaneParent = that._findPaneByUid(draggedPane.parentUid);\n            const draggedPaneIndex = draggedPaneParent.panes.indexOf(draggedPane);\n            const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n            draggedPaneParent.panes.splice(draggedPaneIndex, 1);\n            location == MIDDLE ? that._tabDock(hoveredPane, draggedPane) : that._splitDock(hoveredPane, draggedPane, location, isGlobalIndicator);\n            that._processPanes(that.options.rootPane);\n            that._adjustSiblingSizes(draggedPane, location, isGlobalIndicator);\n            that._refreshPane(rootPaneElement, that.options.rootPane);\n            location == MIDDLE ?\n                that.trigger(INNER_DOCK, { pane: draggedPane, paneElement: paneElement }) :\n                that.trigger(DOCK, { pane: draggedPane, paneElement: paneElement });\n        },\n\n        _splitDock: function(targetPane, pane, location, isGlobalDock) {\n            const that = this;\n            const targetPaneParent = isGlobalDock ? that.options.rootPane : that._findPaneByUid(targetPane.parentUid);\n            const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n            const action = location === TOP || location === LEFT ? UNSHIFT : PUSH;\n            const paneIndex = targetPaneIndex + (action === UNSHIFT ? 0 : 1);\n            const orientation = location === TOP || location === BOTTOM ? VERTICAL : HORIZONTAL;\n            const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n            const newParentPane = {\n                type: SPLIT,\n                orientation,\n                panes: [],\n            };\n            const previewSize = that.draggedPane.preview[dimension];\n            const size = `${previewSize}px`;\n\n            pane.size = size;\n\n            if (isGlobalDock) {\n                newParentPane.panes.push(targetPaneParent);\n                (location === TOP || location === LEFT) ? newParentPane.panes.unshift(pane) : newParentPane.panes.push(pane);\n                that.options.rootPane = newParentPane;\n                return;\n            }\n\n            if (((location === TOP || location === BOTTOM) && targetPaneParent.orientation === VERTICAL) ||\n                ((location === LEFT || location === RIGHT) && targetPaneParent.orientation === HORIZONTAL)) {\n                return targetPaneParent.panes.splice(paneIndex, 0, pane);\n            }\n\n            if (targetPane) {\n                newParentPane.size = targetPane.size;\n                targetPane.size = null;\n            }\n\n            targetPaneParent.panes.splice(targetPaneIndex, 1);\n            newParentPane.panes.push(targetPane);\n            newParentPane.panes[action](pane);\n            targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n        },\n\n        _tabDock: function name(targetPane, pane) {\n            const that = this;\n            const targetPaneParent = that._findPaneByUid(targetPane.parentUid);\n            const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n            const newParentPane = {\n                type: TAB,\n                panes: [\n                    targetPane,\n                    pane\n                ]\n            };\n\n            if (targetPane.type === TAB) {\n                targetPane.panes.push(pane);\n                return;\n            }\n\n            targetPaneParent.panes.splice(targetPaneIndex, 1);\n            targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n\n        },\n\n        _adjustSiblingSizes: function(pane, location, isGlobalDock) {\n            const that = this;\n            const siblings = that._getSiblings(pane);\n            const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n            const parentSize = that.draggedPane.container[dimension];\n            const draggedPaneSize = that.draggedPane[dimension];\n            const newParentSize = parentSize - draggedPaneSize;\n            const noSizePanes = [];\n            let freeSpace = newParentSize;\n\n            if (location === MIDDLE) {\n                return;\n            }\n\n            if (siblings.length === 2) {\n                siblings[0].size = null;\n                return;\n            }\n\n            siblings.forEach((childPane) => {\n                if (childPane.uid === pane.uid) {\n                    return;\n                }\n\n                if (!childPane.size) {\n                    noSizePanes.push(childPane);\n                    return;\n                }\n\n                childPane.size = that._calculateNewSize(parentSize, newParentSize, childPane.size);\n                freeSpace -= childPane.size;\n            });\n\n            noSizePanes.forEach((noSizePane) => {\n                const newSize = freeSpace / noSizePanes.length;\n\n                noSizePane.size = newSize;\n            });\n\n        },\n\n        _calculateNewSize: function(parentSize, newParentSize, paneSize) {\n            const proportion = newParentSize / parentSize;\n            let unit = \"px\";\n            let noUnitSize;\n\n            if (isPercentageSize(paneSize)) {\n                unit = \"%\";\n            }\n            if (typeof paneSize === \"string\") {\n                noUnitSize = +paneSize.replace(unit, \"\");\n            }\n\n            return `${noUnitSize * proportion}${unit}`;\n        },\n\n        _getSiblings: function(pane) {\n            const that = this;\n            const parent = that._findPaneByUid(pane.parentUid);\n\n            return parent.panes.filter(p => p.visible !== false &&\n                                            p.uid !== pane.uid &&\n                                            (p.unpinnable && p.unpinnable.unpinned !== true));\n        }\n    });\n\n    ui.plugin(DockManager);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}