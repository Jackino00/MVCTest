{"version":3,"sources":["raw-mjs/kendo.pdf.js"],"names":["kendo","pdf","supportsDeflate","window","pako","deflate","data","jQuery","$","PDFMixin","extend","proto","events","push","options","this","saveAsPDF","_drawPDF","_drawPDFShadow","fileName","proxyURL","paperSize","allPages","landscape","margin","title","author","subject","keywords","creator","version","date","progress","Deferred","promise","args","trigger","multiPage","then","root","drawing","exportPDF","done","dataURI","saveAs","forceProxy","proxyTarget","resolve","fail","err","reject","drawDOM","wrapper","group","page","pageNumber","totalPages","notify","settings","drawOptions","shadow","width","css","overflow","before","append","content","clone","defer","setTimeout","always","remove","apply","arguments","__meta__","id","name","description","mixin","category","depends"],"mappings":";;;;;;;;MAAA,wBACA,2BACA,mBAIAA,MAAAC,IAAAD,MAAAC,KAAA,CAAA,EAEAD,MAAAC,IAAAC,gBAAA,WACA,OAAAC,OAAAC,MAAA,mBAAAD,OAAAC,KAAAC,OACA,EAEAL,MAAAC,IAAAI,QAAA,SAAAC,GACA,OAAAH,OAAAC,KAAAC,QAAAC,EACA,EAMAH,OAAAH,MAAAO,OAEA,SAAAC,GAEAR,MAAAS,SAAA,CACAC,OAAA,SAAAC,GACAA,EAAAC,OAAAC,KAAA,aACAF,EAAAG,QAAAb,IAAAc,KAAAD,QACAH,EAAAK,UAAAD,KAAAC,UACAL,EAAAM,SAAAF,KAAAE,SACAN,EAAAO,eAAAH,KAAAG,cACA,EACAJ,QAAA,CACAK,SAAA,aACAC,SAAA,GAMAC,UAAA,OAGAC,UAAA,EAGAC,WAAA,EAGAC,OAAA,KAGAC,MAAA,KACAC,OAAA,KACAC,QAAA,KACAC,SAAA,KACAC,QAAA,4BAAA7B,MAAA8B,QAGAC,KAAA,MAGAf,UAAA,WACA,IAAAgB,EAAA,IAAAxB,EAAAyB,SACAC,EAAAF,EAAAE,UACAC,EAAA,CAAAD,QAAAA,GAEA,IAAAnB,KAAAqB,QAAA,YAAAD,GAAA,CAIA,IAAArB,EAAAC,KAAAD,QAAAb,IAsBA,OArBAa,EAAAuB,UAAAvB,EAAAuB,WAAAvB,EAAAQ,SAEAP,KAAAE,SAAAe,GACAM,MAAA,SAAAC,GACA,OAAAvC,MAAAwC,QAAAC,UAAAF,EAAAzB,EACA,IACA4B,MAAA,SAAAC,GACA3C,MAAA4C,OAAA,CACAD,QAAAA,EACAxB,SAAAL,EAAAK,SACAC,SAAAN,EAAAM,SACAyB,WAAA/B,EAAA+B,WACAC,YAAAhC,EAAAgC,cAGAd,EAAAe,SACA,IACAC,MAAA,SAAAC,GACAjB,EAAAkB,OAAAD,EACA,IAEAf,CAxBA,CAyBA,EAEAjB,SAAA,SAAAe,GACA,IAAAE,EAAA,IAAA1B,EAAAyB,SAkBA,OAhBAjC,MAAAwC,QAAAW,QAAApC,KAAAqC,SACAV,MAAA,SAAAW,GACA,IAAAlB,EAAA,CACAmB,KAAAD,EACAE,WAAA,EACAvB,SAAA,EACAwB,WAAA,GAGAxB,EAAAyB,OAAAtB,GACAD,EAAAa,QAAAZ,EAAAmB,KACA,IACAN,MAAA,SAAAC,GACAf,EAAAgB,OAAAD,EACA,IAEAf,CACA,EAEAhB,eAAA,SAAAwC,EAAAC,GACAD,EAAAA,GAAA,CAAA,EACA,IAAAN,EAAArC,KAAAqC,QACAQ,EAAApD,EAAA,qCAGAkD,EAAAG,OACAD,EAAAE,IAAA,CACAD,MAAAH,EAAAG,MACAE,SAAA,YAIAX,EAAAY,OAAAJ,GACAA,EAAAK,OAAAP,EAAAQ,SAAAd,EAAAe,OAAA,GAAA,IAEA,IAAAC,EAAA5D,EAAAyB,WAsBA,OAbAoC,YAAA,WACArE,MAAAwC,QAAAW,QAAAS,EAAAD,GACAW,QAAA,WACAV,EAAAW,QACA,IAAAjC,MAAA,WACA8B,EAAArB,QAAAyB,MAAAJ,EAAAK,UACA,IAAAzB,MAAA,WACAoB,EAAAlB,OAAAsB,MAAAJ,EAAAK,UACA,IAAAzC,UAAA,WACAoC,EAAApC,SAAAwC,MAAAJ,EAAAK,UACA,GACA,GAAA,IAEAL,EAAAlC,SACA,EAGA,CA1IA,CA0IA/B,OAAAH,MAAAO,QAEA,MAAAmE,SAAA,CACAC,GAAA,MACAC,KAAA,aACAC,YAAA,2BACAC,OAAA,EACAC,SAAA,YACAC,QAAA,CAAA,OAAA,mBAGAN","file":"kendo.pdf.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.drawing.js';\nimport './kendo.color.js';\n\n(function () {\n\n    kendo.pdf = kendo.pdf || {};\n\n    kendo.pdf.supportsDeflate = function() {\n        return window.pako && typeof window.pako.deflate == \"function\";\n    };\n\n    kendo.pdf.deflate = function(data) {\n        return window.pako.deflate(data);\n    };\n\n})();\n\n(function($) {\n\n})(window.kendo.jQuery);\n\n(function ($, undefined$1) {\n\nkendo.PDFMixin = {\n    extend: function(proto) {\n        proto.events.push(\"pdfExport\");\n        proto.options.pdf = this.options;\n        proto.saveAsPDF = this.saveAsPDF;\n        proto._drawPDF = this._drawPDF;\n        proto._drawPDFShadow = this._drawPDFShadow;\n    },\n    options: {\n        fileName  : \"Export.pdf\",\n        proxyURL  : \"\",\n\n        // paperSize can be an usual name, i.e. \"A4\", or an array of two Number-s specifying the\n        // width/height in points (1pt = 1/72in), or strings including unit, i.e. \"10mm\".  Supported\n        // units are \"mm\", \"cm\", \"in\" and \"pt\".  The default \"auto\" means paper size is determined\n        // by content.\n        paperSize : \"auto\",\n\n        // Export all pages, if applicable\n        allPages: false,\n\n        // True to reverse the paper dimensions if needed such that width is the larger edge.\n        landscape : false,\n\n        // An object containing { left, top, bottom, right } margins with units.\n        margin    : null,\n\n        // Optional information for the PDF Info dictionary; all strings except for the date.\n        title     : null,\n        author    : null,\n        subject   : null,\n        keywords  : null,\n        creator   : \"Kendo UI PDF Generator v.\" + kendo.version,\n\n        // Creation Date; defaults to new Date()\n        date      : null\n    },\n\n    saveAsPDF: function() {\n        var progress = new $.Deferred();\n        var promise = progress.promise();\n        var args = { promise: promise };\n\n        if (this.trigger(\"pdfExport\", args)) {\n            return;\n        }\n\n        var options = this.options.pdf;\n        options.multiPage = options.multiPage || options.allPages;\n\n        this._drawPDF(progress)\n        .then(function(root) {\n            return kendo.drawing.exportPDF(root, options);\n        })\n        .done(function(dataURI) {\n            kendo.saveAs({\n                dataURI: dataURI,\n                fileName: options.fileName,\n                proxyURL: options.proxyURL,\n                forceProxy: options.forceProxy,\n                proxyTarget: options.proxyTarget\n            });\n\n            progress.resolve();\n        })\n        .fail(function(err) {\n            progress.reject(err);\n        });\n\n        return promise;\n    },\n\n    _drawPDF: function(progress) {\n        var promise = new $.Deferred();\n\n        kendo.drawing.drawDOM(this.wrapper)\n        .done(function(group) {\n            var args = {\n                page: group,\n                pageNumber: 1,\n                progress: 1,\n                totalPages: 1\n            };\n\n            progress.notify(args);\n            promise.resolve(args.page);\n        })\n        .fail(function(err) {\n            promise.reject(err);\n        });\n\n        return promise;\n    },\n\n    _drawPDFShadow: function(settings, drawOptions) {\n        settings = settings || {};\n        var wrapper = this.wrapper;\n        var shadow = $(\"<div class='k-pdf-export-shadow'>\");\n\n        // Content will be allowed to take up to 200\" if no width is given.\n        if (settings.width) {\n            shadow.css({\n                width: settings.width,\n                overflow: \"visible\"\n            });\n        }\n\n        wrapper.before(shadow);\n        shadow.append(settings.content || wrapper.clone(true, true));\n\n        var defer = $.Deferred();\n\n        /* https://github.com/telerik/kendo/issues/4790 -- We need to\n         * allow a small timeout so that the browser finalizes the\n         * layout of any images here.  Another option would be to pass\n         * forcePageBreak: \"-\" to drawDOM, but that would make it\n         * clone the content as well and look for page breaks;\n         * needless work, so better do it here.\n         */\n        setTimeout(function(){\n            var promise = kendo.drawing.drawDOM(shadow, drawOptions);\n            promise.always(function() {\n                shadow.remove();\n            }).then(function(){\n                defer.resolve.apply(defer, arguments);\n            }).fail(function(){\n                defer.reject.apply(defer, arguments);\n            }).progress(function(){\n                defer.progress.apply(defer, arguments);\n            });\n        }, 15);\n\n        return defer.promise();\n    }\n};\n\n})(window.kendo.jQuery);\n\nconst __meta__ = {\n    id: \"pdf\",\n    name: \"PDF export\",\n    description: \"PDF Generation framework\",\n    mixin: true,\n    category: \"framework\",\n    depends: [ \"core\", \"drawing\" ]\n};\n\nexport { __meta__ };\n"]}