{"version":3,"sources":["raw-mjs/kendo.combobox.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","features","$","undefined$1","kendo","window","encode","htmlEncode","ui","html","List","Select","caret","support","placeholderSupported","placeholder","activeElement","_activeElement","keys","ns","nsFocusEvent","CLICK","MOUSEDOWN","DISABLED","READONLY","CHANGE","FOCUSED","STATEDISABLED","ARIA_DISABLED","ARIA_READONLY","STATE_FILTER","STATE_ACCEPT","STATE_REBIND","HOVEREVENTS","newLineRegEx","NON_PRINTABLE_KEYS","ComboBox","extend","init","element","options","text","that","this","Array","isArray","dataSource","fn","call","on","_focusHandler","bind","attr","_reset","_wrapper","_input","_clearButton","_tabindex","input","_popup","_dataSource","_ignoreCase","_enable","_attachFocusEvents","_oldIndex","selectedIndex","_initialIndex","index","requireValueMapper","_initList","_cascade","autoBind","_filterSource","_isSelect","children","_setText","_placeholder","parents","is","enable","widget","wrapper","prefixInsertBefore","suffixInsertAfter","_clear","parent","length","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","enabled","value","delay","dataTextField","dataValueField","minLength","enforceMinLength","height","highlightFirst","filter","suggest","cascadeFrom","cascadeFromField","cascadeFromParentField","cascadeOnCustomValue","ignoreCase","animation","virtual","template","groupTemplate","data","fixedGroupTemplate","prefixOptions","separator","suffixOptions","clearButton","syncValueAndText","autoWidth","popup","size","fillMode","rounded","clearOnEscape","_removeDataItems","_shouldRefresh","events","setOptions","listOptions","_listOptions","listView","_accessors","destroy","off","clearTimeout","_pasteTimeout","filterInput","_arrow","addClass","_onActionSheetCreate","_keydown","_search","_inputPaste","role","val","trigger","_onCloseButtonPressed","textField","focus","_syncValueAndText","dataItem","_accessor","_blur","_oldText","_isValueChanged","unifyType","_old","_change","hasText","isCustom","_typing","_inputFocus","_inputFocusout","e","target","_arrowClick","_toggle","isClearButton","relatedTarget","closest","hasClass","_userTriggered","removeClass","_typingTimeout","item","_focus","dataItemByIndex","getElementIndex","select","_valueBeforeCascade","setTimeout","search","_editable","disable","readonly","add","arrow","clear","_toggleHover","prop","preventDefault","_clearValue","open","state","_state","isFiltered","filters","reinitialized","ul","find","visible","bound","_open","refresh","_openPopup","_allowOpening","_hovered","_focusItem","_scrollToFocusedItem","scrollToIndex","one","_updateSelectionState","_buildOptions","custom","_customOption","_options","selected","_emptySearch","_custom","_updateSelection","initialIndex","hasInitialIndex","_fetch","selectedDataItems","_value","_text","_selectValue","_updateItemFocus","focusIndex","_listBound","isActive","flatView","skip","groupsLength","_group","isFirstPage","_presetValue","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","close","toggle","_hideBusy","_listChange","_get","candidate","found","idx","total","_select","keepState","done","_dataValue","_setDomInputValue","_triggerCascade","caretStart","currentCaret","_prev","mobile","mobileOS","wp","android","setSelectionRange","preventShow","_showClear","_hideClear","word","caretIdx","key","_last","accentFoldingFiltering","BACKSPACE","DELETE","view","inArray","toLocaleLowerCase","toLowerCase","indexOf","toString","substring","loweredText","replace","_cascadeTriggered","_refreshFloatingLabel","_isFilterEnabled","_clearFilter","_fetchData","_selectedDataItems","_click","shouldTrigger","_inputValue","_searchByWord","firstChild","current","focusFirst","fetch","maxLength","arrowBtn","accessKey","SELECTOR","renderButton","icon","shape","append","style","cssText","title","parseInt","className","css","width","show","_focused","tabIndex","_arrowIcon","insertAfter","keyCode","isFkey","isNonPrintableKey","HOME","_firstItem","END","_lastItem","ENTER","TAB","_move","ctrlKey","ESC","toggleClass","hide","wrap","_clearSelection","hasValue","_preselect","setValue","_clearText","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","jQuery","kendo$1"],"mappings":"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","file":"kendo.combobox.js","sourcesContent":["import './kendo.list.js';\nimport './kendo.mobile.scroller.js';\nimport './kendo.virtuallist.js';\nimport './kendo.html.button.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"combobox\",\n    name: \"ComboBox\",\n    category: \"web\",\n    description: \"The ComboBox widget allows the selection from pre-defined values or entering a new value.\",\n    depends: [\"list\", \"html.button\", \"prefix-suffix-containers.chunk\"],\n    features: [ {\n        id: \"mobile-scroller\",\n        name: \"Mobile scroller\",\n        description: \"Support for kinetic scrolling in mobile device\",\n        depends: [ \"mobile.scroller\" ]\n    }, {\n        id: \"virtualization\",\n        name: \"VirtualList\",\n        description: \"Support for virtualization\",\n        depends: [ \"virtuallist\" ]\n    } ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        encode = kendo.htmlEncode,\n        ui = kendo.ui,\n        html = kendo.html,\n        List = ui.List,\n        Select = ui.Select,\n        caret = kendo.caret,\n        support = kendo.support,\n        placeholderSupported = support.placeholder,\n        activeElement = kendo._activeElement,\n        keys = kendo.keys,\n        ns = \".kendoComboBox\",\n        nsFocusEvent = ns + \"FocusEvent\",\n        CLICK = \"click\" + ns,\n        MOUSEDOWN = \"mousedown\" + ns,\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        CHANGE = \"change\",\n        FOCUSED = \"k-focus\",\n        STATEDISABLED = \"k-disabled\",\n        ARIA_DISABLED = \"aria-disabled\",\n        ARIA_READONLY = \"aria-readonly\",\n        AUTOCOMPLETEVALUE = \"off\",\n        STATE_FILTER = \"filter\",\n        STATE_ACCEPT = \"accept\",\n        STATE_REBIND = \"rebind\",\n        HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n        newLineRegEx = /(\\r\\n|\\n|\\r)/gm,\n        NON_PRINTABLE_KEYS = [16,17,18,19,20,33,34,37,39,45,91,92,144,145];\n\n    var ComboBox = Select.extend({\n        init: function(element, options) {\n            var that = this, text, disabled;\n\n            that.ns = ns;\n\n            options = Array.isArray(options) ? { dataSource: options } : options;\n\n            Select.fn.init.call(that, element, options);\n\n            options = that.options;\n            element = that.element.on(\"focus\" + ns, that._focusHandler.bind(that));\n\n            options.placeholder = options.placeholder || element.attr(\"placeholder\");\n\n            that._reset();\n\n            that._wrapper();\n\n            that._input();\n\n            that._clearButton();\n\n            that._tabindex(that.input);\n\n            that._popup();\n\n            that._dataSource();\n            that._ignoreCase();\n\n            that._enable();\n\n            that._attachFocusEvents();\n\n            that._oldIndex = that.selectedIndex = -1;\n\n            that._initialIndex = options.index;\n\n            that.requireValueMapper(that.options);\n            that._initList();\n\n            that._cascade();\n\n            if (options.autoBind) {\n                that._filterSource();\n            } else {\n                text = options.text;\n\n                if (!text && that._isSelect) {\n                    text = element.children(\":selected\").text();\n                }\n\n                if (text) {\n                    that._setText(text);\n                }\n            }\n\n            if (!text) {\n                that._placeholder();\n            }\n\n            disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n                that.enable(false);\n            }\n\n            addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options,\n                prefixInsertBefore: that.input,\n                suffixInsertAfter: that._clear.parent().length ? that._clear : that.input });\n\n            kendo.notify(that);\n            that._toggleCloseVisibility();\n            that._applyCssClasses();\n\n            if (options.label) {\n                that._label();\n            }\n\n            that._aria();\n        },\n\n        options: {\n            name: \"ComboBox\",\n            enabled: true,\n            index: -1,\n            text: null,\n            value: null,\n            autoBind: true,\n            delay: 200,\n            dataTextField: \"\",\n            dataValueField: \"\",\n            minLength: 1,\n            enforceMinLength: false,\n            height: 200,\n            highlightFirst: true,\n            filter: \"none\",\n            placeholder: \"\",\n            suggest: false,\n            cascadeFrom: \"\",\n            cascadeFromField: \"\",\n            cascadeFromParentField: \"\",\n            cascadeOnCustomValue: false,\n            ignoreCase: true,\n            animation: {},\n            virtual: false,\n            template: null,\n            groupTemplate: (data) => encode(data),\n            fixedGroupTemplate: (data) => encode(data),\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            },\n            clearButton: true,\n            syncValueAndText: true,\n            autoWidth: false,\n            popup: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            label: null,\n            clearOnEscape: true,\n            _removeDataItems: true,\n            _shouldRefresh: true\n        },\n\n        events: [\n            \"open\",\n            \"close\",\n            CHANGE,\n            \"select\",\n            \"filtering\",\n            \"dataBinding\",\n            \"dataBound\",\n            \"cascade\",\n            \"set\"\n        ],\n\n        setOptions: function(options) {\n            var listOptions = this._listOptions(options);\n\n            Select.fn.setOptions.call(this, options);\n\n            this.listView.setOptions(listOptions);\n\n            this._accessors();\n            this._aria();\n            this._clearButton();\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.input.off(ns);\n            that.input.off(nsFocusEvent);\n            that.element.off(ns);\n            that.wrapper.off(ns);\n            clearTimeout(that._pasteTimeout);\n\n            if (that.filterInput) {\n                that.filterInput.off(ns);\n            }\n\n            that._arrow.off(CLICK + \" \" + MOUSEDOWN);\n            that._clear.off(CLICK + \" \" + MOUSEDOWN);\n\n            Select.fn.destroy.call(that);\n        },\n\n        _popup: function() {\n            Select.fn._popup.call(this);\n            this.popup.element.addClass(\"k-combobox-popup\");\n        },\n\n        _onActionSheetCreate: function() {\n            var that = this;\n\n            if (that.filterInput) {\n                that.filterInput\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._inputPaste.bind(that))\n                    .attr({\n                        \"role\": \"combobox\",\n                        \"aria-expanded\": false\n                    });\n\n                that.popup.bind(\"activate\", () => {\n                    that.filterInput.val(that.input.val());\n                    that.filterInput.trigger(\"focus\");\n                });\n\n                that.popup.bind(\"deactivate\", () => {\n                    that.input.trigger(\"focus\");\n                });\n            }\n        },\n\n        _onCloseButtonPressed: function() {\n            var that = this;\n            var textField = that.options.dataTextField || \"text\";\n            var current = that.listView.focus();\n\n            if (!current) {\n                if (that._syncValueAndText() || that._isSelect) {\n                    if (!that.dataItem() || that.dataItem()[textField] !== that.input.val()) {\n                        var input = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.input;\n                        that._accessor(input.val());\n                    }\n                }\n\n                if (that.options.highlightFirst) {\n                    that.listView.value(that.input.val());\n                    that._blur();\n                } else {\n                    that._oldText = that.text();\n                }\n            }\n        },\n\n        _isValueChanged: function(value) {\n            return value !== List.unifyType(this._old, typeof value) &&\n                value !== List.unifyType(this._oldText, typeof value);\n        },\n\n        _change: function() {\n            var that = this;\n            var text = that.text();\n            var hasText = text && text !== that._oldText && text !== that.options.placeholder;\n            var index = that.selectedIndex;\n            var isCustom = index === -1;\n\n            if (that.filterInput && activeElement() === that.filterInput[0] && isCustom && hasText) {\n                that.input.val(that.filterInput.val());\n            }\n\n            if (!that.options.syncValueAndText && !that.value() && isCustom && hasText) {\n                that._old = \"\";\n                that._oldIndex = index;\n                that._oldText = text;\n\n                if (!that._typing) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                that.trigger(CHANGE);\n                that._typing = false;\n                return;\n            }\n\n            Select.fn._change.call(that);\n\n            that._oldText = that.text && that.text();\n\n            that._toggleCloseVisibility();\n        },\n\n        _attachFocusEvents: function() {\n            var that = this;\n            that.input.on(\"focus\" + nsFocusEvent, that._inputFocus.bind(that))\n                      .on(\"focusout\" + nsFocusEvent, that._inputFocusout.bind(that));\n        },\n\n        _focusHandler: function(e) {\n            if (e.target === this.element[0]) {\n                this.input.trigger(\"focus\");\n            }\n        },\n\n        _arrowClick: function() {\n            this._toggle();\n        },\n\n        _inputFocus: function() {\n            this.wrapper.addClass(FOCUSED);\n            this._placeholder(false);\n        },\n\n        _inputFocusout: function(e) {\n            var that = this;\n            var value = that.value();\n            const isClearButton = !$(e.relatedTarget).closest('.k-clear-value').length || (!$(e.relatedTarget).is(that._clear) && $(e.relatedTarget).hasClass('k-clear-value'));\n\n            if (that.filterInput && e.relatedTarget === that.filterInput[0]) {\n                return;\n            }\n\n            that._userTriggered = true;\n            that.wrapper.removeClass(FOCUSED);\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = null;\n\n            if (isClearButton) {\n              that.text(that.text());\n            }\n\n            var item = that._focus();\n            var dataItem = this.listView.dataItemByIndex(this.listView.getElementIndex(item));\n            var selectedIndex = that.select();\n\n            if (value !== that.value() && selectedIndex !== -1 && that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                that.value(value);\n                return;\n            }\n\n            that._placeholder();\n            that._valueBeforeCascade = that._old;\n\n            if (isClearButton) {\n                that._blur();\n\n                that.element.trigger(\"blur\");\n            }\n        },\n\n        _inputPaste: function() {\n            var that = this;\n            clearTimeout(that._pasteTimeout);\n            that._pasteTimeout = null;\n\n            that._pasteTimeout = setTimeout(function() {\n                that.search();\n            });\n        },\n\n        _editable: function(options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                wrapper = that.wrapper.off(ns),\n                input = that.element.add(that.input.off(ns)),\n                arrow = that._arrow.off(CLICK + \" \" + MOUSEDOWN),\n                clear = that._clear;\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .on(HOVEREVENTS, that._toggleHover);\n\n                input.prop(DISABLED, false)\n                     .prop(READONLY, false)\n                     .attr(ARIA_DISABLED, false)\n                     .attr(ARIA_READONLY, false);\n\n                arrow.on(CLICK, that._arrowClick.bind(that))\n                     .on(MOUSEDOWN, function(e) { e.preventDefault(); });\n\n                clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n\n                that.input\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._inputPaste.bind(that));\n\n                that.wrapper.on(CLICK + ns, that._focusHandler.bind(that));\n            } else {\n                wrapper\n                    .addClass(disable ? STATEDISABLED : \"\")\n                    .removeClass(disable ? \"\" : STATEDISABLED);\n\n                input.attr(DISABLED, disable)\n                     .attr(READONLY, readonly)\n                     .attr(ARIA_DISABLED, disable)\n                     .attr(ARIA_READONLY, readonly);\n            }\n\n            that._toggleCloseVisibility();\n        },\n\n        open: function() {\n            var that = this;\n            var state = that._state;\n            var isFiltered = that.dataSource.filter() ? that.dataSource.filter().filters.length > 0 : false;\n            var reinitialized = !that.ul.find(that.listView.focus()).length;\n\n            if (that.popup.visible()) {\n                return;\n            }\n\n            if ((!that.listView.bound() && state !== STATE_FILTER) || state === STATE_ACCEPT) {\n                that._open = true;\n                that._state = STATE_REBIND;\n\n                if ((that.options.minLength !== 1 && !isFiltered) || (isFiltered && that.value() && that.selectedIndex === -1 )) {\n                    that.refresh();\n                    that._openPopup();\n                    if (!this.options.virtual) {\n                        that.listView.bound(false);\n                    }\n                } else {\n                    that._filterSource();\n                }\n            } else if (that._allowOpening()) {\n                // In some cases when the popup is opened resize is triggered which will cause it to close\n                // Setting the below flag will prevent this from happening\n                that.popup._hovered = true;\n                that._openPopup();\n                if (that.options.virtual) {\n                    that._focusItem();\n                } else if (reinitialized && that.options.highlightFirst) {\n                    that.listView.focus(0);\n                }\n            }\n        },\n\n        _scrollToFocusedItem: function() {\n            var listView = this.listView;\n\n            listView.scrollToIndex(listView.getElementIndex(listView.focus()));\n        },\n\n        _openPopup: function() {\n            this.popup.one(\"activate\", this._scrollToFocusedItem.bind(this));\n            this.popup.open();\n        },\n\n        _updateSelectionState: function() {\n            var that = this;\n            var text = that.options.text;\n            var value = that.options.value;\n\n            if (that.listView.isFiltered()) {\n                return;\n            }\n\n            if (that.selectedIndex === -1) {\n                if (text === undefined$1 || text === null) {\n                    text = value;\n                }\n\n                that._accessor(value);\n                that.input.val(text || that.input.val());\n                that._placeholder();\n            } else if (that._oldIndex === -1) {\n                that._oldIndex = that.selectedIndex;\n            }\n        },\n\n        _buildOptions: function(data) {\n            var that = this;\n            if (!that._isSelect) {\n                return;\n            }\n\n            var custom = that._customOption;\n\n            if (that._state === STATE_REBIND) {\n                that._state = \"\";\n            }\n\n            that._customOption = undefined$1;\n            that._options(data, \"\", that.value());\n\n            if (custom && custom[0].selected && !that.listView._emptySearch) {\n                that._custom(custom.val());\n            }\n        },\n\n        _updateSelection: function() {\n            var that = this;\n            var listView = that.listView;\n            var initialIndex = that._initialIndex;\n            var hasInitialIndex = initialIndex !== null && initialIndex > -1;\n            var filtered = that._state === STATE_FILTER;\n\n            if (filtered) {\n                $(listView.focus()).removeClass(\"k-selected\");\n                return;\n            }\n\n            if (that._fetch) {\n                return;\n            }\n\n            if (!listView.value().length) {\n                if (hasInitialIndex) {\n                    that.select(initialIndex);\n                } else if (that._accessor()) {\n                    listView.value(that._accessor());\n                }\n            }\n\n            that._initialIndex = null;\n            var dataItem = listView.selectedDataItems()[0];\n\n            if (!dataItem) {\n                return;\n            }\n\n            if (that._value(dataItem) !== that.value()) {\n                that._custom(that._value(dataItem));\n            } else if (that._value(dataItem) !== that.element[0].value) {\n                that._accessor(that._value(dataItem));\n            }\n\n            if (that.text() && that.text() !== that._text(dataItem)) {\n                that._selectValue(dataItem);\n            }\n        },\n\n        _updateItemFocus: function() {\n            var listView = this.listView;\n\n            if (!this.options.highlightFirst) {\n                listView.focus(-1);\n            } else if (!listView.focus() && !listView.focusIndex()) {\n                listView.focus(0);\n            }\n        },\n\n        _listBound: function() {\n            var that = this;\n            var isActive = that.input[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n\n            var data = that.dataSource.flatView();\n            var skip = that.listView.skip();\n            var length = data.length;\n            var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n            var isFirstPage = skip === undefined$1 || skip === 0;\n\n            that._presetValue = false;\n\n            that._renderFooter();\n            that._renderNoData();\n            that._toggleNoData(!length);\n            that._toggleHeader(!!groupsLength && !!length);\n\n            that._resizePopup();\n\n            that.popup.position();\n\n            that._buildOptions(data);\n\n            that._updateSelection();\n\n            if (data.length && isFirstPage) {\n                that._updateItemFocus();\n\n                if (that.options.suggest && isActive && that.input.val()) {\n                    that.suggest(data[0]);\n                }\n            }\n\n            if (that._open) {\n                that._open = false;\n\n                if (that._typingTimeout && !isActive) {\n                    that.popup.close();\n                } else {\n                    that.toggle(that._allowOpening());\n                }\n\n                that._typingTimeout = null;\n            }\n\n            that._hideBusy();\n            that.trigger(\"dataBound\");\n        },\n\n        _listChange: function() {\n            this._selectValue(this.listView.selectedDataItems()[0]);\n\n            if (this._presetValue) {\n                this._oldIndex = this.selectedIndex;\n            }\n        },\n\n        _get: function(candidate) {\n            var data, found, idx;\n\n            if (typeof candidate === \"function\") {\n                data = this.dataSource.flatView();\n\n                for (idx = 0; idx < data.length; idx++) {\n                    if (candidate(data[idx])) {\n                        candidate = idx;\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (!found) {\n                    candidate = -1;\n                }\n            }\n\n            if (!this.dataSource.total() && !candidate) {\n                candidate = -1;\n            }\n\n            return candidate;\n        },\n\n        _select: function(candidate, keepState) {\n            var that = this;\n\n            candidate = that._get(candidate);\n\n            if (candidate === -1) {\n                that.input[0].value = \"\";\n                that._accessor(\"\");\n            }\n\n            return that.listView.select(candidate).done(function() {\n                if (!keepState && that._state === STATE_FILTER) {\n                    that._state = STATE_ACCEPT;\n                }\n                that._toggleCloseVisibility();\n            });\n        },\n\n        _selectValue: function(dataItem) {\n            var idx = this.listView.select();\n            var value = \"\";\n            var text = \"\";\n\n            idx = idx[idx.length - 1];\n            if (idx === undefined$1) {\n                idx = -1;\n            }\n\n            this.selectedIndex = idx;\n\n            if (this.listView.isFiltered() && idx !== -1) {\n                this._valueBeforeCascade = this._old;\n            }\n\n            if (idx === -1 && !dataItem) {\n                if (this.options.syncValueAndText) {\n                    if (this.options.dataTextField === this.options.dataValueField) {\n                        text = this._accessor();\n                    } else {\n                        text = this.input[0].value;\n                    }\n                    value = text;\n                }\n                else {\n                    text = this.text();\n                }\n                this.listView.focus(-1);\n            } else {\n                if (dataItem || dataItem === 0) {\n                    value = this._dataValue(dataItem);\n                    text = this._text(dataItem);\n                }\n\n                if (value === null) {\n                    value = \"\";\n                }\n            }\n\n            this._setDomInputValue(text);\n            this._accessor(value !== undefined$1 ? value : text, idx);\n\n            this._placeholder();\n            this._triggerCascade();\n        },\n\n        _setDomInputValue: function(text) {\n            var that = this;\n            var currentCaret = caret(this.input);\n            var caretStart;\n\n            if (currentCaret && currentCaret.length) {\n                caretStart = currentCaret[0];\n            }\n\n            this._prev = this.input[0].value = text;\n\n            if (caretStart && this.selectedIndex === -1) {\n                var mobile = support.mobileOS;\n                if (mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input\n                    setTimeout(function() { that.input[0].setSelectionRange(caretStart, caretStart); }, 0);\n                }\n                else {\n                    this.input[0].setSelectionRange(caretStart, caretStart);\n                }\n            }\n        },\n\n        refresh: function() {\n            this.listView.refresh();\n        },\n\n        _toggleCloseVisibility: function() {\n            var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n            if (this.text() && !preventShow) {\n                this._showClear();\n            } else {\n                this._hideClear();\n            }\n        },\n\n        suggest: function(word) {\n            var that = this;\n            var element = that.input[0];\n            var value = that.text();\n            var caretIdx = caret(element)[0];\n            var key = that._last;\n            var idx;\n            var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n            if (key == keys.BACKSPACE || key == keys.DELETE) {\n                that._last = undefined$1;\n                return;\n            }\n\n            word = word || \"\";\n\n            if (typeof word !== \"string\") {\n                if (word[0]) {\n                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                }\n\n                word = word ? that._text(word) : \"\";\n            }\n\n            if (caretIdx <= 0) {\n                caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n            }\n\n            if (word) {\n                word = word.toString();\n                idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                if (idx > -1) {\n                    value += word.substring(idx + value.length);\n                }\n            } else {\n                value = value.substring(0, caretIdx);\n            }\n\n            if (value.length !== caretIdx || !word) {\n                element.value = value;\n                if (element === activeElement()) {\n                    caret(element, caretIdx, value.length);\n                }\n            }\n        },\n\n        text: function(text) {\n            text = text === null ? \"\" : text;\n\n            var that = this;\n            var input = that.filterInput && that.filterInput[0] === activeElement() ? that.filterInput[0] : that.input[0];\n            var ignoreCase = that.options.ignoreCase;\n            var loweredText = text;\n            var dataItem;\n            var value;\n\n            if (text === undefined$1) {\n                return input.value;\n            }\n\n            if (that.options.autoBind === false && !that.listView.bound()) {\n                that._setText(text);\n                return;\n            }\n\n            dataItem = that.dataItem();\n\n            if (dataItem && that._text(dataItem).replace && that._text(dataItem).replace(newLineRegEx,\"\") === text) {\n                value = that._value(dataItem);\n\n                if (value === List.unifyType(that._old, typeof value)) {\n                    that._triggerCascade();\n                    return;\n                }\n            }\n\n            if (ignoreCase) {\n                loweredText = loweredText.toLowerCase();\n            }\n\n            if (that.dataItem() && that._text(that.dataItem()) === text) {\n                return;\n            }\n\n            that._select(function(data) {\n                data = that._text(data);\n                if (ignoreCase) {\n                    data = (data + \"\").toLowerCase();\n                }\n\n                return data === loweredText;\n            }).done(function() {\n                if (that.selectedIndex < 0) {\n                    input.value = text;\n\n                    if (that.options.syncValueAndText) {\n                        that._accessor(text);\n                    }\n\n                    if (that._isValueChanged(text)) {\n                        that._cascadeTriggered = true;\n                        that._triggerCascade();\n                    }\n\n                    that._refreshFloatingLabel();\n                }\n\n                that._prev = input.value;\n            });\n\n            that._toggleCloseVisibility();\n        },\n\n        toggle: function(toggle) {\n            this._toggle(toggle, true);\n        },\n\n        value: function(value) {\n            var that = this;\n            var options = that.options;\n            var listView = that.listView;\n\n            if (value === undefined$1) {\n                value = that._accessor() || that.listView.value()[0];\n                return value === undefined$1 || value === null ? \"\" : value;\n            }\n\n            that.requireValueMapper(that.options, value);\n\n            that.trigger(\"set\", { value: value });\n\n            if (value === options.value && that.input.val() === options.text &&\n            !that.options.cascadeFrom) {\n                return;\n            }\n\n            that._accessor(value);\n\n            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {\n                that._clearFilter();\n            } else {\n                that._fetchData();\n            }\n\n            listView\n                .value(value)\n                .done(function() {\n                    if (that.selectedIndex === -1 && (!listView._selectedDataItems || !listView._selectedDataItems.length)) {\n                        that._accessor(value);\n                        that.input.val(value);\n                        that._placeholder(true);\n                    }\n\n                    if (that._userTriggered) {\n                         that._old = that._accessor();\n                    } else {\n                         that._old = that._valueBeforeCascade = that._accessor();\n                    }\n\n                    that._oldIndex = that.selectedIndex;\n\n                    that._prev = that._oldText = that.input.val();\n\n                    if (that._state === STATE_FILTER) {\n                        that._state = STATE_ACCEPT;\n                    }\n                    that._toggleCloseVisibility();\n\n                    that._refreshFloatingLabel();\n                });\n        },\n\n        _click: function(e) {\n            var that = this;\n            var item = e.item;\n            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n            var shouldTrigger = true;\n            e.preventDefault();\n\n            if (dataItem) {\n                shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));\n\n                if (!shouldTrigger) {\n                   that.input.val(that._text(dataItem));\n                }\n            }\n\n            if (shouldTrigger && that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                that.close();\n                return;\n            }\n\n            that._userTriggered = true;\n\n            that._select(item).done(function() {\n                that._blur();\n            });\n        },\n\n        _syncValueAndText: function() {\n            return this.options.syncValueAndText;\n        },\n\n        _inputValue: function() {\n            return this.text();\n        },\n\n        _searchByWord: function(word) {\n            var that = this;\n            var options = that.options;\n            var dataSource = that.dataSource;\n            var ignoreCase = options.ignoreCase;\n            var predicate = function(dataItem) {\n                var text = that._text(dataItem);\n                if (text !== undefined$1) {\n                    text = text + \"\";\n                    if (text !== \"\" && word === \"\") {\n                        return false;\n                    }\n\n                    if (ignoreCase) {\n                        text = text.toLowerCase();\n                    }\n\n                    return text.indexOf(word) === 0;\n                }\n            };\n\n            if (ignoreCase) {\n                word = word.toLowerCase();\n            }\n\n            if (!that.ul[0].firstChild) {\n                dataSource.one(CHANGE, function() {\n                    if (dataSource.view()[0]) {\n                        that.search(word);\n                    }\n                }).fetch();\n                return;\n            }\n\n            this.listView.focus(this._get(predicate));\n\n            var current = this.listView.focus();\n\n            if (current) {\n                if (options.suggest) {\n                    that.suggest(current);\n                }\n\n                this.open();\n            }\n\n            if (this.options.highlightFirst && !word) {\n                this.listView.focusFirst();\n            }\n        },\n\n        _input: function() {\n            var that = this,\n                element = that.element.removeClass(\"k-input-inner\")[0],\n                accessKey = element.accessKey,\n                wrapper = that.wrapper,\n                SELECTOR = \"input.k-input-inner\",\n                name = element.name || \"\",\n                options = that.options,\n                input,\n                maxLength,\n                arrowBtn;\n\n            if (name) {\n                name = 'name=\"' + name + '_input\" ';\n            }\n\n            input = wrapper.find(SELECTOR);\n\n            if (!input[0]) {\n                arrowBtn = html.renderButton('<button type=\"button\" class=\"k-input-button\" aria-label=\"expand combobox\"></button>', {\n                    icon: \"caret-alt-down\",\n                    size: options.size,\n                    fillMode: options.fillMode,\n                    shape: \"none\",\n                    rounded: \"none\",\n                });\n\n                wrapper.append('<input ' + name + 'class=\"k-input-inner\" type=\"text\" autocomplete=\"' + AUTOCOMPLETEVALUE + '\"/>')\n                    .append(arrowBtn)\n                    .append(that.element);\n\n                input = wrapper.find(SELECTOR);\n            }\n\n            input[0].style.cssText = element.style.cssText;\n            input[0].title = element.title;\n\n            maxLength = parseInt(this.element.prop(\"maxlength\") || this.element.attr(\"maxlength\"), 10);\n            if (maxLength > -1) {\n                input[0].maxLength = maxLength;\n            }\n\n            input.addClass(element.className)\n                .css({\n                    width: \"\",\n                    height: element.style.height,\n                    position: \"\"\n                })\n                .attr({\n                    \"role\": \"combobox\",\n                    \"aria-expanded\": false\n                })\n                .show();\n\n            input.attr(kendo.attr(\"skip\"), true);\n            if (placeholderSupported) {\n                input.attr(\"placeholder\", that.options.placeholder);\n            }\n\n            if (accessKey) {\n                element.accessKey = \"\";\n                input[0].accessKey = accessKey;\n            }\n\n            that._focused = that.input = input;\n            that._arrow = wrapper.find(\".k-input-button\")\n                .attr({\n                    \"role\": \"button\",\n                    \"tabIndex\": -1\n                });\n            that._arrowIcon = that._arrow.find(\".k-icon, .k-svg-icon\");\n        },\n\n        _clearButton: function() {\n            List.fn._clearButton.call(this);\n\n            if (this.options.clearButton) {\n                this._clear.insertAfter(this.input);\n            }\n        },\n\n        _keydown: function(e) {\n            var that = this,\n                key = e.keyCode,\n                textField = that.options.dataTextField || \"text\",\n                isFkey = key >= 112 && key <= 135,\n                isNonPrintableKey = NON_PRINTABLE_KEYS.indexOf(key) > -1;\n\n            that._last = key;\n\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = null;\n\n            if (key === keys.HOME) {\n                that._firstItem();\n            } else if (key === keys.END) {\n                that._lastItem();\n            } else if (key === keys.ENTER || (key === keys.TAB && that.popup.visible())) {\n                var current = that.listView.focus();\n                var dataItem = that.dataItem();\n                var shouldTrigger = true;\n\n                if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {\n                    current = null;\n                }\n\n                if (current) {\n                    if (that.popup.visible()) {\n                        e.preventDefault();\n                    }\n\n                    dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(current));\n\n                    if (dataItem) {\n                        shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));\n                    }\n\n                    if (shouldTrigger && that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                        return;\n                    }\n\n                    that._userTriggered = true;\n\n                    that._select(current).done(function() {\n                        that._blur();\n                        that._valueBeforeCascade = that._old = that.value();\n                    });\n                } else {\n                    if (that._syncValueAndText() || that._isSelect) {\n                        if (!that.dataItem() || that.dataItem()[textField] !== that.input.val()) {\n                            var input = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.input;\n                            that._accessor(input.val());\n                        }\n                    }\n\n                    if (that.options.highlightFirst) {\n                        that.listView.value(that.input.val());\n                        that._blur();\n                    } else {\n                        that._oldText = that.text();\n                    }\n                }\n            } else if (key != keys.TAB && !that._move(e) && !isNonPrintableKey && !isFkey && !e.ctrlKey) {\n               that._search();\n            } else if (that.options.clearOnEscape && key === keys.ESC && !that.popup.visible() && that.text()) {\n                that._clearValue();\n            }\n        },\n\n        _placeholder: function(show) {\n            if (placeholderSupported) {\n                return;\n            }\n\n            var that = this,\n                input = that.input,\n                placeholder = that.options.placeholder,\n                value;\n\n            if (placeholder) {\n                value = that.value();\n\n                if (show === undefined$1) {\n                    show = !value;\n                }\n\n                input.toggleClass(\"k-readonly\", show);\n\n                if (!show) {\n                    if (!value) {\n                        placeholder = \"\";\n                    } else {\n                        return;\n                    }\n                }\n\n                input.val(placeholder);\n\n                if (!placeholder && input[0] === activeElement()) {\n                    caret(input[0], 0, 0);\n                }\n            }\n        },\n\n        _search: function() {\n            var that = this;\n\n            clearTimeout(that._typingTimeout);\n\n            that._typingTimeout = setTimeout(function() {\n                var value = that.text();\n\n                if (value !== \"\" && that._prev !== value) {\n                    that._prev = value;\n\n                    if (that.options.filter === \"none\" && that.options.virtual) {\n                        that.listView.select(-1);\n                    }\n\n                    that.search(value);\n\n                    that._toggleCloseVisibility();\n                }\n                else if (value === \"\" && that._prev !== \"\" && that._prev !== undefined$1) {\n                    that._clearValue();\n                    that._open = true;\n                    that._state = STATE_REBIND;\n                }\n\n                that._typingTimeout = null;\n            }, that.options.delay);\n        },\n\n        _setText: function(text) {\n            this.input.val(text);\n            this._prev = text;\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                wrapper = element.parent();\n\n            if (!wrapper.is(\"span.k-input\")) {\n                wrapper = element.hide().wrap(\"<span />\").parent();\n                wrapper[0].style.cssText = element[0].style.cssText;\n            }\n\n            that.wrapper = wrapper.addClass(\"k-input k-combobox\")\n                .addClass(element[0].className)\n                .removeClass('input-validation-error')\n                .css(\"display\", \"\");\n        },\n\n        _clearSelection: function(parent, isFiltered) {\n            var that = this;\n            var hasValue = parent.value();\n            var custom = hasValue && parent.selectedIndex === -1;\n\n            if (this.selectedIndex == -1 && this.value()) {\n                return;\n            }\n\n            if (isFiltered || !hasValue || custom) {\n                that.options.value = \"\";\n                that.value(\"\");\n            }\n        },\n\n        _preselect: function(value, text) {\n            this.input.val(text);\n            this._accessor(value);\n\n            this._old = this._accessor();\n            this._oldIndex = this.selectedIndex;\n\n            this.listView.setValue(value);\n            this._placeholder();\n\n            this._initialIndex = null;\n            this._presetValue = true;\n            this._toggleCloseVisibility();\n        },\n\n        _clearText: function() {\n            this._old = this.value();\n            this.text(\"\");\n        },\n\n        _clearValue: function() {\n            var that = this;\n            var input = that.filterInput && that.filterInput[0] === activeElement() ? that.filterInput : that.input;\n\n            Select.fn._clearValue.call(this);\n            input.trigger(\"focus\");\n        }\n    });\n\n    ui.plugin(ComboBox);\n\n    kendo.cssProperties.registerPrefix(\"ComboBox\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"ComboBox\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}