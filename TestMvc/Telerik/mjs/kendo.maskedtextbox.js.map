{"version":3,"sources":["raw-mjs/kendo.maskedtextbox.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","$","undefined$1","global","window","min","Math","kendo","caret","keys","ui","Widget","NS","isPlainObject","setTimeout","STATEDISABLED","STATEINVALID","FOCUSED","DISABLED","READONLY","CHANGE","MOUSEUP","DROP","KEYDOWN","PASTE","ns","INPUT_EVENT_NAME","support","propertyChangeEvent","MaskedTextBox","extend","init","element","options","DOMElement","that","this","fn","call","_rules","rules","_wrapper","_tokenize","_form","addClass","attr","on","value","_togglePrompt","_old","_emptyMask","_oldValue","wrapper","_timeoutId","_maskLength","val","clearTimeout","removeClass","_change","mask","length","is","parents","enable","readonly","_validationIcon","icon","iconClass","insertAfter","_label","_applyCssClasses","widget","suffixInsertAfter","floatingLabel","refresh","notify","clearPromptChar","unmaskOnPost","promptChar","culture","label","size","fillMode","rounded","prefixOptions","separator","suffixOptions","events","L","C","A","a","setOptions","_unbindInput","_bindInput","destroy","off","_formElement","_resetHandler","_submitHandler","raw","_unmask","replace","RegExp","escapeRegExp","emptyMask","_mask","_unmaskedValue","_activeElement","show","_editable","disable","_keydown","bind","_drop","_trackChange","_inputHandler","browser","msie","version","join","_legacyIEInputHandler","toggleClass","prop","trigger","__changing","inputChange","backward","old","cursor","lengthDiff","mobile","mobileOS","__dropping","android","contentStart","str1","str2","i","stringDiffStart","content","substring","caretPos","endContent","_trimStartPromptChars","unmasked","_findCaretPosBackwards","count","indexOf","pos","caretStart","_find","__backward","e","input","type","__pasting","formId","form","closest","key","keyCode","BACKSPACE","ENTER","idx","step","charAt","tokens","start","end","valueLength","chr","current","empty","chrIdx","split","token","tokenIdx","tokensLength","result","test","isFunction","_blinkInvalidState","floating","labelText","_floatingLabelContainer","wrap","parent","FloatingLabel","guid","_inputLabel","style","cssText","width","className","_addInvalidState","_invalidStateTimeout","_removeInvalidState","rule","maskChars","numberFormat","getCulture","currency","symbol","l","text","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.maskedtextbox.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.floatinglabel.js';\nimport './kendo.icons.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"maskedtextbox\",\n    name: \"MaskedTextBox\",\n    category: \"web\",\n    description: \"The MaskedTextBox widget allows to specify a mask type on an input field.\",\n    depends: [\"core\", \"floatinglabel\", \"icons\", \"prefix-suffix-containers.chunk\"]\n};\n\n(function($, undefined$1) {\n    var global = window;\n    var min = global.Math.min;\n    var kendo = global.kendo;\n    var caret = kendo.caret;\n    var keys = kendo.keys;\n    var ui = kendo.ui;\n    var Widget = ui.Widget;\n    var NS = \".kendoMaskedTextBox\";\n    var isPlainObject = $.isPlainObject;\n    var setTimeout = window.setTimeout;\n\n    var LABELCLASSES = \"k-label k-input-label\";\n    var FLOATINGLABELCLASS = \"k-floating-label\";\n    var STATEDISABLED = \"k-disabled\";\n    var STATEINVALID = \"k-invalid\";\n    var FOCUSED = \"k-focus\";\n    var DISABLED = \"disabled\";\n    var READONLY = \"readonly\";\n    var CHANGE = \"change\";\n    var MOUSEUP = \"mouseup\";\n    var DROP = \"drop\";\n    var KEYDOWN = \"keydown\";\n    var PASTE = \"paste\";\n    var INPUT = \"input\";\n\n    function ns(name) { return name + NS; }\n\n    var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? \"propertychange\" : INPUT);\n\n    function stringDiffStart(str1, str2) {\n        var i = 0;\n        while (i < str2.length) {\n            if (str1[i] !== str2[i]) {\n                break;\n            }\n            i++;\n        }\n\n        return i;\n    }\n    var MaskedTextBox = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n            var DOMElement;\n\n            Widget.fn.init.call(that, element, options);\n\n            that._rules = $.extend({}, that.rules, that.options.rules);\n\n            element = that.element;\n            DOMElement = element[0];\n\n            that._wrapper();\n            that._tokenize();\n            that._form();\n\n            that.element\n                .addClass(\"k-input-inner\")\n                .attr(\"autocomplete\", \"off\")\n                .on(\"focus\" + NS, function() {\n                    var value = DOMElement.value;\n\n                    if (!value) {\n                        DOMElement.value = that._old = that._emptyMask;\n                    } else {\n                        that._togglePrompt(true);\n                    }\n\n                    that._oldValue = value;\n                    that.wrapper.addClass(FOCUSED);\n\n                    that._timeoutId = setTimeout(function() {\n                        caret(element, 0, value ? that._maskLength : 0);\n                    });\n                })\n                .on(\"focusout\" + NS, function() {\n                    var value = element.val();\n\n                    clearTimeout(that._timeoutId);\n                    DOMElement.value = that._old = \"\";\n\n                    if (value !== that._emptyMask) {\n                        DOMElement.value = that._old = value;\n                    }\n\n                    that.wrapper.removeClass(FOCUSED);\n                    that._change();\n                    that._togglePrompt();\n                });\n\n            if (that.options.mask && that.options.mask.length > 0) {\n                that.element.attr(\"aria-placeholder\", that.options.mask);\n            }\n\n            var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n                that.enable(false);\n            } else {\n                that.readonly(element.is(\"[readonly]\"));\n            }\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n            that.value(that.options.value || element.val());\n\n            that._label();\n            that._applyCssClasses();\n\n            addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, suffixInsertAfter: that._validationIcon });\n            if (that.floatingLabel) {\n                that.floatingLabel.refresh();\n            }\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"MaskedTextBox\",\n            clearPromptChar: false,\n            unmaskOnPost: false,\n            promptChar: \"_\",\n            culture: \"\",\n            rules: {},\n            value: \"\",\n            mask: \"\",\n            label: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            }\n        },\n\n        events: [\n            CHANGE\n        ],\n\n        rules: {\n            \"0\": /\\d/,\n            \"9\": /\\d|\\s/,\n            \"#\": /\\d|\\s|\\+|\\-/,\n            \"L\": /[a-zA-Z]/,\n            \"?\": /[a-zA-Z]|\\s/,\n            \"&\": /\\S/,\n            \"C\": /./,\n            \"A\": /[a-zA-Z0-9]/,\n            \"a\": /[a-zA-Z0-9]|\\s/\n        },\n\n        setOptions: function(options) {\n            var that = this;\n\n            Widget.fn.setOptions.call(that, options);\n\n            that._rules = $.extend({}, that.rules, that.options.rules);\n\n            that._tokenize();\n\n            this._unbindInput();\n            this._bindInput();\n\n            that.value(that.element.val());\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that.floatingLabel) {\n                that.floatingLabel.destroy();\n            }\n\n            that.element.off(NS);\n\n            if (that._formElement) {\n                that._formElement.off(\"reset\", that._resetHandler);\n                that._formElement.off(\"submit\", that._submitHandler);\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        raw: function() {\n            var unmasked = this._unmask(this.element.val(), 0);\n            return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \"\");\n        },\n\n        value: function(value) {\n            var element = this.element;\n            var emptyMask = this._emptyMask;\n\n            if (value === undefined$1) {\n                return this.element.val();\n            }\n\n            if (value === null) {\n                value = \"\";\n            }\n\n            if (!emptyMask) {\n                this._oldValue = value;\n                element.val(value);\n                return;\n            }\n\n            value = this._unmask(value + \"\");\n\n            element.val(value ? emptyMask : \"\");\n\n            this._mask(0, this._maskLength, value);\n            this._unmaskedValue = null;\n\n            value = element.val();\n            this._oldValue = value;\n\n            if (kendo._activeElement() !== element) {\n                if (value === emptyMask) {\n                    element.val(\"\");\n                } else {\n                    this._togglePrompt();\n                }\n            }\n\n            if (this.floatingLabel) {\n                this.floatingLabel.refresh();\n            }\n        },\n\n        _togglePrompt: function(show) {\n            var DOMElement = this.element[0];\n            var value = DOMElement.value;\n\n            if (this.options.clearPromptChar) {\n                if (!show) {\n                    value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \" \");\n                } else {\n                    value = this._oldValue;\n                }\n\n                DOMElement.value = this._old = value;\n            }\n        },\n\n        readonly: function(readonly) {\n            var that = this;\n\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n            }\n        },\n\n        enable: function(enable) {\n            var that = this;\n\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n            }\n        },\n\n        _bindInput: function() {\n            var that = this;\n\n            if (that._maskLength) {\n                that.element\n                    .on(ns(KEYDOWN), that._keydown.bind(that))\n                    .on(ns(DROP), that._drop.bind(that))\n                    .on(ns(CHANGE), that._trackChange.bind(that))\n                    .on(INPUT_EVENT_NAME, that._inputHandler.bind(that));\n\n\n                if (kendo.support.browser.msie) {\n                    var version = kendo.support.browser.version;\n                    if (version > 8 && version < 11) {\n                        var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(\" \");\n                        that.element.on(events, that._legacyIEInputHandler.bind(that));\n                    }\n                }\n            }\n        },\n\n        _unbindInput: function() {\n            var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(\" \");\n\n            this.element.off(events);\n        },\n\n        _editable: function(options) {\n            var that = this;\n            var element = that.element;\n            var wrapper = that.wrapper;\n            var disable = options.disable;\n            var readonly = options.readonly;\n\n            that._unbindInput();\n\n            if (!readonly && !disable) {\n                element.prop(DISABLED, false)\n                       .prop(READONLY, false);\n\n                wrapper.removeClass(STATEDISABLED);\n\n                that._bindInput();\n            } else {\n                element.attr(DISABLED, disable)\n                       .attr(READONLY, readonly);\n\n                wrapper.toggleClass(STATEDISABLED, disable);\n            }\n        },\n\n        _change: function() {\n            var that = this;\n            var value = that.value();\n\n            if (value !== that._oldValue) {\n                that._oldValue = value;\n\n                that.trigger(CHANGE);\n                that.element.trigger(CHANGE);\n            }\n            else if (value === \"\" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update\n                that.element.trigger(CHANGE);\n            }\n        },\n\n        inputChange: function(backward) {\n            var that = this;\n            var old = that._old;\n            var element = that.element[0];\n            var value = element.value;\n            var selection = caret(element);\n            var cursor = selection[1];\n            var lengthDiff = value.length - old.length;\n            var mobile = kendo.support.mobileOS;\n\n            if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase\n                return;\n            }\n\n            if (lengthDiff === -1 && mobile.android && mobile.browser === \"chrome\") {\n                backward = true;\n            }\n\n            var contentStart = min(cursor, stringDiffStart(value, old));\n            var content = value.substring(contentStart, cursor);\n\n            element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);\n\n            var caretPos = that._mask(contentStart, cursor, content);\n            var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));\n\n            var unmasked = that._unmask(endContent, old.length - endContent.length);\n            that._mask(caretPos, caretPos, unmasked);\n\n            if (backward) {\n                caretPos = that._findCaretPosBackwards(contentStart);\n            }\n\n            caret(element, caretPos);\n\n            //clean-up flags\n            that.__dropping = false;\n        },\n\n        _trimStartPromptChars: function(content, count) {\n            var promptChar = this.options.promptChar;\n\n            while (count-- > 0 && content.indexOf(promptChar) === 0) {\n                content = content.substring(1);\n            }\n\n            return content;\n        },\n\n        _findCaretPosBackwards: function(pos) {\n            var caretStart = this._find(pos, true);\n            if (caretStart < pos) {\n                caretStart += 1;\n            }\n\n            return caretStart;\n        },\n\n        _inputHandler: function() {\n            if (kendo._activeElement() !== this.element[0]) {\n                return;\n            }\n\n            this.inputChange(this.__backward);\n        },\n\n        _legacyIEInputHandler: function(e) {\n            var that = this;\n            var input = that.element[0];\n            var value = input.value;\n            var type = e.type;\n\n            that.__pasting = (type === \"paste\");\n\n            setTimeout(function() {\n                if (type === \"mouseup\" && that.__pasting) {\n                    return;\n                }\n                if (input.value && input.value !== value) {\n                    that.inputChange(that.__backward);\n                }\n            });\n        },\n\n        _trackChange: function() {\n            var that = this;\n\n            that.__changing = true;\n            setTimeout(function() { that.__changing = false; });\n        },\n\n        _form: function() {\n            var that = this;\n            var element = that.element;\n            var formId = element.attr(\"form\");\n            var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n                that._resetHandler = function() {\n                    setTimeout(function() {\n                        that.value(element[0].value);\n                    });\n                };\n\n                that._submitHandler = function() {\n                    that.element[0].value = that._old = that.raw();\n                };\n\n                if (that.options.unmaskOnPost) {\n                    form.on(\"submit\", that._submitHandler);\n                }\n\n                that._formElement = form.on(\"reset\", that._resetHandler);\n            }\n        },\n\n        _keydown: function(e) {\n            var key = e.keyCode;\n\n            this.__backward = key === keys.BACKSPACE;\n\n            if (key === keys.ENTER) {\n                this._change();\n            }\n        },\n\n        _drop: function() {\n            this.__dropping = true;\n        },\n\n        _find: function(idx, backward) {\n            var value = this.element.val() || this._emptyMask;\n            var step = 1;\n\n            if (backward === true) {\n                step = -1;\n            }\n\n            while (idx > -1 || idx <= this._maskLength) {\n                if (value.charAt(idx) !== this.tokens[idx]) {\n                    return idx;\n                }\n\n                idx += step;\n            }\n\n            return -1;\n        },\n\n        _mask: function(start, end, value, backward) {\n            var element = this.element[0];\n            var current = element.value || this._emptyMask;\n            var empty = this.options.promptChar;\n            var valueLength;\n            var chrIdx = 0;\n            var unmasked;\n            var chr;\n            var idx;\n\n            start = this._find(start, backward);\n\n            if (start > end) {\n                end = start;\n            }\n\n            unmasked = this._unmask(current.substring(end), end);\n            value = this._unmask(value, start);\n            valueLength = value.length;\n\n            if (value) {\n                unmasked = unmasked.replace(new RegExp(\"^_{0,\" + valueLength + \"}\"), \"\");\n            }\n\n            value += unmasked;\n            current = current.split(\"\");\n            chr = value.charAt(chrIdx);\n\n            while (start < this._maskLength) {\n                current[start] = chr || empty;\n                chr = value.charAt(++chrIdx);\n\n                if (idx === undefined$1 && chrIdx > valueLength) {\n                    idx = start;\n                }\n\n                start = this._find(start + 1);\n            }\n\n            element.value = this._old = current.join(\"\");\n\n            if (kendo._activeElement() === element) {\n                if (idx === undefined$1) {\n                    idx = this._maskLength;\n                }\n\n                caret(element, idx);\n            }\n\n            return idx;\n        },\n\n        _unmask: function(value, idx) {\n            if (!value) {\n                return \"\";\n            }\n\n            if (this._unmaskedValue === value) {\n                return this._unmaskedValue;\n            }\n            value = (value + \"\").split(\"\");\n\n            var chr;\n            var token;\n            var chrIdx = 0;\n            var tokenIdx = idx || 0;\n\n            var empty = this.options.promptChar;\n\n            var valueLength = value.length;\n            var tokensLength = this.tokens.length;\n\n            var result = \"\";\n\n            while (tokenIdx < tokensLength) {\n                chr = value[chrIdx];\n                token = this.tokens[tokenIdx];\n\n                if (chr === token || chr === empty) {\n                    result += chr === empty ? empty : \"\";\n\n                    chrIdx += 1;\n                    tokenIdx += 1;\n                } else if (typeof token !== \"string\") {\n                    if ((token && token.test && token.test(chr)) || (kendo.isFunction(token) && token(chr))) {\n                        result += chr;\n                        tokenIdx += 1;\n                    } else {\n                        if (valueLength === 1) {\n                            this._blinkInvalidState();\n                        }\n                    }\n\n                    chrIdx += 1;\n                } else {\n                    tokenIdx += 1;\n                }\n\n                if (chrIdx >= valueLength) {\n                    break;\n                }\n            }\n            this._unmaskedValue = result;\n            return result;\n        },\n\n        _label: function() {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var id = element.attr(\"id\");\n            var floating;\n            var labelText;\n\n            if (options.label !== null) {\n                floating = isPlainObject(options.label) ? options.label.floating : false;\n                labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                if (floating) {\n                    that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                    that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                }\n\n                if (kendo.isFunction(labelText)) {\n                    labelText = labelText.call(that);\n                }\n\n                if (!labelText) {\n                    labelText = \"\";\n                }\n\n                if (!id) {\n                    id = options.name + \"_\" + kendo.guid();\n                    element.attr(\"id\", id);\n                }\n\n                that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n            }\n        },\n\n        _wrapper: function() {\n            var that = this;\n            var element = that.element;\n            var DOMElement = element[0];\n\n            var wrapper = element.wrap(\"<span class='k-input k-maskedtextbox'></span>\").parent();\n            wrapper[0].style.cssText = DOMElement.style.cssText;\n            DOMElement.style.width = \"100%\";\n            that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');\n        },\n\n        _blinkInvalidState: function() {\n            var that = this;\n\n            that._addInvalidState();\n            clearTimeout(that._invalidStateTimeout);\n            that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n        },\n\n        _addInvalidState: function() {\n            var that = this;\n\n            that.wrapper.addClass(STATEINVALID);\n            that._validationIcon.removeClass(\"k-hidden\");\n        },\n\n        _removeInvalidState: function() {\n            var that = this;\n\n            that.wrapper.removeClass(STATEINVALID);\n            that._validationIcon.addClass(\"k-hidden\");\n            that._invalidStateTimeout = null;\n        },\n\n        _tokenize: function() {\n            var tokens = [];\n            var tokenIdx = 0;\n\n            var mask = this.options.mask || \"\";\n            var maskChars = mask.split(\"\");\n            var length = maskChars.length;\n            var idx = 0;\n            var chr;\n            var rule;\n\n            var emptyMask = \"\";\n            var promptChar = this.options.promptChar;\n            var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n            var rules = this._rules;\n\n            while (idx < length) {\n                chr = maskChars[idx];\n                rule = rules[chr];\n\n                if (rule) {\n                    tokens[tokenIdx] = rule;\n                    emptyMask += promptChar;\n                    tokenIdx += 1;\n                } else {\n                    if (chr === \".\" || chr === \",\") {\n                        chr = numberFormat[chr];\n                    } else if (chr === \"$\") {\n                        chr = numberFormat.currency.symbol;\n                    } else if (chr === \"\\\\\") {\n                        idx += 1;\n                        chr = maskChars[idx];\n                    }\n\n                    chr = chr.split(\"\");\n\n                    for (var i = 0, l = chr.length; i < l; i++) {\n                        tokens[tokenIdx] = chr[i];\n                        emptyMask += chr[i];\n                        tokenIdx += 1;\n                    }\n                }\n                idx++;\n            }\n\n            this.tokens = tokens;\n\n            this._emptyMask = emptyMask;\n            this._maskLength = emptyMask.length;\n        }\n    });\n\n    function escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    }\n\n    kendo.cssProperties.registerPrefix(\"MaskedTextBox\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"MaskedTextBox\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    ui.plugin(MaskedTextBox);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}