{"version":3,"sources":["raw-mjs/kendo.buttongroup.js"],"names":["__meta__","id","name","category","description","depends","$","kendo","window","ui","Widget","ToggleButton","Button","keys","NS","KBUTTON","SELECTED","DISABLED","SELECT","ARIA_DISABLED","DOT","NONE","SINGLE","MULTIPLE","FOCUS","ButtonGroup","extend","init","element","options","that","this","fn","call","wrapper","selectedIndices","_buttons","_renderItems","items","fillMode","addClass","EMPTY","attr","_enable","enable","enabled","forEach","b","selection","select","index","_attachEvents","events","preventKeyNav","size","rounded","themeColor","badge","item","value","badgeEl","button","isNaN","find","getKendoToggleButton","getKendoButton","validValue","_badge","text","htmlEncode","destroy","empty","remove","current","off","each","i","el","component","toggleClass","focused","hasClass","is","removeAttr","trigger","nodeType","length","idx","toggle","_toggleIndex","_resetIndexes","_addButton","command","togglable","selected","btn","bind","_select","on","_keyDown","e","buttonGroup","focusableItems","focusedElement","currentIndex","isRtl","support","keyCode","LEFT","RIGHT","eq","preventDefault","_decorateButtons","buttons","groupOptions","children","image","disabled","attrValue","icon","push","encoded","url","html","attributes","appendTo","indices","target","indexOf","splice","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.buttongroup.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.togglebutton.js';\nimport './kendo.button.js';\n\nconst __meta__ = {\n    id: \"buttongroup\",\n    name: \"ButtonGroup\",\n    category: \"web\",\n    description: \"The Kendo ButtonGroup widget is a linear set of grouped buttons.\",\n    depends: [ \"core\", \"togglebutton\", \"button\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo;\n    var ui = kendo.ui;\n    var Widget = ui.Widget;\n    var ToggleButton = ui.ToggleButton;\n    var Button = ui.Button;\n    var keys = kendo.keys;\n    var NS = \".kendoButtonGroup\";\n    var KBUTTONGROUP = \"k-button-group k-button-group-\";\n    var KBUTTON = \"k-button\";\n    var SELECTED = \"k-selected\";\n    var DISABLED = \"k-disabled\";\n    var KFOCUS = \"k-focus\";\n    var SELECT = \"select\";\n    var KEYDOWN = \"keydown\";\n    var ARIA_DISABLED = \"aria-disabled\";\n    var EMPTY = \" \";\n    var DOT = \".\";\n    var NONE = \"none\";\n    var SINGLE = \"single\";\n    var MULTIPLE = \"multiple\";\n    var TOGGLE = \"toggle\";\n    var FOCUS = \"focus\";\n\n    var ButtonGroup = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            Widget.fn.init.call(that, element, options);\n\n            that.wrapper = that.element;\n\n            that.selectedIndices = [];\n\n            that._buttons = that._renderItems(that.options.items);\n            const fillMode = options && options.fillMode ? options.fillMode : 'solid';\n            that.element\n                .addClass(EMPTY + KBUTTONGROUP + fillMode)\n                .attr(\"role\", \"group\");\n\n            that._enable = true;\n\n            if (!that.options.enable || !that.options.enabled) {\n                that._enable = false;\n                that.element\n                        .attr(ARIA_DISABLED, true)\n                        .addClass(DISABLED);\n\n                that._buttons.forEach((b) => {\n                    b.enable(false);\n                });\n            }\n\n            if (that.options.selection !== NONE) {\n                that.select(that.options.index);\n            }\n\n            that._attachEvents();\n        },\n\n        events: [\n            SELECT\n        ],\n\n        options: {\n            name: \"ButtonGroup\",\n            selection: SINGLE,\n            index: -1,\n            enable: true,\n            enabled: true,\n            preventKeyNav: false,\n            size: \"medium\",\n            rounded: \"medium\",\n            fillMode: \"solid\",\n            themeColor: \"base\"\n        },\n\n        badge: function(item, value) {\n            var that = this,\n                element = that.element,\n                button = !isNaN(item) ? that._buttons[item] : element.find(item).getKendoToggleButton() || element.find(item).getKendoButton(),\n                validValue = value || value === 0,\n                badge, badgeEl;\n\n            if (!button) {\n                return;\n            }\n\n            badge = button.badge;\n\n            if (!badge && validValue) {\n                button._badge({ text: kendo.htmlEncode(value) });\n                return kendo.htmlEncode(value);\n            }\n\n            if (validValue) {\n                badge.text(kendo.htmlEncode(value));\n            } else if (value === false) {\n                button.badge = null;\n                badgeEl = badge.element;\n                badge.destroy();\n                badgeEl.empty().remove();\n                return;\n            }\n\n            return badge ? badge.text() : null;\n        },\n\n        current: function() {\n            return this.element.find(DOT + SELECTED);\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.element.off(NS);\n\n            that.element.find(DOT + KBUTTON).each(function(i, el) {\n                var component = $(el).getKendoToggleButton() || $(el).getKendoButton();\n\n                if (component) {\n                    component.destroy();\n                }\n            });\n\n            Widget.fn.destroy.call(that);\n        },\n\n        enable: function(enable) {\n            if (typeof enable == \"undefined\") {\n                enable = true;\n            }\n\n            this.element\n                    .attr(ARIA_DISABLED, !enable)\n                    .toggleClass(DISABLED, !enable);\n\n            this._buttons.forEach((b) => {\n                var focused = b.element.hasClass(KFOCUS) || b.element.is(\":focus\");\n\n                b.enable(enable);\n\n                if (focused) {\n                    b.element.removeAttr(\"disabled\").addClass(\"k-focus\").trigger(\"focus\");\n                }\n            });\n\n            this._enable = this.options.enable = enable;\n        },\n\n        select: function(el) {\n            var that = this,\n                button,\n                index = -1;\n\n            if (this.options.selection === NONE || el === undefined$1 || el === -1) {\n                return;\n            }\n\n            if (typeof el === \"number\") {\n                index = el;\n            } else if (el.nodeType) {\n                el = $(el);\n                index = el.index();\n            } else {\n                index = el.index();\n            }\n\n            button = that._buttons[index];\n\n            if (!button) {\n                return;\n            }\n\n            if (that.options.selection === MULTIPLE) {\n                if (el.length > 1) {\n                    el.each((i, element) => {\n                        var idx = $(element).index();\n\n                        that._buttons[idx].toggle();\n                        that._toggleIndex(idx);\n                    });\n                } else {\n                    that._buttons[index].toggle();\n                    that._toggleIndex(index);\n                }\n            } else {\n                that._resetIndexes(index);\n            }\n        },\n\n        _addButton: function(el, options) {\n            if (this.options.selection === NONE || (options.command && !options.togglable)) {\n                delete options.selected;\n\n                return new Button(el, options);\n            } else {\n                var btn = new ToggleButton(el, options);\n\n                btn.bind(TOGGLE, this._select.bind(this, el));\n\n                return btn;\n            }\n        },\n\n        _attachEvents: function() {\n            if (!this.options.preventKeyNav) {\n                this.element.on(KEYDOWN + NS, this._keyDown.bind(this));\n            }\n        },\n\n        _keyDown: function(e) {\n            var that = this,\n                buttonGroup = $(that.element),\n                focusableItems = buttonGroup.find(DOT + KBUTTON),\n                focusedElement = buttonGroup.find(\":focus\"),\n                currentIndex = focusableItems.index(focusedElement),\n                isRtl = kendo.support.isRtl(that.element),\n                itemToFocus;\n\n            if ((e.keyCode === keys.LEFT && !isRtl) || (e.keyCode === keys.RIGHT && isRtl)) {\n                itemToFocus = currentIndex === 0 ? focusableItems.eq(focusableItems.length - 1) : $(focusableItems[currentIndex - 1]);\n                itemToFocus.trigger(FOCUS);\n                e.preventDefault();\n            } else if ((e.keyCode === keys.LEFT && isRtl) || (e.keyCode === keys.RIGHT && !isRtl)) {\n                itemToFocus = currentIndex + 1 === focusableItems.length ? focusableItems.eq(0) : $(focusableItems[currentIndex + 1]);\n                itemToFocus.trigger(FOCUS);\n                e.preventDefault();\n            }\n        },\n\n        _decorateButtons: function(buttons) {\n            if (buttons.length) {\n                $(buttons[0].element).addClass(\"k-group-start\");\n                $(buttons[buttons.length - 1].element).addClass(\"k-group-end\");\n            }\n        },\n\n        _renderItems: function(items) {\n            var that = this,\n                groupOptions = that.options,\n                children = that.element.children(),\n                buttons = [];\n\n            if (children.length > 0) {\n                children.each(function(index) {\n                    var el = $(this),\n                        image = el.find(\"img\").addClass(\"k-image\"),\n                        disabled = el.is(\"[disabled]\") || el.hasClass(DISABLED),\n                        options = {\n                            badge: kendo.attrValue(el, \"badge\"),\n                            icon: !image[0] ? kendo.attrValue(el, \"icon\") : null,\n                            disabled: disabled,\n                            selected: !disabled ? el.is(DOT + SELECTED) : false,\n                            size: groupOptions.size,\n                            rounded: groupOptions.rounded,\n                            fillMode: groupOptions.fillMode,\n                            themeColor: groupOptions.themeColor\n                        };\n\n                    buttons.push(that._addButton(el, options));\n\n                    if (options.selected) {\n                        that.selectedIndices.push(index);\n                    }\n                });\n            }\n\n            if (!items) {\n                that._decorateButtons(buttons);\n                return buttons;\n            }\n\n            items.forEach(function(item, index) {\n                var text = item.text ? item.encoded === false ? item.text : kendo.htmlEncode(item.text) : \"\",\n                    el = item.url ? $(\"<a href=\" + item.url + \">\") : $(\"<button>\");\n\n                el.html(text);\n\n                if (item.attributes) {\n                    el.attr(item.attributes);\n                }\n\n                item = $.extend({}, item, {\n                    size: groupOptions.size,\n                    rounded: groupOptions.rounded,\n                    fillMode: groupOptions.fillMode,\n                    themeColor: groupOptions.themeColor\n                });\n\n                el.appendTo(that.element);\n                buttons.push(that._addButton(el, item));\n\n                if (item.selected) {\n                    that.selectedIndices.push(index);\n                }\n            });\n\n            that._decorateButtons(buttons);\n\n            return buttons;\n        },\n\n        _resetIndexes: function(index) {\n            this.selectedIndices = [];\n            this._buttons.forEach((b) => {\n                b.toggle(false);\n            });\n\n            this._buttons[index].toggle(true);\n            this.selectedIndices.push(index);\n        },\n\n        _select: function(button) {\n            var selection = this.options.selection,\n                index = button.index();\n\n            if (!this._enable || button.is(DOT + DISABLED)) {\n                return;\n            }\n\n            if (selection === MULTIPLE) {\n                this._toggleIndex(index);\n            } else if (selection === SINGLE) {\n                this._resetIndexes(index);\n            }\n\n            this.trigger(SELECT, { indices: this.selectedIndices, target: button });\n        },\n\n        _toggleIndex: function(index) {\n            if (this.selectedIndices.indexOf(index) === -1) {\n                this.selectedIndices.push(index);\n            } else {\n                this.selectedIndices.splice(this.selectedIndices.indexOf(index), 1);\n            }\n        }\n    });\n\n    ui.plugin(ButtonGroup);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}