{"version":3,"sources":["raw-mjs/kendo.numerictextbox.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","caret","keys","html","ui","Widget","activeElement","_activeElement","extractFormat","_extractFormat","parse","parseFloat","placeholderSupported","support","placeholder","getCulture","CHANGE","DISABLED","READONLY","INPUT","SPIN","ns","HOVEREVENTS","FOCUSED","HOVER","FOCUS","POINT","SELECTED","STATEDISABLED","STATEINVALID","ARIA_DISABLED","INTEGER_REGEXP","NULL","isPlainObject","extend","NumericTextBox","init","element","options","min","max","step","value","inputType","that","this","isStep","fn","call","on","_focusout","bind","attr","_parse","_initialOptions","_reset","_wrapper","_arrows","_validation","_input","mobileOS","_text","browser","edge","one","_focusin","selectValue","_click","factor","format","val","enable","is","parents","readonly","_label","_ariaLabel","_applyCssClasses","widget","wrapper","prefixInsertBefore","suffixInsertAfter","_validationIcon","floatingLabel","refresh","notify","decimals","autoAdjust","restrictDecimals","round","culture","spinners","selectOnFocus","upArrowText","downArrowText","label","size","fillMode","rounded","prefixOptions","separator","suffixOptions","events","_editable","disable","text","add","off","_toggleText","_upArrowEventHandler","unbind","_downArrowEventHandler","_inputLabel","addClass","removeClass","_toggleHover","prop","e","preventDefault","_spin","_upArrow","_downArrow","_keydown","_keyup","_paste","_inputHandler","focus","setOptions","_placeholder","destroy","_arrowsWrap","remove","_floatingLabelContainer","unwrap","Boolean","_value","_form","_resetHandler","_option","_adjust","_update","_old","arrows","_release","clearTimeout","_spinning","siblings","buttonHtml","appendTo","wrapAll","parent","toggle","eq","UserEvents","release","icon","iconClass","insertAfter","_blur","_change","_focusing","setTimeout","result","groupRegExp","extractRegExp","input","target","idx","substring","_format","group","caretPosition","RegExp","exec","replace","length","indexOf","select","_getFactorValue","_typing","trigger","_culture","_removeInvalidState","numberFormat","toLowerCase","currency","percent","show","accessKey","find","first","insertBefore","setAttribute","type","title","tabIndex","style","cssText","className","role","autocomplete","key","keyCode","NUMPAD_DOT","_numPadDot","DOWN","UP","ENTER","TAB","_cachedCaret","_step","decimalSeparator","minInvalid","charAt","_isPasted","toString","_numericRegex","test","_oldText","_blinkInvalidState","_addInvalidState","_invalidStateTimeout","precision","fractionRule","_separator","_oldPrecision","_floatRegExp","option","timeout","originalValue","toFixed","currentTarget","toggleClass","removeAttr","_round","truncate","isNotNull","floating","labelText","content","wrap","FloatingLabel","isFunction","guid","DOMElement","hide","width","css","formId","form","closest","direction","dir","renderButton","shape","parts","split","join","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.numerictextbox.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.userevents.js';\nimport './kendo.floatinglabel.js';\nimport './kendo.html.button.js';\nimport './kendo.icons.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"numerictextbox\",\n    name: \"NumericTextBox\",\n    category: \"web\",\n    description: \"The NumericTextBox widget can format and display numeric, percentage or currency textbox.\",\n    depends: [\"core\", \"userevents\", \"floatinglabel\", \"html.button\", \"icons\", \"prefix-suffix-containers.chunk\"]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        caret = kendo.caret,\n        keys = kendo.keys,\n        html = kendo.html,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        activeElement = kendo._activeElement,\n        extractFormat = kendo._extractFormat,\n        parse = kendo.parseFloat,\n        placeholderSupported = kendo.support.placeholder,\n        getCulture = kendo.getCulture,\n        CHANGE = \"change\",\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        INPUT = \"k-input-inner\",\n        SPIN = \"spin\",\n        ns = \".kendoNumericTextBox\",\n        TOUCHEND = \"touchend\",\n        MOUSELEAVE = \"mouseleave\" + ns,\n        HOVEREVENTS = \"mouseenter\" + ns + \" \" + MOUSELEAVE,\n        FOCUSED = \"k-focus\",\n        HOVER = \"k-hover\",\n        FOCUS = \"focus\",\n        POINT = \".\",\n        SYMBOL = \"symbol\",\n        CLASS_ICON = \"k-icon\",\n        LABELCLASSES = \"k-label k-input-label\",\n        FLOATINGLABELCLASS = \"k-floating-label\",\n        SELECTED = \"k-selected\",\n        STATEDISABLED = \"k-disabled\",\n        STATEINVALID = \"k-invalid\",\n        ARIA_DISABLED = \"aria-disabled\",\n        INTEGER_REGEXP = /^(-)?(\\d*)$/,\n        NULL = null,\n        isPlainObject = $.isPlainObject,\n        extend = $.extend;\n\n    var NumericTextBox = Widget.extend({\n         init: function(element, options) {\n             var that = this,\n             isStep = options && options.step !== undefined$1,\n             min, max, step, value, disabled;\n             var inputType;\n\n             Widget.fn.init.call(that, element, options);\n\n             options = that.options;\n             element = that.element\n                           .on(\"focusout\" + ns, that._focusout.bind(that))\n                           .attr(\"role\", \"spinbutton\");\n\n             options.placeholder = options.placeholder || element.attr(\"placeholder\");\n\n             min = that.min(element.attr(\"min\"));\n             max = that.max(element.attr(\"max\"));\n             step = that._parse(element.attr(\"step\"));\n\n             if (options.min === NULL && min !== NULL) {\n                 options.min = min;\n             }\n\n             if (options.max === NULL && max !== NULL) {\n                 options.max = max;\n             }\n\n             if (!isStep && step !== NULL) {\n                 options.step = step;\n             }\n\n             that._initialOptions = extend({}, options);\n\n             inputType = element.attr(\"type\");\n\n             that._reset();\n             that._wrapper();\n             that._arrows();\n             that._validation();\n             that._input();\n\n             if (!kendo.support.mobileOS) {\n                 that._text.on(FOCUS + ns, that._click.bind(that));\n             } else {\n                 that._text.on(TOUCHEND + ns + \" \" + FOCUS + ns, function() {\n                     if (kendo.support.browser.edge) {\n                         that._text.one(FOCUS + ns, function() {\n                            that._focusin();\n                         });\n                     } else {\n                        that._focusin();\n                     }\n                     that.selectValue();\n                 });\n             }\n\n             element.attr(\"aria-valuemin\", options.min !== NULL ? options.min * options.factor : options.min)\n                    .attr(\"aria-valuemax\", options.max !== NULL ? options.max * options.factor : options.max);\n\n             options.format = extractFormat(options.format);\n\n             value = options.value;\n\n             if (value == NULL) {\n                 if (inputType == \"number\") {\n                    value = parseFloat(element.val());\n                 } else {\n                     value = element.val();\n                 }\n             }\n\n             that.value(value);\n\n             disabled = !options.enable || element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n             if (disabled) {\n                 that.enable(false);\n             } else {\n                 that.readonly(element.is(\"[readonly]\"));\n             }\n\n             that._label();\n             that._ariaLabel(that._text);\n             that._applyCssClasses();\n\n             addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._text, suffixInsertAfter: that._validationIcon });\n             if (that.floatingLabel) {\n                 that.floatingLabel.refresh();\n             }\n\n             kendo.notify(that);\n         },\n\n        options: {\n            name: \"NumericTextBox\",\n            decimals: NULL,\n            autoAdjust: true,\n            enable: true,\n            restrictDecimals: false,\n            min: NULL,\n            max: NULL,\n            value: NULL,\n            step: 1,\n            round: true,\n            culture: \"\",\n            format: \"n\",\n            spinners: true,\n            placeholder: \"\",\n            selectOnFocus: false,\n            factor: 1,\n            upArrowText: \"Increase value\",\n            downArrowText: \"Decrease value\",\n            label: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            }\n        },\n        events: [\n            CHANGE,\n            SPIN\n        ],\n\n        _editable: function(options) {\n            var that = this,\n                element = that.element,\n                disable = options.disable,\n                readonly = options.readonly,\n                text = that._text.add(element),\n                wrapper = that.wrapper.off(HOVEREVENTS);\n\n            that._toggleText(true);\n\n            that._upArrowEventHandler.unbind(\"press\");\n            that._downArrowEventHandler.unbind(\"press\");\n            element\n                .off(\"keydown\" + ns)\n                .off(\"keyup\" + ns)\n                .off(\"input\" + ns)\n                .off(\"paste\" + ns);\n\n            if (that._inputLabel) {\n                that._inputLabel.off(ns);\n            }\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .on(HOVEREVENTS, that._toggleHover);\n\n                text.prop(DISABLED, false)\n                    .prop(READONLY, false)\n                    .attr(ARIA_DISABLED, false);\n\n                that._upArrowEventHandler.bind(\"press\", function(e) {\n                    e.preventDefault();\n                    that._spin(1);\n                    that._upArrow.addClass(SELECTED);\n                });\n\n                that._downArrowEventHandler.bind(\"press\", function(e) {\n                    e.preventDefault();\n                    that._spin(-1);\n                    that._downArrow.addClass(SELECTED);\n                });\n\n                that.element\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keyup\" + ns, that._keyup.bind(that))\n                    .on(\"paste\" + ns, that._paste.bind(that))\n                    .on(\"input\" + ns, that._inputHandler.bind(that));\n\n                if (that._inputLabel) {\n                    that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n                }\n\n            } else {\n                wrapper\n                    .addClass(disable ? STATEDISABLED : \"\")\n                    .removeClass(disable ? \"\" : STATEDISABLED);\n\n                text.attr(DISABLED, disable)\n                    .attr(READONLY, readonly)\n                    .attr(ARIA_DISABLED, disable);\n            }\n        },\n\n        readonly: function(readonly) {\n            var that = this;\n\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n            }\n        },\n\n        enable: function(enable) {\n            var that = this;\n\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n            }\n        },\n\n        setOptions: function(options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n\n            that._text.prop(\"placeholder\", that.options.placeholder);\n            that._placeholder(that.options.placeholder);\n            that.element.attr({\n                \"aria-valuemin\": that.options.min !== NULL ? that.options.min * that.options.factor : that.options.min,\n                \"aria-valuemax\": that.options.max !== NULL ? that.options.max * that.options.factor : that.options.max\n            });\n\n            that.options.format = extractFormat(that.options.format);\n            that._upArrowEventHandler.destroy();\n            that._upArrowEventHandler = null;\n            that._downArrowEventHandler.destroy();\n            that._downArrowEventHandler = null;\n            that._arrowsWrap.remove();\n            that._arrows();\n\n            that._applyCssClasses();\n\n            if (that._inputLabel) {\n                that._inputLabel.off(ns);\n                that._inputLabel.remove();\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                    if (that._floatingLabelContainer) {\n                        that.wrapper.unwrap();\n                    }\n                }\n            }\n\n            that._label();\n\n            if (options.enable !== undefined$1 || options.readonly !== undefined$1) {\n                that._editable({\n                    readonly: options.readonly,\n                    disable: !options.enable\n                });\n            } else {\n                that._editable({\n                    readonly: that.element.attr(\"readonly\") !== undefined$1 ? Boolean(that.element.attr(\"readonly\")) : that.options.readonly,\n                    disable: that.element.attr(\"disabled\") !== undefined$1 ? Boolean(that.element.attr(\"disabled\")) : !that.options.enable\n                });\n            }\n\n            if (options.value !== undefined$1) {\n                that.value(options.value);\n            } else if (that._value !== undefined$1) {\n                that.value(that._value);\n            }\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that._inputLabel) {\n                that._inputLabel.off(ns);\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                }\n            }\n\n            that.element\n                .add(that._text)\n                .add(that._upArrow)\n                .add(that._downArrow)\n                .off(ns);\n\n            that._upArrowEventHandler.destroy();\n            that._downArrowEventHandler.destroy();\n\n            if (that._form) {\n                that._form.off(\"reset\", that._resetHandler);\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        min: function(value) {\n            return this._option(\"min\", value);\n        },\n\n        max: function(value) {\n            return this._option(\"max\", value);\n        },\n\n        step: function(value) {\n            return this._option(\"step\", value);\n        },\n\n        value: function(value) {\n            var that = this, adjusted;\n\n            if (value === undefined$1) {\n                return that._value;\n            }\n\n            value = that._parse(value);\n            adjusted = that._adjust(value);\n\n            if (value !== adjusted) {\n                value = NULL;\n            }\n\n            that._update(value);\n            that._old = that._value;\n\n            if (that.floatingLabel) {\n                that.floatingLabel.refresh();\n            }\n        },\n\n        focus: function() {\n            this._focusin();\n            this.selectValue();\n        },\n\n        _adjust: function(value) {\n            let that = this,\n                options = that.options,\n                min = options.min,\n                max = options.max,\n                autoAdjust = options.autoAdjust;\n\n            if (value === NULL || !autoAdjust) {\n                return value;\n            }\n\n            if (min !== NULL && value < min) {\n                value = min;\n            } else if (max !== NULL && value > max) {\n                value = max;\n            }\n\n            return value;\n        },\n\n        _arrows: function() {\n            var that = this,\n            arrows,\n            _release = function() {\n                clearTimeout( that._spinning );\n                arrows.removeClass(SELECTED);\n            },\n            options = that.options,\n            spinners = options.spinners,\n            element = that.element;\n\n            arrows = element.siblings(\".k-icon-button\");\n\n            if (!arrows[0]) {\n                arrows = $(buttonHtml(\"increase\", options.upArrowText, options) + buttonHtml(\"decrease\", options.downArrowText, options))\n                        .appendTo(that.wrapper);\n\n                that._arrowsWrap = arrows.wrapAll('<span class=\"k-input-spinner k-spin-button\"/>').parent();\n            }\n\n            if (!spinners) {\n                arrows.parent().toggle(spinners);\n            }\n\n            that._upArrow = arrows.eq(0);\n            that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });\n            that._downArrow = arrows.eq(1);\n            that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });\n        },\n\n        _validation: function() {\n            var that = this;\n            var element = that.element;\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n        },\n\n        _blur: function() {\n            var that = this;\n\n            that._toggleText(true);\n\n            that._change(that.element.val());\n        },\n\n        _click: function(e) {\n            var that = this;\n\n            clearTimeout(that._focusing);\n            that._focusing = setTimeout(function() {\n                var input = e.target,\n                    idx = caret(input)[0],\n                    value = input.value.substring(0, idx),\n                    format = that._format(that.options.format),\n                    group = format[\",\"],\n                    result, groupRegExp, extractRegExp,\n                    caretPosition = 0;\n\n                if (group) {\n                    groupRegExp = new RegExp(\"\\\\\" + group, \"g\");\n                    extractRegExp = new RegExp(\"(-)?(\" + format[SYMBOL] + \")?([\\\\d\\\\\" + group + \"]+)(\\\\\" + format[POINT] + \")?(\\\\d+)?\");\n                }\n\n                if (extractRegExp) {\n                    result = extractRegExp.exec(value);\n                }\n\n                if (result) {\n                    caretPosition = result[0].replace(groupRegExp, \"\").length;\n\n                    if (value.indexOf(\"(\") != -1 && that._value < 0) {\n                        caretPosition++;\n                    }\n                }\n\n                that._focusin();\n\n                caret(that.element[0], caretPosition);\n                that.selectValue();\n            });\n        },\n\n        selectValue: function() {\n            if (this.options.selectOnFocus) {\n                this.element[0].select();\n            }\n        },\n\n        _getFactorValue: function(value) {\n            var that = this,\n                factor = that.options.factor;\n\n            if (factor && factor !== 1) {\n                value = kendo.parseFloat(value);\n                if (value !== null) {\n                    value = value / factor;\n                }\n            }\n\n            return value;\n        },\n\n        _change: function(value) {\n            var that = this;\n\n            value = that._getFactorValue(value);\n            that._update(value);\n            value = that._value;\n\n            if (that._old != value) {\n                that._old = value;\n\n                if (!that._typing) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                that.trigger(CHANGE);\n            }\n\n            that._typing = false;\n        },\n\n        _culture: function(culture) {\n            return culture || getCulture(this.options.culture);\n        },\n\n        _focusin: function() {\n            var that = this;\n            that.wrapper.addClass(FOCUSED);\n            that._toggleText(false);\n            that.element[0].focus();\n        },\n\n        _focusout: function() {\n            var that = this;\n\n            clearTimeout(that._focusing);\n            that.wrapper.removeClass(FOCUSED).removeClass(HOVER);\n            that._blur();\n            that._removeInvalidState();\n        },\n\n        _format: function(format, culture) {\n            var numberFormat = this._culture(culture).numberFormat;\n\n            format = format.toLowerCase();\n\n            if (format.indexOf(\"c\") > -1) {\n                numberFormat = numberFormat.currency;\n            } else if (format.indexOf(\"p\") > -1) {\n                numberFormat = numberFormat.percent;\n            }\n\n            return numberFormat;\n        },\n\n        _input: function() {\n            var that = this,\n                options = that.options,\n                element = that.element.addClass(INPUT).show()[0],\n                accessKey = element.accessKey,\n                wrapper = that.wrapper,\n                inputs = wrapper.find(POINT + INPUT),\n                text;\n\n            text = inputs.first();\n\n            if (text.length < 2) {\n                text = $('<input type=\"text\"/>')\n                        .attr(kendo.attr(\"validate\"), \"false\")\n                        .insertBefore(element);\n            }\n\n            try {\n                element.setAttribute(\"type\", \"text\");\n            } catch (e) {\n                element.type = \"text\";\n            }\n\n            text[0].title = element.title;\n            text[0].tabIndex = element.tabIndex;\n            text[0].style.cssText = element.style.cssText;\n            text.prop(\"placeholder\", options.placeholder);\n\n            if (accessKey) {\n                text.attr(\"accesskey\", accessKey);\n                element.accessKey = \"\";\n            }\n\n\n            that._text = text.addClass(element.className)\n                             .attr({\n                                 \"role\": \"spinbutton\",\n                                 \"aria-valuemin\": options.min !== NULL ? options.min * options.factor : options.min,\n                                 \"aria-valuemax\": options.max !== NULL ? options.max * options.factor : options.max,\n                                 \"autocomplete\": \"off\"\n                             });\n        },\n\n        _keydown: function(e) {\n            var that = this,\n                key = e.keyCode;\n\n            if (key === keys.NUMPAD_DOT) {\n                that._numPadDot = true;\n            }\n\n            if (key == keys.DOWN) {\n                that._step(-1);\n                return;\n            } else if (key == keys.UP) {\n                that._step(1);\n                return;\n            } else if (key == keys.ENTER) {\n                that._change(that.element.val());\n                return;\n            }\n\n            if (key != keys.TAB) {\n                that._typing = true;\n            }\n            that._cachedCaret = caret(that.element);\n        },\n\n        _keyup: function() {\n            this._removeInvalidState();\n        },\n\n        _inputHandler: function() {\n            var element = this.element;\n            var value = element.val();\n            var min = this.options.min;\n            var numberFormat = this._format(this.options.format);\n            var decimalSeparator = numberFormat[POINT];\n            var minInvalid = (min !== null && min >= 0 && value.charAt(0) === \"-\");\n\n            if (this._numPadDot && decimalSeparator !== POINT) {\n                value = value.replace(POINT, decimalSeparator);\n                this.element.val(value);\n                this._numPadDot = false;\n            }\n\n            if (this._isPasted && this._parse(value)) {\n                value = this._parse(value)\n                    .toString()\n                    .replace(POINT, numberFormat[POINT]);\n            }\n\n            if (this._numericRegex(numberFormat).test(value) && !minInvalid) {\n                this._oldText = value;\n            } else {\n                this._blinkInvalidState();\n                this.element.val(this._oldText);\n                if (this._cachedCaret) {\n                    caret(element, this._cachedCaret[0]);\n                    this._cachedCaret = null;\n                }\n            }\n\n            this._isPasted = false;\n        },\n\n        _blinkInvalidState: function() {\n            var that = this;\n\n            that._addInvalidState();\n            clearTimeout(that._invalidStateTimeout);\n            that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n        },\n\n        _addInvalidState: function() {\n            var that = this;\n\n            that.wrapper.addClass(STATEINVALID);\n            that._validationIcon.removeClass('k-hidden');\n        },\n\n        _removeInvalidState: function() {\n            var that = this;\n\n            that.wrapper.removeClass(STATEINVALID);\n            that._validationIcon.addClass('k-hidden');\n            that._invalidStateTimeout = null;\n        },\n\n        _numericRegex: function(numberFormat) {\n            var that = this;\n            var separator = numberFormat[POINT];\n            var precision = that.options.decimals;\n            var fractionRule = \"*\";\n\n            if (separator === POINT) {\n                separator = \"\\\\\" + separator;\n            }\n\n            if (precision === NULL) {\n                precision = numberFormat.decimals;\n            }\n\n            if (precision === 0 && that.options.restrictDecimals) {\n                return INTEGER_REGEXP;\n            }\n\n            if (that.options.restrictDecimals) {\n                fractionRule = \"{0,\" + precision + \"}\";\n            }\n\n            if (that._separator !== separator || that._oldPrecision !== precision) {\n                that._separator = separator;\n                that._floatRegExp = new RegExp(\"^(-)?(((\\\\d+(\" + separator + \"\\\\d\" + fractionRule + \")?)|(\" + separator + \"\\\\d\" + fractionRule + \")))?$\");\n                that._oldPrecision = precision;\n            }\n\n            return that._floatRegExp;\n        },\n\n        _paste: function(e) {\n            var that = this;\n            var element = e.target;\n            var value = element.value;\n            var numberFormat = that._format(that.options.format);\n\n            that._isPasted = true;\n\n           setTimeout(function() {\n                var result = that._parse(element.value);\n\n                if (result === NULL) {\n                    that._update(value);\n                } else {\n                    element.value = result.toString().replace(POINT, numberFormat[POINT]);\n                    if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {\n                        value = that._getFactorValue(element.value);\n                        that._update(value);\n                    }\n                }\n            });\n        },\n\n        _option: function(option, value) {\n            var that = this,\n                element = that.element,\n                options = that.options;\n\n            if (value === undefined$1) {\n                return options[option];\n            }\n\n            value = that._parse(value);\n\n            if (!value && option === \"step\") {\n                return;\n            }\n\n            options[option] = value;\n            element\n                .add(that._text)\n                .attr(\"aria-value\" + option, value);\n\n            element.attr(option, value);\n        },\n\n        _spin: function(step, timeout) {\n            var that = this;\n\n            timeout = timeout || 500;\n\n            clearTimeout( that._spinning );\n            that._spinning = setTimeout(function() {\n                that._spin(step, 50);\n            }, timeout );\n\n            that._step(step);\n        },\n\n        _step: function(step) {\n            var that = this,\n                element = that.element,\n                originalValue = that._value,\n                value = that._parse(element.val()) || 0,\n                precision = that.options.decimals || 2;\n\n            if (activeElement() != element[0]) {\n                that._focusin();\n            }\n\n            if (that.options.factor && value) {\n                value = value / that.options.factor;\n            }\n\n            value = +(value + that.options.step * step).toFixed(precision);\n            value = that._adjust(value);\n            that._update(value);\n            that._typing = false;\n\n            if (originalValue !== value) {\n                that.trigger(SPIN);\n            }\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n        },\n\n        _toggleText: function(toggle) {\n            var that = this;\n\n            that._text.toggle(toggle);\n            if (toggle) {\n                that._text.removeAttr(\"aria-hidden\");\n            } else {\n                that._text.attr(\"aria-hidden\", \"true\");\n            }\n            that.element.toggle(!toggle);\n        },\n\n        _parse: function(value, culture) {\n            return parse(value, this._culture(culture), this.options.format);\n        },\n\n        _round: function(value, precision) {\n            var rounder = this.options.round ? kendo._round : truncate;\n\n            return rounder(value, precision);\n        },\n\n        _update: function(value) {\n            var that = this,\n                options = that.options,\n                factor = options.factor,\n                format = options.format,\n                decimals = options.decimals,\n                culture = that._culture(),\n                numberFormat = that._format(format, culture),\n                originalValue,\n                isNotNull;\n\n            if (decimals === NULL) {\n                decimals = numberFormat.decimals;\n            }\n\n            value = that._parse(value, culture);\n\n            isNotNull = value !== NULL;\n\n            if (isNotNull) {\n                value = parseFloat(that._round(value, decimals), 10);\n            }\n\n            that._value = value = that._adjust(value);\n            that._placeholder(kendo.toString(value, format, culture));\n\n            if (isNotNull) {\n                if (factor) {\n                    value = parseFloat(that._round(value * factor, decimals), 10);\n                }\n                value = value.toString();\n                if (value.indexOf(\"e\") !== -1) {\n                    value = that._round(+value, decimals);\n                }\n                originalValue = value;\n                value = value.replace(POINT, numberFormat[POINT]);\n            } else {\n                value = null;\n                originalValue = null;\n            }\n\n            that.element.val(value);\n            that._oldText = value;\n            that.element.add(that._text).attr(\"aria-valuenow\", originalValue);\n        },\n\n        _placeholder: function(value) {\n            var input = this._text;\n\n            input.val(value);\n            if (!placeholderSupported && !value) {\n                input.val(this.options.placeholder);\n            }\n\n            input.attr(\"title\", this.element.attr(\"title\") || input.val());\n        },\n\n        _label: function() {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var id = element.attr(\"id\");\n            var floating;\n            var labelText;\n\n            if (options.label !== null) {\n                floating = isPlainObject(options.label) ? options.label.floating : false;\n                labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                if (floating) {\n                    that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                    that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                }\n\n                if (kendo.isFunction(labelText)) {\n                    labelText = labelText.call(that);\n                }\n\n                if (!labelText) {\n                    labelText = \"\";\n                }\n\n                if (!id) {\n                    id = options.name + \"_\" + kendo.guid();\n                    element.attr(\"id\", id);\n                }\n\n                that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n\n                if ((that.element.attr(\"disabled\") === undefined$1) && (that.element.attr(\"readonly\") === undefined$1)) {\n                    that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n                }\n            }\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                DOMElement = element[0],\n                wrapper;\n\n            wrapper = element.parents(\".k-numerictextbox\");\n\n            if (!wrapper.is(\"span.k-numerictextbox\")) {\n                wrapper = element.hide().wrap(\"<span/>\").parent();\n            }\n\n            wrapper[0].style.cssText = DOMElement.style.cssText;\n            DOMElement.style.width = \"\";\n            that.wrapper = wrapper.addClass(\"k-numerictextbox k-input\")\n                                  .addClass(DOMElement.className)\n                                  .removeClass('input-validation-error')\n                                  .css(\"display\", \"\");\n        },\n\n        _reset: function() {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n                that._resetHandler = function() {\n                    setTimeout(function() {\n                        that.value(element[0].value);\n                        that.max(that._initialOptions.max);\n                        that.min(that._initialOptions.min);\n                    });\n                };\n\n                that._form = form.on(\"reset\", that._resetHandler);\n            }\n        }\n    });\n\n    kendo.cssProperties.registerPrefix(\"NumericTextBox\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"NumericTextBox\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    function buttonHtml(direction, text, options) {\n        var className = direction === \"increase\" ? \"caret-alt-up\" : \"caret-alt-down\";\n        var dir = direction === \"increase\" ? \"increase\" : \"decrease\";\n\n        return html.renderButton('<button role=\"button\" tabindex=\"-1\" unselectable=\"on\" class=\"k-spinner-' + dir + '\" aria-label=\"' + text + '\" title=\"' + text + '\"></button>', extend({}, options, {\n            icon: className,\n            shape: null,\n            rounded: null\n        }));\n    }\n\n    function truncate(value, precision) {\n        var parts = parseFloat(value, 10).toString().split(POINT);\n\n        if (parts[1]) {\n            parts[1] = parts[1].substring(0, precision);\n        }\n\n        return parts.join(POINT);\n\n    }\n\n    ui.plugin(NumericTextBox);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}